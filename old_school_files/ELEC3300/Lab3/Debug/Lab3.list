
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024f4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000658  080026d8  080026d8  000126d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d30  08002d30  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d30  08002d30  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d30  08002d30  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d30  08002d30  00012d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d34  08002d34  00012d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  08002d44  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08002d44  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005c5c  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015ce  00000000  00000000  00025c91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000620  00000000  00000000  00027260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000568  00000000  00000000  00027880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018373  00000000  00000000  00027de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000664b  00000000  00000000  0004015b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d3b9  00000000  00000000  000467a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d3b5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001870  00000000  00000000  000d3bb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	080026c0 	.word	0x080026c0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	080026c0 	.word	0x080026c0

08000224 <__aeabi_frsub>:
 8000224:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000228:	e002      	b.n	8000230 <__addsf3>
 800022a:	bf00      	nop

0800022c <__aeabi_fsub>:
 800022c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000230 <__addsf3>:
 8000230:	0042      	lsls	r2, r0, #1
 8000232:	bf1f      	itttt	ne
 8000234:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000238:	ea92 0f03 	teqne	r2, r3
 800023c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000240:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000244:	d06a      	beq.n	800031c <__addsf3+0xec>
 8000246:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800024a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800024e:	bfc1      	itttt	gt
 8000250:	18d2      	addgt	r2, r2, r3
 8000252:	4041      	eorgt	r1, r0
 8000254:	4048      	eorgt	r0, r1
 8000256:	4041      	eorgt	r1, r0
 8000258:	bfb8      	it	lt
 800025a:	425b      	neglt	r3, r3
 800025c:	2b19      	cmp	r3, #25
 800025e:	bf88      	it	hi
 8000260:	4770      	bxhi	lr
 8000262:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000266:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800026a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800026e:	bf18      	it	ne
 8000270:	4240      	negne	r0, r0
 8000272:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000276:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800027a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800027e:	bf18      	it	ne
 8000280:	4249      	negne	r1, r1
 8000282:	ea92 0f03 	teq	r2, r3
 8000286:	d03f      	beq.n	8000308 <__addsf3+0xd8>
 8000288:	f1a2 0201 	sub.w	r2, r2, #1
 800028c:	fa41 fc03 	asr.w	ip, r1, r3
 8000290:	eb10 000c 	adds.w	r0, r0, ip
 8000294:	f1c3 0320 	rsb	r3, r3, #32
 8000298:	fa01 f103 	lsl.w	r1, r1, r3
 800029c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a0:	d502      	bpl.n	80002a8 <__addsf3+0x78>
 80002a2:	4249      	negs	r1, r1
 80002a4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002a8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002ac:	d313      	bcc.n	80002d6 <__addsf3+0xa6>
 80002ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002b2:	d306      	bcc.n	80002c2 <__addsf3+0x92>
 80002b4:	0840      	lsrs	r0, r0, #1
 80002b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ba:	f102 0201 	add.w	r2, r2, #1
 80002be:	2afe      	cmp	r2, #254	; 0xfe
 80002c0:	d251      	bcs.n	8000366 <__addsf3+0x136>
 80002c2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002ca:	bf08      	it	eq
 80002cc:	f020 0001 	biceq.w	r0, r0, #1
 80002d0:	ea40 0003 	orr.w	r0, r0, r3
 80002d4:	4770      	bx	lr
 80002d6:	0049      	lsls	r1, r1, #1
 80002d8:	eb40 0000 	adc.w	r0, r0, r0
 80002dc:	3a01      	subs	r2, #1
 80002de:	bf28      	it	cs
 80002e0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002e4:	d2ed      	bcs.n	80002c2 <__addsf3+0x92>
 80002e6:	fab0 fc80 	clz	ip, r0
 80002ea:	f1ac 0c08 	sub.w	ip, ip, #8
 80002ee:	ebb2 020c 	subs.w	r2, r2, ip
 80002f2:	fa00 f00c 	lsl.w	r0, r0, ip
 80002f6:	bfaa      	itet	ge
 80002f8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002fc:	4252      	neglt	r2, r2
 80002fe:	4318      	orrge	r0, r3
 8000300:	bfbc      	itt	lt
 8000302:	40d0      	lsrlt	r0, r2
 8000304:	4318      	orrlt	r0, r3
 8000306:	4770      	bx	lr
 8000308:	f092 0f00 	teq	r2, #0
 800030c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000310:	bf06      	itte	eq
 8000312:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000316:	3201      	addeq	r2, #1
 8000318:	3b01      	subne	r3, #1
 800031a:	e7b5      	b.n	8000288 <__addsf3+0x58>
 800031c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000320:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000324:	bf18      	it	ne
 8000326:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800032a:	d021      	beq.n	8000370 <__addsf3+0x140>
 800032c:	ea92 0f03 	teq	r2, r3
 8000330:	d004      	beq.n	800033c <__addsf3+0x10c>
 8000332:	f092 0f00 	teq	r2, #0
 8000336:	bf08      	it	eq
 8000338:	4608      	moveq	r0, r1
 800033a:	4770      	bx	lr
 800033c:	ea90 0f01 	teq	r0, r1
 8000340:	bf1c      	itt	ne
 8000342:	2000      	movne	r0, #0
 8000344:	4770      	bxne	lr
 8000346:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800034a:	d104      	bne.n	8000356 <__addsf3+0x126>
 800034c:	0040      	lsls	r0, r0, #1
 800034e:	bf28      	it	cs
 8000350:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800035a:	bf3c      	itt	cc
 800035c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000360:	4770      	bxcc	lr
 8000362:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000366:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800036a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800036e:	4770      	bx	lr
 8000370:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000374:	bf16      	itet	ne
 8000376:	4608      	movne	r0, r1
 8000378:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800037c:	4601      	movne	r1, r0
 800037e:	0242      	lsls	r2, r0, #9
 8000380:	bf06      	itte	eq
 8000382:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000386:	ea90 0f01 	teqeq	r0, r1
 800038a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800038e:	4770      	bx	lr

08000390 <__aeabi_ui2f>:
 8000390:	f04f 0300 	mov.w	r3, #0
 8000394:	e004      	b.n	80003a0 <__aeabi_i2f+0x8>
 8000396:	bf00      	nop

08000398 <__aeabi_i2f>:
 8000398:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800039c:	bf48      	it	mi
 800039e:	4240      	negmi	r0, r0
 80003a0:	ea5f 0c00 	movs.w	ip, r0
 80003a4:	bf08      	it	eq
 80003a6:	4770      	bxeq	lr
 80003a8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003ac:	4601      	mov	r1, r0
 80003ae:	f04f 0000 	mov.w	r0, #0
 80003b2:	e01c      	b.n	80003ee <__aeabi_l2f+0x2a>

080003b4 <__aeabi_ul2f>:
 80003b4:	ea50 0201 	orrs.w	r2, r0, r1
 80003b8:	bf08      	it	eq
 80003ba:	4770      	bxeq	lr
 80003bc:	f04f 0300 	mov.w	r3, #0
 80003c0:	e00a      	b.n	80003d8 <__aeabi_l2f+0x14>
 80003c2:	bf00      	nop

080003c4 <__aeabi_l2f>:
 80003c4:	ea50 0201 	orrs.w	r2, r0, r1
 80003c8:	bf08      	it	eq
 80003ca:	4770      	bxeq	lr
 80003cc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003d0:	d502      	bpl.n	80003d8 <__aeabi_l2f+0x14>
 80003d2:	4240      	negs	r0, r0
 80003d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003d8:	ea5f 0c01 	movs.w	ip, r1
 80003dc:	bf02      	ittt	eq
 80003de:	4684      	moveq	ip, r0
 80003e0:	4601      	moveq	r1, r0
 80003e2:	2000      	moveq	r0, #0
 80003e4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003e8:	bf08      	it	eq
 80003ea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003ee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003f2:	fabc f28c 	clz	r2, ip
 80003f6:	3a08      	subs	r2, #8
 80003f8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003fc:	db10      	blt.n	8000420 <__aeabi_l2f+0x5c>
 80003fe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000402:	4463      	add	r3, ip
 8000404:	fa00 fc02 	lsl.w	ip, r0, r2
 8000408:	f1c2 0220 	rsb	r2, r2, #32
 800040c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000410:	fa20 f202 	lsr.w	r2, r0, r2
 8000414:	eb43 0002 	adc.w	r0, r3, r2
 8000418:	bf08      	it	eq
 800041a:	f020 0001 	biceq.w	r0, r0, #1
 800041e:	4770      	bx	lr
 8000420:	f102 0220 	add.w	r2, r2, #32
 8000424:	fa01 fc02 	lsl.w	ip, r1, r2
 8000428:	f1c2 0220 	rsb	r2, r2, #32
 800042c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000430:	fa21 f202 	lsr.w	r2, r1, r2
 8000434:	eb43 0002 	adc.w	r0, r3, r2
 8000438:	bf08      	it	eq
 800043a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043e:	4770      	bx	lr

08000440 <__aeabi_fmul>:
 8000440:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000444:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000448:	bf1e      	ittt	ne
 800044a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800044e:	ea92 0f0c 	teqne	r2, ip
 8000452:	ea93 0f0c 	teqne	r3, ip
 8000456:	d06f      	beq.n	8000538 <__aeabi_fmul+0xf8>
 8000458:	441a      	add	r2, r3
 800045a:	ea80 0c01 	eor.w	ip, r0, r1
 800045e:	0240      	lsls	r0, r0, #9
 8000460:	bf18      	it	ne
 8000462:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000466:	d01e      	beq.n	80004a6 <__aeabi_fmul+0x66>
 8000468:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800046c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000470:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000474:	fba0 3101 	umull	r3, r1, r0, r1
 8000478:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800047c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000480:	bf3e      	ittt	cc
 8000482:	0049      	lslcc	r1, r1, #1
 8000484:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000488:	005b      	lslcc	r3, r3, #1
 800048a:	ea40 0001 	orr.w	r0, r0, r1
 800048e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000492:	2afd      	cmp	r2, #253	; 0xfd
 8000494:	d81d      	bhi.n	80004d2 <__aeabi_fmul+0x92>
 8000496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800049a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800049e:	bf08      	it	eq
 80004a0:	f020 0001 	biceq.w	r0, r0, #1
 80004a4:	4770      	bx	lr
 80004a6:	f090 0f00 	teq	r0, #0
 80004aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004ae:	bf08      	it	eq
 80004b0:	0249      	lsleq	r1, r1, #9
 80004b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004ba:	3a7f      	subs	r2, #127	; 0x7f
 80004bc:	bfc2      	ittt	gt
 80004be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004c6:	4770      	bxgt	lr
 80004c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004cc:	f04f 0300 	mov.w	r3, #0
 80004d0:	3a01      	subs	r2, #1
 80004d2:	dc5d      	bgt.n	8000590 <__aeabi_fmul+0x150>
 80004d4:	f112 0f19 	cmn.w	r2, #25
 80004d8:	bfdc      	itt	le
 80004da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004de:	4770      	bxle	lr
 80004e0:	f1c2 0200 	rsb	r2, r2, #0
 80004e4:	0041      	lsls	r1, r0, #1
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	f1c2 0220 	rsb	r2, r2, #32
 80004ee:	fa00 fc02 	lsl.w	ip, r0, r2
 80004f2:	ea5f 0031 	movs.w	r0, r1, rrx
 80004f6:	f140 0000 	adc.w	r0, r0, #0
 80004fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004fe:	bf08      	it	eq
 8000500:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000504:	4770      	bx	lr
 8000506:	f092 0f00 	teq	r2, #0
 800050a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800050e:	bf02      	ittt	eq
 8000510:	0040      	lsleq	r0, r0, #1
 8000512:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000516:	3a01      	subeq	r2, #1
 8000518:	d0f9      	beq.n	800050e <__aeabi_fmul+0xce>
 800051a:	ea40 000c 	orr.w	r0, r0, ip
 800051e:	f093 0f00 	teq	r3, #0
 8000522:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000526:	bf02      	ittt	eq
 8000528:	0049      	lsleq	r1, r1, #1
 800052a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800052e:	3b01      	subeq	r3, #1
 8000530:	d0f9      	beq.n	8000526 <__aeabi_fmul+0xe6>
 8000532:	ea41 010c 	orr.w	r1, r1, ip
 8000536:	e78f      	b.n	8000458 <__aeabi_fmul+0x18>
 8000538:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800053c:	ea92 0f0c 	teq	r2, ip
 8000540:	bf18      	it	ne
 8000542:	ea93 0f0c 	teqne	r3, ip
 8000546:	d00a      	beq.n	800055e <__aeabi_fmul+0x11e>
 8000548:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800054c:	bf18      	it	ne
 800054e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000552:	d1d8      	bne.n	8000506 <__aeabi_fmul+0xc6>
 8000554:	ea80 0001 	eor.w	r0, r0, r1
 8000558:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800055c:	4770      	bx	lr
 800055e:	f090 0f00 	teq	r0, #0
 8000562:	bf17      	itett	ne
 8000564:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000568:	4608      	moveq	r0, r1
 800056a:	f091 0f00 	teqne	r1, #0
 800056e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000572:	d014      	beq.n	800059e <__aeabi_fmul+0x15e>
 8000574:	ea92 0f0c 	teq	r2, ip
 8000578:	d101      	bne.n	800057e <__aeabi_fmul+0x13e>
 800057a:	0242      	lsls	r2, r0, #9
 800057c:	d10f      	bne.n	800059e <__aeabi_fmul+0x15e>
 800057e:	ea93 0f0c 	teq	r3, ip
 8000582:	d103      	bne.n	800058c <__aeabi_fmul+0x14c>
 8000584:	024b      	lsls	r3, r1, #9
 8000586:	bf18      	it	ne
 8000588:	4608      	movne	r0, r1
 800058a:	d108      	bne.n	800059e <__aeabi_fmul+0x15e>
 800058c:	ea80 0001 	eor.w	r0, r0, r1
 8000590:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000594:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000598:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800059c:	4770      	bx	lr
 800059e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005a6:	4770      	bx	lr

080005a8 <__aeabi_fdiv>:
 80005a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005b0:	bf1e      	ittt	ne
 80005b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005b6:	ea92 0f0c 	teqne	r2, ip
 80005ba:	ea93 0f0c 	teqne	r3, ip
 80005be:	d069      	beq.n	8000694 <__aeabi_fdiv+0xec>
 80005c0:	eba2 0203 	sub.w	r2, r2, r3
 80005c4:	ea80 0c01 	eor.w	ip, r0, r1
 80005c8:	0249      	lsls	r1, r1, #9
 80005ca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005ce:	d037      	beq.n	8000640 <__aeabi_fdiv+0x98>
 80005d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005d4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005d8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005e0:	428b      	cmp	r3, r1
 80005e2:	bf38      	it	cc
 80005e4:	005b      	lslcc	r3, r3, #1
 80005e6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005ea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005ee:	428b      	cmp	r3, r1
 80005f0:	bf24      	itt	cs
 80005f2:	1a5b      	subcs	r3, r3, r1
 80005f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80005f8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005fc:	bf24      	itt	cs
 80005fe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000602:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000606:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800060a:	bf24      	itt	cs
 800060c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000610:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000614:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000618:	bf24      	itt	cs
 800061a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800061e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000622:	011b      	lsls	r3, r3, #4
 8000624:	bf18      	it	ne
 8000626:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800062a:	d1e0      	bne.n	80005ee <__aeabi_fdiv+0x46>
 800062c:	2afd      	cmp	r2, #253	; 0xfd
 800062e:	f63f af50 	bhi.w	80004d2 <__aeabi_fmul+0x92>
 8000632:	428b      	cmp	r3, r1
 8000634:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000638:	bf08      	it	eq
 800063a:	f020 0001 	biceq.w	r0, r0, #1
 800063e:	4770      	bx	lr
 8000640:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000644:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000648:	327f      	adds	r2, #127	; 0x7f
 800064a:	bfc2      	ittt	gt
 800064c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000650:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000654:	4770      	bxgt	lr
 8000656:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800065a:	f04f 0300 	mov.w	r3, #0
 800065e:	3a01      	subs	r2, #1
 8000660:	e737      	b.n	80004d2 <__aeabi_fmul+0x92>
 8000662:	f092 0f00 	teq	r2, #0
 8000666:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800066a:	bf02      	ittt	eq
 800066c:	0040      	lsleq	r0, r0, #1
 800066e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000672:	3a01      	subeq	r2, #1
 8000674:	d0f9      	beq.n	800066a <__aeabi_fdiv+0xc2>
 8000676:	ea40 000c 	orr.w	r0, r0, ip
 800067a:	f093 0f00 	teq	r3, #0
 800067e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000682:	bf02      	ittt	eq
 8000684:	0049      	lsleq	r1, r1, #1
 8000686:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800068a:	3b01      	subeq	r3, #1
 800068c:	d0f9      	beq.n	8000682 <__aeabi_fdiv+0xda>
 800068e:	ea41 010c 	orr.w	r1, r1, ip
 8000692:	e795      	b.n	80005c0 <__aeabi_fdiv+0x18>
 8000694:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000698:	ea92 0f0c 	teq	r2, ip
 800069c:	d108      	bne.n	80006b0 <__aeabi_fdiv+0x108>
 800069e:	0242      	lsls	r2, r0, #9
 80006a0:	f47f af7d 	bne.w	800059e <__aeabi_fmul+0x15e>
 80006a4:	ea93 0f0c 	teq	r3, ip
 80006a8:	f47f af70 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006ac:	4608      	mov	r0, r1
 80006ae:	e776      	b.n	800059e <__aeabi_fmul+0x15e>
 80006b0:	ea93 0f0c 	teq	r3, ip
 80006b4:	d104      	bne.n	80006c0 <__aeabi_fdiv+0x118>
 80006b6:	024b      	lsls	r3, r1, #9
 80006b8:	f43f af4c 	beq.w	8000554 <__aeabi_fmul+0x114>
 80006bc:	4608      	mov	r0, r1
 80006be:	e76e      	b.n	800059e <__aeabi_fmul+0x15e>
 80006c0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006c4:	bf18      	it	ne
 80006c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006ca:	d1ca      	bne.n	8000662 <__aeabi_fdiv+0xba>
 80006cc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006d0:	f47f af5c 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006d4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006d8:	f47f af3c 	bne.w	8000554 <__aeabi_fmul+0x114>
 80006dc:	e75f      	b.n	800059e <__aeabi_fmul+0x15e>
 80006de:	bf00      	nop

080006e0 <__gesf2>:
 80006e0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80006e4:	e006      	b.n	80006f4 <__cmpsf2+0x4>
 80006e6:	bf00      	nop

080006e8 <__lesf2>:
 80006e8:	f04f 0c01 	mov.w	ip, #1
 80006ec:	e002      	b.n	80006f4 <__cmpsf2+0x4>
 80006ee:	bf00      	nop

080006f0 <__cmpsf2>:
 80006f0:	f04f 0c01 	mov.w	ip, #1
 80006f4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80006f8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006fc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000700:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000704:	bf18      	it	ne
 8000706:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800070a:	d011      	beq.n	8000730 <__cmpsf2+0x40>
 800070c:	b001      	add	sp, #4
 800070e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000712:	bf18      	it	ne
 8000714:	ea90 0f01 	teqne	r0, r1
 8000718:	bf58      	it	pl
 800071a:	ebb2 0003 	subspl.w	r0, r2, r3
 800071e:	bf88      	it	hi
 8000720:	17c8      	asrhi	r0, r1, #31
 8000722:	bf38      	it	cc
 8000724:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000728:	bf18      	it	ne
 800072a:	f040 0001 	orrne.w	r0, r0, #1
 800072e:	4770      	bx	lr
 8000730:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000734:	d102      	bne.n	800073c <__cmpsf2+0x4c>
 8000736:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800073a:	d105      	bne.n	8000748 <__cmpsf2+0x58>
 800073c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000740:	d1e4      	bne.n	800070c <__cmpsf2+0x1c>
 8000742:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000746:	d0e1      	beq.n	800070c <__cmpsf2+0x1c>
 8000748:	f85d 0b04 	ldr.w	r0, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop

08000750 <__aeabi_cfrcmple>:
 8000750:	4684      	mov	ip, r0
 8000752:	4608      	mov	r0, r1
 8000754:	4661      	mov	r1, ip
 8000756:	e7ff      	b.n	8000758 <__aeabi_cfcmpeq>

08000758 <__aeabi_cfcmpeq>:
 8000758:	b50f      	push	{r0, r1, r2, r3, lr}
 800075a:	f7ff ffc9 	bl	80006f0 <__cmpsf2>
 800075e:	2800      	cmp	r0, #0
 8000760:	bf48      	it	mi
 8000762:	f110 0f00 	cmnmi.w	r0, #0
 8000766:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000768 <__aeabi_fcmpeq>:
 8000768:	f84d ed08 	str.w	lr, [sp, #-8]!
 800076c:	f7ff fff4 	bl	8000758 <__aeabi_cfcmpeq>
 8000770:	bf0c      	ite	eq
 8000772:	2001      	moveq	r0, #1
 8000774:	2000      	movne	r0, #0
 8000776:	f85d fb08 	ldr.w	pc, [sp], #8
 800077a:	bf00      	nop

0800077c <__aeabi_fcmplt>:
 800077c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000780:	f7ff ffea 	bl	8000758 <__aeabi_cfcmpeq>
 8000784:	bf34      	ite	cc
 8000786:	2001      	movcc	r0, #1
 8000788:	2000      	movcs	r0, #0
 800078a:	f85d fb08 	ldr.w	pc, [sp], #8
 800078e:	bf00      	nop

08000790 <__aeabi_fcmple>:
 8000790:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000794:	f7ff ffe0 	bl	8000758 <__aeabi_cfcmpeq>
 8000798:	bf94      	ite	ls
 800079a:	2001      	movls	r0, #1
 800079c:	2000      	movhi	r0, #0
 800079e:	f85d fb08 	ldr.w	pc, [sp], #8
 80007a2:	bf00      	nop

080007a4 <__aeabi_fcmpge>:
 80007a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007a8:	f7ff ffd2 	bl	8000750 <__aeabi_cfrcmple>
 80007ac:	bf94      	ite	ls
 80007ae:	2001      	movls	r0, #1
 80007b0:	2000      	movhi	r0, #0
 80007b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80007b6:	bf00      	nop

080007b8 <__aeabi_fcmpgt>:
 80007b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007bc:	f7ff ffc8 	bl	8000750 <__aeabi_cfrcmple>
 80007c0:	bf34      	ite	cc
 80007c2:	2001      	movcc	r0, #1
 80007c4:	2000      	movcs	r0, #0
 80007c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ca:	bf00      	nop

080007cc <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	e002      	b.n	80007dc <Delay+0x10>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	3b01      	subs	r3, #1
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d1f9      	bne.n	80007d6 <Delay+0xa>
 80007e2:	bf00      	nop
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr

080007ee <LCD_INIT>:

void LCD_INIT ( void )
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 80007f4:	2001      	movs	r0, #1
 80007f6:	f000 f829 	bl	800084c <LCD_BackLed_Control>
	LCD_Rst();
 80007fa:	f000 f80f 	bl	800081c <LCD_Rst>
	LCD_REG_Config();
 80007fe:	f000 f85f 	bl	80008c0 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000802:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800080c:	22f0      	movs	r2, #240	; 0xf0
 800080e:	2100      	movs	r1, #0
 8000810:	2000      	movs	r0, #0
 8000812:	f000 f9e6 	bl	8000be2 <LCD_Clear>
}
 8000816:	bf00      	nop
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <LCD_Rst>:



void LCD_Rst ( void )
{			
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000820:	2200      	movs	r2, #0
 8000822:	2102      	movs	r1, #2
 8000824:	4807      	ldr	r0, [pc, #28]	; (8000844 <LCD_Rst+0x28>)
 8000826:	f001 f9cb 	bl	8001bc0 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 800082a:	4807      	ldr	r0, [pc, #28]	; (8000848 <LCD_Rst+0x2c>)
 800082c:	f7ff ffce 	bl	80007cc <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	2102      	movs	r1, #2
 8000834:	4803      	ldr	r0, [pc, #12]	; (8000844 <LCD_Rst+0x28>)
 8000836:	f001 f9c3 	bl	8001bc0 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 800083a:	4803      	ldr	r0, [pc, #12]	; (8000848 <LCD_Rst+0x2c>)
 800083c:	f7ff ffc6 	bl	80007cc <Delay>
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40011800 	.word	0x40011800
 8000848:	0002bffc 	.word	0x0002bffc

0800084c <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d006      	beq.n	800086a <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 800085c:	2200      	movs	r2, #0
 800085e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000862:	4807      	ldr	r0, [pc, #28]	; (8000880 <LCD_BackLed_Control+0x34>)
 8000864:	f001 f9ac 	bl	8001bc0 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000868:	e005      	b.n	8000876 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 800086a:	2201      	movs	r2, #1
 800086c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000870:	4803      	ldr	r0, [pc, #12]	; (8000880 <LCD_BackLed_Control+0x34>)
 8000872:	f001 f9a5 	bl	8001bc0 <HAL_GPIO_WritePin>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40011400 	.word	0x40011400

08000884 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800088e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000892:	88fb      	ldrh	r3, [r7, #6]
 8000894:	8013      	strh	r3, [r2, #0]
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr

080008a0 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80008aa:	4a04      	ldr	r2, [pc, #16]	; (80008bc <LCD_Write_Data+0x1c>)
 80008ac:	88fb      	ldrh	r3, [r7, #6]
 80008ae:	8013      	strh	r3, [r2, #0]
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	60020000 	.word	0x60020000

080008c0 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 80008c4:	20cf      	movs	r0, #207	; 0xcf
 80008c6:	f7ff ffdd 	bl	8000884 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 80008ca:	2000      	movs	r0, #0
 80008cc:	f7ff ffe8 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 80008d0:	2081      	movs	r0, #129	; 0x81
 80008d2:	f7ff ffe5 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 80008d6:	2030      	movs	r0, #48	; 0x30
 80008d8:	f7ff ffe2 	bl	80008a0 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 80008dc:	20ed      	movs	r0, #237	; 0xed
 80008de:	f7ff ffd1 	bl	8000884 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 80008e2:	2064      	movs	r0, #100	; 0x64
 80008e4:	f7ff ffdc 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80008e8:	2003      	movs	r0, #3
 80008ea:	f7ff ffd9 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 80008ee:	2012      	movs	r0, #18
 80008f0:	f7ff ffd6 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 80008f4:	2081      	movs	r0, #129	; 0x81
 80008f6:	f7ff ffd3 	bl	80008a0 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 80008fa:	20e8      	movs	r0, #232	; 0xe8
 80008fc:	f7ff ffc2 	bl	8000884 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000900:	2085      	movs	r0, #133	; 0x85
 8000902:	f7ff ffcd 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000906:	2010      	movs	r0, #16
 8000908:	f7ff ffca 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 800090c:	2078      	movs	r0, #120	; 0x78
 800090e:	f7ff ffc7 	bl	80008a0 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8000912:	20cb      	movs	r0, #203	; 0xcb
 8000914:	f7ff ffb6 	bl	8000884 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000918:	2039      	movs	r0, #57	; 0x39
 800091a:	f7ff ffc1 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 800091e:	202c      	movs	r0, #44	; 0x2c
 8000920:	f7ff ffbe 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000924:	2000      	movs	r0, #0
 8000926:	f7ff ffbb 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 800092a:	2034      	movs	r0, #52	; 0x34
 800092c:	f7ff ffb8 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000930:	2002      	movs	r0, #2
 8000932:	f7ff ffb5 	bl	80008a0 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8000936:	20f7      	movs	r0, #247	; 0xf7
 8000938:	f7ff ffa4 	bl	8000884 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 800093c:	2020      	movs	r0, #32
 800093e:	f7ff ffaf 	bl	80008a0 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8000942:	20ea      	movs	r0, #234	; 0xea
 8000944:	f7ff ff9e 	bl	8000884 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000948:	2000      	movs	r0, #0
 800094a:	f7ff ffa9 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800094e:	2000      	movs	r0, #0
 8000950:	f7ff ffa6 	bl	80008a0 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8000954:	20b1      	movs	r0, #177	; 0xb1
 8000956:	f7ff ff95 	bl	8000884 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800095a:	2000      	movs	r0, #0
 800095c:	f7ff ffa0 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000960:	201b      	movs	r0, #27
 8000962:	f7ff ff9d 	bl	80008a0 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8000966:	20b6      	movs	r0, #182	; 0xb6
 8000968:	f7ff ff8c 	bl	8000884 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 800096c:	200a      	movs	r0, #10
 800096e:	f7ff ff97 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8000972:	20a2      	movs	r0, #162	; 0xa2
 8000974:	f7ff ff94 	bl	80008a0 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8000978:	20c0      	movs	r0, #192	; 0xc0
 800097a:	f7ff ff83 	bl	8000884 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 800097e:	2035      	movs	r0, #53	; 0x35
 8000980:	f7ff ff8e 	bl	80008a0 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8000984:	20c1      	movs	r0, #193	; 0xc1
 8000986:	f7ff ff7d 	bl	8000884 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 800098a:	2011      	movs	r0, #17
 800098c:	f7ff ff88 	bl	80008a0 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8000990:	20c5      	movs	r0, #197	; 0xc5
 8000992:	f7ff ff77 	bl	8000884 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8000996:	2045      	movs	r0, #69	; 0x45
 8000998:	f7ff ff82 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 800099c:	2045      	movs	r0, #69	; 0x45
 800099e:	f7ff ff7f 	bl	80008a0 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 80009a2:	20c7      	movs	r0, #199	; 0xc7
 80009a4:	f7ff ff6e 	bl	8000884 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 80009a8:	20a2      	movs	r0, #162	; 0xa2
 80009aa:	f7ff ff79 	bl	80008a0 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 80009ae:	20f2      	movs	r0, #242	; 0xf2
 80009b0:	f7ff ff68 	bl	8000884 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80009b4:	2000      	movs	r0, #0
 80009b6:	f7ff ff73 	bl	80008a0 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 80009ba:	2026      	movs	r0, #38	; 0x26
 80009bc:	f7ff ff62 	bl	8000884 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 80009c0:	2001      	movs	r0, #1
 80009c2:	f7ff ff6d 	bl	80008a0 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 80009c6:	20e0      	movs	r0, #224	; 0xe0
 80009c8:	f7ff ff5c 	bl	8000884 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 80009cc:	200f      	movs	r0, #15
 80009ce:	f7ff ff67 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 80009d2:	2026      	movs	r0, #38	; 0x26
 80009d4:	f7ff ff64 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 80009d8:	2024      	movs	r0, #36	; 0x24
 80009da:	f7ff ff61 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 80009de:	200b      	movs	r0, #11
 80009e0:	f7ff ff5e 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 80009e4:	200e      	movs	r0, #14
 80009e6:	f7ff ff5b 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80009ea:	2009      	movs	r0, #9
 80009ec:	f7ff ff58 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 80009f0:	2054      	movs	r0, #84	; 0x54
 80009f2:	f7ff ff55 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 80009f6:	20a8      	movs	r0, #168	; 0xa8
 80009f8:	f7ff ff52 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 80009fc:	2046      	movs	r0, #70	; 0x46
 80009fe:	f7ff ff4f 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8000a02:	200c      	movs	r0, #12
 8000a04:	f7ff ff4c 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000a08:	2017      	movs	r0, #23
 8000a0a:	f7ff ff49 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000a0e:	2009      	movs	r0, #9
 8000a10:	f7ff ff46 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000a14:	200f      	movs	r0, #15
 8000a16:	f7ff ff43 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000a1a:	2007      	movs	r0, #7
 8000a1c:	f7ff ff40 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000a20:	2000      	movs	r0, #0
 8000a22:	f7ff ff3d 	bl	80008a0 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8000a26:	20e1      	movs	r0, #225	; 0xe1
 8000a28:	f7ff ff2c 	bl	8000884 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f7ff ff37 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8000a32:	2019      	movs	r0, #25
 8000a34:	f7ff ff34 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000a38:	201b      	movs	r0, #27
 8000a3a:	f7ff ff31 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000a3e:	2004      	movs	r0, #4
 8000a40:	f7ff ff2e 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000a44:	2010      	movs	r0, #16
 8000a46:	f7ff ff2b 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000a4a:	2007      	movs	r0, #7
 8000a4c:	f7ff ff28 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8000a50:	202a      	movs	r0, #42	; 0x2a
 8000a52:	f7ff ff25 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8000a56:	2047      	movs	r0, #71	; 0x47
 8000a58:	f7ff ff22 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8000a5c:	2039      	movs	r0, #57	; 0x39
 8000a5e:	f7ff ff1f 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000a62:	2003      	movs	r0, #3
 8000a64:	f7ff ff1c 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000a68:	2006      	movs	r0, #6
 8000a6a:	f7ff ff19 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000a6e:	2006      	movs	r0, #6
 8000a70:	f7ff ff16 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8000a74:	2030      	movs	r0, #48	; 0x30
 8000a76:	f7ff ff13 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8000a7a:	2038      	movs	r0, #56	; 0x38
 8000a7c:	f7ff ff10 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000a80:	200f      	movs	r0, #15
 8000a82:	f7ff ff0d 	bl	80008a0 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8000a86:	2036      	movs	r0, #54	; 0x36
 8000a88:	f7ff fefc 	bl	8000884 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 8000a8c:	20c8      	movs	r0, #200	; 0xc8
 8000a8e:	f7ff ff07 	bl	80008a0 <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8000a92:	202a      	movs	r0, #42	; 0x2a
 8000a94:	f7ff fef6 	bl	8000884 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f7ff ff01 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff fefe 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f7ff fefb 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000aaa:	20ef      	movs	r0, #239	; 0xef
 8000aac:	f7ff fef8 	bl	80008a0 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000ab0:	202b      	movs	r0, #43	; 0x2b
 8000ab2:	f7ff fee7 	bl	8000884 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f7ff fef2 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000abc:	2000      	movs	r0, #0
 8000abe:	f7ff feef 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	f7ff feec 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000ac8:	203f      	movs	r0, #63	; 0x3f
 8000aca:	f7ff fee9 	bl	80008a0 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000ace:	203a      	movs	r0, #58	; 0x3a
 8000ad0:	f7ff fed8 	bl	8000884 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8000ad4:	2055      	movs	r0, #85	; 0x55
 8000ad6:	f7ff fee3 	bl	80008a0 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000ada:	2011      	movs	r0, #17
 8000adc:	f7ff fed2 	bl	8000884 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000ae0:	4803      	ldr	r0, [pc, #12]	; (8000af0 <LCD_REG_Config+0x230>)
 8000ae2:	f7ff fe73 	bl	80007cc <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8000ae6:	2029      	movs	r0, #41	; 0x29
 8000ae8:	f7ff fecc 	bl	8000884 <LCD_Write_Cmd>
	
	
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	0002bffc 	.word	0x0002bffc

08000af4 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8000af4:	b590      	push	{r4, r7, lr}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4604      	mov	r4, r0
 8000afc:	4608      	mov	r0, r1
 8000afe:	4611      	mov	r1, r2
 8000b00:	461a      	mov	r2, r3
 8000b02:	4623      	mov	r3, r4
 8000b04:	80fb      	strh	r3, [r7, #6]
 8000b06:	4603      	mov	r3, r0
 8000b08:	80bb      	strh	r3, [r7, #4]
 8000b0a:	460b      	mov	r3, r1
 8000b0c:	807b      	strh	r3, [r7, #2]
 8000b0e:	4613      	mov	r3, r2
 8000b10:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8000b12:	202a      	movs	r0, #42	; 0x2a
 8000b14:	f7ff feb6 	bl	8000884 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );
 8000b18:	88fb      	ldrh	r3, [r7, #6]
 8000b1a:	0a1b      	lsrs	r3, r3, #8
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff febe 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );
 8000b24:	88fb      	ldrh	r3, [r7, #6]
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff feb8 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000b30:	88fa      	ldrh	r2, [r7, #6]
 8000b32:	887b      	ldrh	r3, [r7, #2]
 8000b34:	4413      	add	r3, r2
 8000b36:	3b01      	subs	r3, #1
 8000b38:	121b      	asrs	r3, r3, #8
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff feaf 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000b42:	88fa      	ldrh	r2, [r7, #6]
 8000b44:	887b      	ldrh	r3, [r7, #2]
 8000b46:	4413      	add	r3, r2
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff fea4 	bl	80008a0 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8000b58:	202b      	movs	r0, #43	; 0x2b
 8000b5a:	f7ff fe93 	bl	8000884 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8000b5e:	88bb      	ldrh	r3, [r7, #4]
 8000b60:	0a1b      	lsrs	r3, r3, #8
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fe9b 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8000b6a:	88bb      	ldrh	r3, [r7, #4]
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fe95 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000b76:	88ba      	ldrh	r2, [r7, #4]
 8000b78:	883b      	ldrh	r3, [r7, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	121b      	asrs	r3, r3, #8
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fe8c 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000b88:	88ba      	ldrh	r2, [r7, #4]
 8000b8a:	883b      	ldrh	r3, [r7, #0]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	3b01      	subs	r3, #1
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fe81 	bl	80008a0 <LCD_Write_Data>
	
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd90      	pop	{r4, r7, pc}

08000ba6 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b084      	sub	sp, #16
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	460b      	mov	r3, r1
 8000bb0:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000bb6:	202c      	movs	r0, #44	; 0x2c
 8000bb8:	f7ff fe64 	bl	8000884 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	e006      	b.n	8000bd0 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8000bc2:	887b      	ldrh	r3, [r7, #2]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fe6b 	bl	80008a0 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d3f4      	bcc.n	8000bc2 <LCD_FillColor+0x1c>
		
}
 8000bd8:	bf00      	nop
 8000bda:	bf00      	nop
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8000be2:	b590      	push	{r4, r7, lr}
 8000be4:	b083      	sub	sp, #12
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	4604      	mov	r4, r0
 8000bea:	4608      	mov	r0, r1
 8000bec:	4611      	mov	r1, r2
 8000bee:	461a      	mov	r2, r3
 8000bf0:	4623      	mov	r3, r4
 8000bf2:	80fb      	strh	r3, [r7, #6]
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	80bb      	strh	r3, [r7, #4]
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	807b      	strh	r3, [r7, #2]
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000c00:	883b      	ldrh	r3, [r7, #0]
 8000c02:	887a      	ldrh	r2, [r7, #2]
 8000c04:	88b9      	ldrh	r1, [r7, #4]
 8000c06:	88f8      	ldrh	r0, [r7, #6]
 8000c08:	f7ff ff74 	bl	8000af4 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000c0c:	887b      	ldrh	r3, [r7, #2]
 8000c0e:	883a      	ldrh	r2, [r7, #0]
 8000c10:	fb02 f303 	mul.w	r3, r2, r3
 8000c14:	461a      	mov	r2, r3
 8000c16:	8b3b      	ldrh	r3, [r7, #24]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4610      	mov	r0, r2
 8000c1c:	f7ff ffc3 	bl	8000ba6 <LCD_FillColor>
	
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd90      	pop	{r4, r7, pc}

08000c28 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	80fb      	strh	r3, [r7, #6]
 8000c32:	460b      	mov	r3, r1
 8000c34:	80bb      	strh	r3, [r7, #4]
 8000c36:	4613      	mov	r3, r2
 8000c38:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8000c3a:	78fb      	ldrb	r3, [r7, #3]
 8000c3c:	3b20      	subs	r3, #32
 8000c3e:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000c40:	88b9      	ldrh	r1, [r7, #4]
 8000c42:	88f8      	ldrh	r0, [r7, #6]
 8000c44:	2310      	movs	r3, #16
 8000c46:	2208      	movs	r2, #8
 8000c48:	f7ff ff54 	bl	8000af4 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000c4c:	202c      	movs	r0, #44	; 0x2c
 8000c4e:	f7ff fe19 	bl	8000884 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000c52:	2300      	movs	r3, #0
 8000c54:	73bb      	strb	r3, [r7, #14]
 8000c56:	e023      	b.n	8000ca0 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8000c58:	7b3a      	ldrb	r2, [r7, #12]
 8000c5a:	7bbb      	ldrb	r3, [r7, #14]
 8000c5c:	4914      	ldr	r1, [pc, #80]	; (8000cb0 <LCD_DrawChar+0x88>)
 8000c5e:	0112      	lsls	r2, r2, #4
 8000c60:	440a      	add	r2, r1
 8000c62:	4413      	add	r3, r2
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000c68:	2300      	movs	r3, #0
 8000c6a:	737b      	strb	r3, [r7, #13]
 8000c6c:	e012      	b.n	8000c94 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d003      	beq.n	8000c80 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 8000c78:	201f      	movs	r0, #31
 8000c7a:	f7ff fe11 	bl	80008a0 <LCD_Write_Data>
 8000c7e:	e003      	b.n	8000c88 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8000c80:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000c84:	f7ff fe0c 	bl	80008a0 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8000c88:	7bfb      	ldrb	r3, [r7, #15]
 8000c8a:	085b      	lsrs	r3, r3, #1
 8000c8c:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000c8e:	7b7b      	ldrb	r3, [r7, #13]
 8000c90:	3301      	adds	r3, #1
 8000c92:	737b      	strb	r3, [r7, #13]
 8000c94:	7b7b      	ldrb	r3, [r7, #13]
 8000c96:	2b07      	cmp	r3, #7
 8000c98:	d9e9      	bls.n	8000c6e <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000c9a:	7bbb      	ldrb	r3, [r7, #14]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	73bb      	strb	r3, [r7, #14]
 8000ca0:	7bbb      	ldrb	r3, [r7, #14]
 8000ca2:	2b0f      	cmp	r3, #15
 8000ca4:	d9d8      	bls.n	8000c58 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 8000ca6:	bf00      	nop
 8000ca8:	bf00      	nop
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	08002730 	.word	0x08002730

08000cb4 <LCD_DrawDot>:
}


//Task 2
void LCD_DrawDot(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usColor)	
{	
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	80fb      	strh	r3, [r7, #6]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	80bb      	strh	r3, [r7, #4]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	807b      	strh	r3, [r7, #2]
	 */

	/* define area of frame memory */

	//Column address set
	LCD_Write_Cmd ( 0x2A );
 8000cc6:	202a      	movs	r0, #42	; 0x2a
 8000cc8:	f7ff fddc 	bl	8000884 <LCD_Write_Cmd>
	LCD_Write_Data ( 0 );
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f7ff fde7 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN );
 8000cd2:	88fb      	ldrh	r3, [r7, #6]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fde3 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( 0 );
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f7ff fde0 	bl	80008a0 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN );
 8000ce0:	88fb      	ldrh	r3, [r7, #6]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fddc 	bl	80008a0 <LCD_Write_Data>

	//Page address set
	LCD_Write_Cmd ( 0x2B );
 8000ce8:	202b      	movs	r0, #43	; 0x2b
 8000cea:	f7ff fdcb 	bl	8000884 <LCD_Write_Cmd>
	//check if usPAGE needs more than 8 bits
	if(usPAGE<255)
 8000cee:	88bb      	ldrh	r3, [r7, #4]
 8000cf0:	2bfe      	cmp	r3, #254	; 0xfe
 8000cf2:	d803      	bhi.n	8000cfc <LCD_DrawDot+0x48>
	{
		LCD_Write_Data ( 0  );
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f7ff fdd3 	bl	80008a0 <LCD_Write_Data>
 8000cfa:	e002      	b.n	8000d02 <LCD_DrawDot+0x4e>
	}
	else
	{
		LCD_Write_Data ( 1  );
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f7ff fdcf 	bl	80008a0 <LCD_Write_Data>
	}
	LCD_Write_Data ( usPAGE & 0x00ff   );
 8000d02:	88bb      	ldrh	r3, [r7, #4]
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fdc9 	bl	80008a0 <LCD_Write_Data>
	if(usPAGE<255)
 8000d0e:	88bb      	ldrh	r3, [r7, #4]
 8000d10:	2bfe      	cmp	r3, #254	; 0xfe
 8000d12:	d803      	bhi.n	8000d1c <LCD_DrawDot+0x68>
	{
		LCD_Write_Data ( 0  );
 8000d14:	2000      	movs	r0, #0
 8000d16:	f7ff fdc3 	bl	80008a0 <LCD_Write_Data>
 8000d1a:	e002      	b.n	8000d22 <LCD_DrawDot+0x6e>
	}
	else
	{
		LCD_Write_Data ( 1  );
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	f7ff fdbf 	bl	80008a0 <LCD_Write_Data>
	}
	LCD_Write_Data ( usPAGE & 0x00ff   );
 8000d22:	88bb      	ldrh	r3, [r7, #4]
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fdb9 	bl	80008a0 <LCD_Write_Data>

	/* Write to frame memory */

	// memory write
	LCD_Write_Cmd (0x2C);
 8000d2e:	202c      	movs	r0, #44	; 0x2c
 8000d30:	f7ff fda8 	bl	8000884 <LCD_Write_Cmd>
	LCD_Write_Data ( usColor);
 8000d34:	887b      	ldrh	r3, [r7, #2]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fdb2 	bl	80008a0 <LCD_Write_Data>
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <check>:

//Task 3 Helper
int check(int x, int y, int h, int k, int a, int b)
{
 8000d44:	b5b0      	push	{r4, r5, r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
 8000d50:	603b      	str	r3, [r7, #0]
    float equation = ((float)(x-h)*(x-h))/(a*a) + (float)((y-k)*(y-k))/(b*b);
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fb1d 	bl	8000398 <__aeabi_i2f>
 8000d5e:	4604      	mov	r4, r0
 8000d60:	68fa      	ldr	r2, [r7, #12]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fb16 	bl	8000398 <__aeabi_i2f>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4620      	mov	r0, r4
 8000d72:	f7ff fb65 	bl	8000440 <__aeabi_fmul>
 8000d76:	4603      	mov	r3, r0
 8000d78:	461c      	mov	r4, r3
 8000d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d7c:	fb03 f303 	mul.w	r3, r3, r3
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fb09 	bl	8000398 <__aeabi_i2f>
 8000d86:	4603      	mov	r3, r0
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4620      	mov	r0, r4
 8000d8c:	f7ff fc0c 	bl	80005a8 <__aeabi_fdiv>
 8000d90:	4603      	mov	r3, r0
 8000d92:	461d      	mov	r5, r3
 8000d94:	68ba      	ldr	r2, [r7, #8]
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	68b9      	ldr	r1, [r7, #8]
 8000d9c:	683a      	ldr	r2, [r7, #0]
 8000d9e:	1a8a      	subs	r2, r1, r2
 8000da0:	fb02 f303 	mul.w	r3, r2, r3
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff faf7 	bl	8000398 <__aeabi_i2f>
 8000daa:	4604      	mov	r4, r0
 8000dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dae:	fb03 f303 	mul.w	r3, r3, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff faf0 	bl	8000398 <__aeabi_i2f>
 8000db8:	4603      	mov	r3, r0
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	f7ff fbf3 	bl	80005a8 <__aeabi_fdiv>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4628      	mov	r0, r5
 8000dc8:	f7ff fa32 	bl	8000230 <__addsf3>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	617b      	str	r3, [r7, #20]
    if(equation<=1)
 8000dd0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000dd4:	6978      	ldr	r0, [r7, #20]
 8000dd6:	f7ff fcdb 	bl	8000790 <__aeabi_fcmple>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <check+0xa0>
    {
        return 1;
 8000de0:	2301      	movs	r3, #1
 8000de2:	e000      	b.n	8000de6 <check+0xa2>
    }
    else{
        return 0;
 8000de4:	2300      	movs	r3, #0
    }
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bdb0      	pop	{r4, r5, r7, pc}

08000dee <LCD_DrawEllipse>:

//Task 3
void LCD_DrawEllipse ( uint16_t usC, uint16_t usP, uint16_t SR, uint16_t LR, uint16_t usColor)
{	
 8000dee:	b590      	push	{r4, r7, lr}
 8000df0:	b08f      	sub	sp, #60	; 0x3c
 8000df2:	af02      	add	r7, sp, #8
 8000df4:	4604      	mov	r4, r0
 8000df6:	4608      	mov	r0, r1
 8000df8:	4611      	mov	r1, r2
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4623      	mov	r3, r4
 8000dfe:	80fb      	strh	r3, [r7, #6]
 8000e00:	4603      	mov	r3, r0
 8000e02:	80bb      	strh	r3, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	807b      	strh	r3, [r7, #2]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	803b      	strh	r3, [r7, #0]
	/*
	 *  Task 3 : Implement LCD_DrawEllipse by using LCD_DrawDot
	 */
	
	int a = LR;
 8000e0c:	883b      	ldrh	r3, [r7, #0]
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
	int b = SR;
 8000e10:	887b      	ldrh	r3, [r7, #2]
 8000e12:	623b      	str	r3, [r7, #32]
	int h = usC;
 8000e14:	88fb      	ldrh	r3, [r7, #6]
 8000e16:	61fb      	str	r3, [r7, #28]
	int k = usP;
 8000e18:	88bb      	ldrh	r3, [r7, #4]
 8000e1a:	61bb      	str	r3, [r7, #24]
//        }
//    }

    //equation is ((x-h)^2)/a^2 + ((y-k)^2)/b^2 == 1
	//Taken from https://stackoverflow.com/questions/60900000/how-to-draw-an-ellipse-using-the-ellipse-equation
    for(int x=h-a;x<=h+a;x++)
 8000e1c:	69fa      	ldr	r2, [r7, #28]
 8000e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e24:	e05b      	b.n	8000ede <LCD_DrawEllipse+0xf0>
    {
        for(int y=k-b;y<=k+b;y++)
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	6a3b      	ldr	r3, [r7, #32]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e2e:	e04d      	b.n	8000ecc <LCD_DrawEllipse+0xde>
        {
        	//check (x,y) and neighboring points (x+1,y), (x,y+1), (x+1,y+1)
        	//if all points are inside, (x,y) is inside the ellipse
        	//if none points are inside, (x,y) is outside
        	//if some of the points are inside, (x,y) is part of ellipse so draw dot
            int original_point = check(x,y,h,k,a,b);
 8000e30:	6a3b      	ldr	r3, [r7, #32]
 8000e32:	9301      	str	r3, [sp, #4]
 8000e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	69fa      	ldr	r2, [r7, #28]
 8000e3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000e3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e40:	f7ff ff80 	bl	8000d44 <check>
 8000e44:	6178      	str	r0, [r7, #20]
            int horizontal_point = check(x+1,y,h,k,a,b);
 8000e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e48:	1c58      	adds	r0, r3, #1
 8000e4a:	6a3b      	ldr	r3, [r7, #32]
 8000e4c:	9301      	str	r3, [sp, #4]
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	69fa      	ldr	r2, [r7, #28]
 8000e56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000e58:	f7ff ff74 	bl	8000d44 <check>
 8000e5c:	6138      	str	r0, [r7, #16]
            int vertical_point = check(x,y+1,h,k,a,b);
 8000e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e60:	1c59      	adds	r1, r3, #1
 8000e62:	6a3b      	ldr	r3, [r7, #32]
 8000e64:	9301      	str	r3, [sp, #4]
 8000e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	69fa      	ldr	r2, [r7, #28]
 8000e6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e70:	f7ff ff68 	bl	8000d44 <check>
 8000e74:	60f8      	str	r0, [r7, #12]
            int outside_point = check(x+1,y+1,h,k,a,b);
 8000e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e78:	1c58      	adds	r0, r3, #1
 8000e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e7c:	1c59      	adds	r1, r3, #1
 8000e7e:	6a3b      	ldr	r3, [r7, #32]
 8000e80:	9301      	str	r3, [sp, #4]
 8000e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	69fa      	ldr	r2, [r7, #28]
 8000e8a:	f7ff ff5b 	bl	8000d44 <check>
 8000e8e:	60b8      	str	r0, [r7, #8]
            if(original_point + horizontal_point + vertical_point + outside_point<4 && original_point + horizontal_point + vertical_point + outside_point>1)
 8000e90:	697a      	ldr	r2, [r7, #20]
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	441a      	add	r2, r3
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	441a      	add	r2, r3
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	2b03      	cmp	r3, #3
 8000ea0:	dc11      	bgt.n	8000ec6 <LCD_DrawEllipse+0xd8>
 8000ea2:	697a      	ldr	r2, [r7, #20]
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	441a      	add	r2, r3
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	441a      	add	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	4413      	add	r3, r2
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	dd08      	ble.n	8000ec6 <LCD_DrawEllipse+0xd8>
            {
            	LCD_DrawDot(x,y,usColor);
 8000eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000eba:	b291      	uxth	r1, r2
 8000ebc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fef7 	bl	8000cb4 <LCD_DrawDot>
        for(int y=k-b;y<=k+b;y++)
 8000ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec8:	3301      	adds	r3, #1
 8000eca:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	6a3b      	ldr	r3, [r7, #32]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	ddab      	ble.n	8000e30 <LCD_DrawEllipse+0x42>
    for(int x=h-a;x<=h+a;x++)
 8000ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eda:	3301      	adds	r3, #1
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ede:	69fa      	ldr	r2, [r7, #28]
 8000ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee2:	4413      	add	r3, r2
 8000ee4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	dd9d      	ble.n	8000e26 <LCD_DrawEllipse+0x38>
            }
        }
    }

	
}
 8000eea:	bf00      	nop
 8000eec:	bf00      	nop
 8000eee:	3734      	adds	r7, #52	; 0x34
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd90      	pop	{r4, r7, pc}

08000ef4 <LCD_DrawName>:



//Task 4 Draw Chinese Character
void LCD_DrawName(uint8_t x, uint8_t y)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	f5ad 7d26 	sub.w	sp, sp, #664	; 0x298
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	4602      	mov	r2, r0
 8000efe:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8000f02:	f2a3 2391 	subw	r3, r3, #657	; 0x291
 8000f06:	701a      	strb	r2, [r3, #0]
 8000f08:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8000f0c:	f2a3 2392 	subw	r3, r3, #658	; 0x292
 8000f10:	460a      	mov	r2, r1
 8000f12:	701a      	strb	r2, [r3, #0]
	// used dotmatrixtool.org, settings were little endian, row major, 24x24 pixels
	// 72*8 bit hex values, 576 pixels
	// each value is 8 bit, each bit represents a pixel, 3 data values represent one row
    uint8_t data[] =
 8000f14:	4a63      	ldr	r2, [pc, #396]	; (80010a4 <LCD_DrawName+0x1b0>)
 8000f16:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	2248      	movs	r2, #72	; 0x48
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f001 fbb8 	bl	8002694 <memcpy>
    {
		0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x04, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x7f, 0x01, 0x00, 0x80, 0x01, 0x00, 0x80, 0x81, 0xff, 0x83, 0x01, 0x10, 0x80, 0x00, 0x10, 0x00, 0xf0, 0xff, 0x0f, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x11, 0x00, 0x00, 0x1e, 0x00
    };
    // array grid to print character
    uint8_t grid[24][24]={0};
 8000f24:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8000f28:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f32:	461a      	mov	r2, r3
 8000f34:	2100      	movs	r1, #0
 8000f36:	f001 fbbb 	bl	80026b0 <memset>
    //counter to keep track of row
    uint8_t row =0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f887 3297 	strb.w	r3, [r7, #663]	; 0x297
    //each row has 24 bits, so go through three 8 bit hex values for each row and keep counter
    uint8_t row_split =0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f887 3296 	strb.w	r3, [r7, #662]	; 0x296
    //traverse through all data values
    for(uint8_t i = 0; i<72; i++)
 8000f46:	2300      	movs	r3, #0
 8000f48:	f887 3295 	strb.w	r3, [r7, #661]	; 0x295
 8000f4c:	e05b      	b.n	8001006 <LCD_DrawName+0x112>
    {
        uint8_t temp = data[i];
 8000f4e:	f897 3295 	ldrb.w	r3, [r7, #661]	; 0x295
 8000f52:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8000f56:	443b      	add	r3, r7
 8000f58:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 8000f5c:	f887 3294 	strb.w	r3, [r7, #660]	; 0x294
        // check if we went through 3 data hex points, if we did then that means next row
        if(i%3==0 && i!=0)
 8000f60:	f897 2295 	ldrb.w	r2, [r7, #661]	; 0x295
 8000f64:	4b50      	ldr	r3, [pc, #320]	; (80010a8 <LCD_DrawName+0x1b4>)
 8000f66:	fba3 1302 	umull	r1, r3, r3, r2
 8000f6a:	0859      	lsrs	r1, r3, #1
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	440b      	add	r3, r1
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d108      	bne.n	8000f8c <LCD_DrawName+0x98>
 8000f7a:	f897 3295 	ldrb.w	r3, [r7, #661]	; 0x295
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d004      	beq.n	8000f8c <LCD_DrawName+0x98>
        {
            row++;
 8000f82:	f897 3297 	ldrb.w	r3, [r7, #663]	; 0x297
 8000f86:	3301      	adds	r3, #1
 8000f88:	f887 3297 	strb.w	r3, [r7, #663]	; 0x297
        }
        // loop through 8 bit hex value
        for(uint8_t k = 0; k<8;k++)
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f887 3293 	strb.w	r3, [r7, #659]	; 0x293
 8000f92:	e023      	b.n	8000fdc <LCD_DrawName+0xe8>
        {
        	//if the LSB bit is 1, set grid to 1
            if(temp & 0x01)
 8000f94:	f897 3294 	ldrb.w	r3, [r7, #660]	; 0x294
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d013      	beq.n	8000fc8 <LCD_DrawName+0xd4>
            {
                // printf("k= %d, row = %d\n",k, row);
                grid[row][k+row_split*8] = 1;
 8000fa0:	f897 2297 	ldrb.w	r2, [r7, #663]	; 0x297
 8000fa4:	f897 1293 	ldrb.w	r1, [r7, #659]	; 0x293
 8000fa8:	f897 3296 	ldrb.w	r3, [r7, #662]	; 0x296
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	4419      	add	r1, r3
 8000fb0:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8000fb4:	f5a3 7024 	sub.w	r0, r3, #656	; 0x290
 8000fb8:	4613      	mov	r3, r2
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	4413      	add	r3, r2
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	4403      	add	r3, r0
 8000fc2:	440b      	add	r3, r1
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	701a      	strb	r2, [r3, #0]
            }
            //shift bits to right
            temp = temp>>1;
 8000fc8:	f897 3294 	ldrb.w	r3, [r7, #660]	; 0x294
 8000fcc:	085b      	lsrs	r3, r3, #1
 8000fce:	f887 3294 	strb.w	r3, [r7, #660]	; 0x294
        for(uint8_t k = 0; k<8;k++)
 8000fd2:	f897 3293 	ldrb.w	r3, [r7, #659]	; 0x293
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	f887 3293 	strb.w	r3, [r7, #659]	; 0x293
 8000fdc:	f897 3293 	ldrb.w	r3, [r7, #659]	; 0x293
 8000fe0:	2b07      	cmp	r3, #7
 8000fe2:	d9d7      	bls.n	8000f94 <LCD_DrawName+0xa0>
        }
        //once data points is finished, we move to next 8 bit so add to row_split
        row_split++;
 8000fe4:	f897 3296 	ldrb.w	r3, [r7, #662]	; 0x296
 8000fe8:	3301      	adds	r3, #1
 8000fea:	f887 3296 	strb.w	r3, [r7, #662]	; 0x296
        //make sure row_split is less than 3 otherwise it will go over 24 pixels
        if(row_split>=3)
 8000fee:	f897 3296 	ldrb.w	r3, [r7, #662]	; 0x296
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d902      	bls.n	8000ffc <LCD_DrawName+0x108>
        {
            // printf("i=%d\n",i);
        	row_split =0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f887 3296 	strb.w	r3, [r7, #662]	; 0x296
    for(uint8_t i = 0; i<72; i++)
 8000ffc:	f897 3295 	ldrb.w	r3, [r7, #661]	; 0x295
 8001000:	3301      	adds	r3, #1
 8001002:	f887 3295 	strb.w	r3, [r7, #661]	; 0x295
 8001006:	f897 3295 	ldrb.w	r3, [r7, #661]	; 0x295
 800100a:	2b47      	cmp	r3, #71	; 0x47
 800100c:	d99f      	bls.n	8000f4e <LCD_DrawName+0x5a>
        }
    }

    //print character to lcd display from grid array, if grid[i][j]==1 draw dot
    for(uint8_t i = 0; i<24; i++)
 800100e:	2300      	movs	r3, #0
 8001010:	f887 3292 	strb.w	r3, [r7, #658]	; 0x292
 8001014:	e03c      	b.n	8001090 <LCD_DrawName+0x19c>
    {
        for(uint8_t j = 0; j<24;j++)
 8001016:	2300      	movs	r3, #0
 8001018:	f887 3291 	strb.w	r3, [r7, #657]	; 0x291
 800101c:	e02f      	b.n	800107e <LCD_DrawName+0x18a>
        {
            if(grid[i][j]==1)
 800101e:	f897 2292 	ldrb.w	r2, [r7, #658]	; 0x292
 8001022:	f897 1291 	ldrb.w	r1, [r7, #657]	; 0x291
 8001026:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800102a:	f5a3 7024 	sub.w	r0, r3, #656	; 0x290
 800102e:	4613      	mov	r3, r2
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	4413      	add	r3, r2
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	4403      	add	r3, r0
 8001038:	440b      	add	r3, r1
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d119      	bne.n	8001074 <LCD_DrawName+0x180>
            {
            	LCD_DrawDot(j+x,i+y,0x0000);
 8001040:	f897 3291 	ldrb.w	r3, [r7, #657]	; 0x291
 8001044:	b29a      	uxth	r2, r3
 8001046:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800104a:	f2a3 2391 	subw	r3, r3, #657	; 0x291
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	b29b      	uxth	r3, r3
 8001052:	4413      	add	r3, r2
 8001054:	b298      	uxth	r0, r3
 8001056:	f897 3292 	ldrb.w	r3, [r7, #658]	; 0x292
 800105a:	b29a      	uxth	r2, r3
 800105c:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001060:	f2a3 2392 	subw	r3, r3, #658	; 0x292
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	b29b      	uxth	r3, r3
 8001068:	4413      	add	r3, r2
 800106a:	b29b      	uxth	r3, r3
 800106c:	2200      	movs	r2, #0
 800106e:	4619      	mov	r1, r3
 8001070:	f7ff fe20 	bl	8000cb4 <LCD_DrawDot>
        for(uint8_t j = 0; j<24;j++)
 8001074:	f897 3291 	ldrb.w	r3, [r7, #657]	; 0x291
 8001078:	3301      	adds	r3, #1
 800107a:	f887 3291 	strb.w	r3, [r7, #657]	; 0x291
 800107e:	f897 3291 	ldrb.w	r3, [r7, #657]	; 0x291
 8001082:	2b17      	cmp	r3, #23
 8001084:	d9cb      	bls.n	800101e <LCD_DrawName+0x12a>
    for(uint8_t i = 0; i<24; i++)
 8001086:	f897 3292 	ldrb.w	r3, [r7, #658]	; 0x292
 800108a:	3301      	adds	r3, #1
 800108c:	f887 3292 	strb.w	r3, [r7, #658]	; 0x292
 8001090:	f897 3292 	ldrb.w	r3, [r7, #658]	; 0x292
 8001094:	2b17      	cmp	r3, #23
 8001096:	d9be      	bls.n	8001016 <LCD_DrawName+0x122>
            }
        }
        //  printf("\n");
    }
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	f507 7726 	add.w	r7, r7, #664	; 0x298
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	080026d8 	.word	0x080026d8
 80010a8:	aaaaaaab 	.word	0xaaaaaaab

080010ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b0:	f000 fa82 	bl	80015b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b4:	f000 f809 	bl	80010ca <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b8:	f000 f84c 	bl	8001154 <MX_GPIO_Init>
  MX_FSMC_Init();
 80010bc:	f000 f8d0 	bl	8001260 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  //initialize lab, call lab function
  LCD_INIT();
 80010c0:	f7ff fb95 	bl	80007ee <LCD_INIT>
  lab_task();
 80010c4:	f000 f930 	bl	8001328 <lab_task>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <main+0x1c>

080010ca <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b090      	sub	sp, #64	; 0x40
 80010ce:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d0:	f107 0318 	add.w	r3, r7, #24
 80010d4:	2228      	movs	r2, #40	; 0x28
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f001 fae9 	bl	80026b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ec:	2301      	movs	r3, #1
 80010ee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010f4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010fa:	2301      	movs	r3, #1
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fe:	2302      	movs	r3, #2
 8001100:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001102:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001106:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001108:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800110c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110e:	f107 0318 	add.w	r3, r7, #24
 8001112:	4618      	mov	r0, r3
 8001114:	f000 fd8e 	bl	8001c34 <HAL_RCC_OscConfig>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800111e:	f000 f93a 	bl	8001396 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001122:	230f      	movs	r3, #15
 8001124:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001126:	2302      	movs	r3, #2
 8001128:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800112e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001132:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	2102      	movs	r1, #2
 800113c:	4618      	mov	r0, r3
 800113e:	f000 fffb 	bl	8002138 <HAL_RCC_ClockConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001148:	f000 f925 	bl	8001396 <Error_Handler>
  }
}
 800114c:	bf00      	nop
 800114e:	3740      	adds	r7, #64	; 0x40
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115a:	f107 0310 	add.w	r3, r7, #16
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001168:	4b38      	ldr	r3, [pc, #224]	; (800124c <MX_GPIO_Init+0xf8>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	4a37      	ldr	r2, [pc, #220]	; (800124c <MX_GPIO_Init+0xf8>)
 800116e:	f043 0310 	orr.w	r3, r3, #16
 8001172:	6193      	str	r3, [r2, #24]
 8001174:	4b35      	ldr	r3, [pc, #212]	; (800124c <MX_GPIO_Init+0xf8>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	f003 0310 	and.w	r3, r3, #16
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001180:	4b32      	ldr	r3, [pc, #200]	; (800124c <MX_GPIO_Init+0xf8>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	4a31      	ldr	r2, [pc, #196]	; (800124c <MX_GPIO_Init+0xf8>)
 8001186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800118a:	6193      	str	r3, [r2, #24]
 800118c:	4b2f      	ldr	r3, [pc, #188]	; (800124c <MX_GPIO_Init+0xf8>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001198:	4b2c      	ldr	r3, [pc, #176]	; (800124c <MX_GPIO_Init+0xf8>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	4a2b      	ldr	r2, [pc, #172]	; (800124c <MX_GPIO_Init+0xf8>)
 800119e:	f043 0320 	orr.w	r3, r3, #32
 80011a2:	6193      	str	r3, [r2, #24]
 80011a4:	4b29      	ldr	r3, [pc, #164]	; (800124c <MX_GPIO_Init+0xf8>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	f003 0320 	and.w	r3, r3, #32
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b0:	4b26      	ldr	r3, [pc, #152]	; (800124c <MX_GPIO_Init+0xf8>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	4a25      	ldr	r2, [pc, #148]	; (800124c <MX_GPIO_Init+0xf8>)
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	6193      	str	r3, [r2, #24]
 80011bc:	4b23      	ldr	r3, [pc, #140]	; (800124c <MX_GPIO_Init+0xf8>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	603b      	str	r3, [r7, #0]
 80011c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80011c8:	2200      	movs	r2, #0
 80011ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ce:	4820      	ldr	r0, [pc, #128]	; (8001250 <MX_GPIO_Init+0xfc>)
 80011d0:	f000 fcf6 	bl	8001bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2102      	movs	r1, #2
 80011d8:	481e      	ldr	r0, [pc, #120]	; (8001254 <MX_GPIO_Init+0x100>)
 80011da:	f000 fcf1 	bl	8001bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011e4:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <MX_GPIO_Init+0x104>)
 80011e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011e8:	2302      	movs	r3, #2
 80011ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	4619      	mov	r1, r3
 80011f2:	481a      	ldr	r0, [pc, #104]	; (800125c <MX_GPIO_Init+0x108>)
 80011f4:	f000 fb50 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fe:	2301      	movs	r3, #1
 8001200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2302      	movs	r3, #2
 8001208:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800120a:	f107 0310 	add.w	r3, r7, #16
 800120e:	4619      	mov	r1, r3
 8001210:	480f      	ldr	r0, [pc, #60]	; (8001250 <MX_GPIO_Init+0xfc>)
 8001212:	f000 fb41 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001216:	2302      	movs	r3, #2
 8001218:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121a:	2301      	movs	r3, #1
 800121c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001222:	2303      	movs	r3, #3
 8001224:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001226:	f107 0310 	add.w	r3, r7, #16
 800122a:	4619      	mov	r1, r3
 800122c:	4809      	ldr	r0, [pc, #36]	; (8001254 <MX_GPIO_Init+0x100>)
 800122e:	f000 fb33 	bl	8001898 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	2028      	movs	r0, #40	; 0x28
 8001238:	f000 faf7 	bl	800182a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800123c:	2028      	movs	r0, #40	; 0x28
 800123e:	f000 fb10 	bl	8001862 <HAL_NVIC_EnableIRQ>

}
 8001242:	bf00      	nop
 8001244:	3720      	adds	r7, #32
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000
 8001250:	40011400 	.word	0x40011400
 8001254:	40011800 	.word	0x40011800
 8001258:	10110000 	.word	0x10110000
 800125c:	40011000 	.word	0x40011000

08001260 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
 8001274:	615a      	str	r2, [r3, #20]
 8001276:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001278:	4b28      	ldr	r3, [pc, #160]	; (800131c <MX_FSMC_Init+0xbc>)
 800127a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800127e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001280:	4b26      	ldr	r3, [pc, #152]	; (800131c <MX_FSMC_Init+0xbc>)
 8001282:	4a27      	ldr	r2, [pc, #156]	; (8001320 <MX_FSMC_Init+0xc0>)
 8001284:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001286:	4b25      	ldr	r3, [pc, #148]	; (800131c <MX_FSMC_Init+0xbc>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800128c:	4b23      	ldr	r3, [pc, #140]	; (800131c <MX_FSMC_Init+0xbc>)
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001292:	4b22      	ldr	r3, [pc, #136]	; (800131c <MX_FSMC_Init+0xbc>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001298:	4b20      	ldr	r3, [pc, #128]	; (800131c <MX_FSMC_Init+0xbc>)
 800129a:	2210      	movs	r2, #16
 800129c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800129e:	4b1f      	ldr	r3, [pc, #124]	; (800131c <MX_FSMC_Init+0xbc>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80012a4:	4b1d      	ldr	r3, [pc, #116]	; (800131c <MX_FSMC_Init+0xbc>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80012aa:	4b1c      	ldr	r3, [pc, #112]	; (800131c <MX_FSMC_Init+0xbc>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80012b0:	4b1a      	ldr	r3, [pc, #104]	; (800131c <MX_FSMC_Init+0xbc>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80012b6:	4b19      	ldr	r3, [pc, #100]	; (800131c <MX_FSMC_Init+0xbc>)
 80012b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012bc:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80012be:	4b17      	ldr	r3, [pc, #92]	; (800131c <MX_FSMC_Init+0xbc>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80012c4:	4b15      	ldr	r3, [pc, #84]	; (800131c <MX_FSMC_Init+0xbc>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80012ca:	4b14      	ldr	r3, [pc, #80]	; (800131c <MX_FSMC_Init+0xbc>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <MX_FSMC_Init+0xbc>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 80012d6:	230f      	movs	r3, #15
 80012d8:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80012da:	230f      	movs	r3, #15
 80012dc:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80012de:	23ff      	movs	r3, #255	; 0xff
 80012e0:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80012e2:	230f      	movs	r3, #15
 80012e4:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80012e6:	2310      	movs	r3, #16
 80012e8:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80012ea:	2311      	movs	r3, #17
 80012ec:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	2200      	movs	r2, #0
 80012f6:	4619      	mov	r1, r3
 80012f8:	4808      	ldr	r0, [pc, #32]	; (800131c <MX_FSMC_Init+0xbc>)
 80012fa:	f001 f883 	bl	8002404 <HAL_SRAM_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8001304:	f000 f847 	bl	8001396 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <MX_FSMC_Init+0xc4>)
 800130a:	69db      	ldr	r3, [r3, #28]
 800130c:	4a05      	ldr	r2, [pc, #20]	; (8001324 <MX_FSMC_Init+0xc4>)
 800130e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001312:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001314:	bf00      	nop
 8001316:	3720      	adds	r7, #32
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000028 	.word	0x20000028
 8001320:	a0000104 	.word	0xa0000104
 8001324:	40010000 	.word	0x40010000

08001328 <lab_task>:

/* USER CODE BEGIN 4 */

//lab function
void lab_task(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af02      	add	r7, sp, #8
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800132e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001338:	22f0      	movs	r2, #240	; 0xf0
 800133a:	2100      	movs	r1, #0
 800133c:	2000      	movs	r0, #0
 800133e:	f7ff fc50 	bl	8000be2 <LCD_Clear>
	// Task 1 Draw name
	LCD_DrawChar(0, 0, 'J');
 8001342:	224a      	movs	r2, #74	; 0x4a
 8001344:	2100      	movs	r1, #0
 8001346:	2000      	movs	r0, #0
 8001348:	f7ff fc6e 	bl	8000c28 <LCD_DrawChar>
	LCD_DrawChar(8, 0, 'A');
 800134c:	2241      	movs	r2, #65	; 0x41
 800134e:	2100      	movs	r1, #0
 8001350:	2008      	movs	r0, #8
 8001352:	f7ff fc69 	bl	8000c28 <LCD_DrawChar>
	LCD_DrawChar(16, 0, 'M');
 8001356:	224d      	movs	r2, #77	; 0x4d
 8001358:	2100      	movs	r1, #0
 800135a:	2010      	movs	r0, #16
 800135c:	f7ff fc64 	bl	8000c28 <LCD_DrawChar>
	LCD_DrawChar(24, 0, 'E');
 8001360:	2245      	movs	r2, #69	; 0x45
 8001362:	2100      	movs	r1, #0
 8001364:	2018      	movs	r0, #24
 8001366:	f7ff fc5f 	bl	8000c28 <LCD_DrawChar>
	LCD_DrawChar(32, 0, 'S');
 800136a:	2253      	movs	r2, #83	; 0x53
 800136c:	2100      	movs	r1, #0
 800136e:	2020      	movs	r0, #32
 8001370:	f7ff fc5a 	bl	8000c28 <LCD_DrawChar>

	// Task 2 Draw Dot (using black)
	LCD_DrawDot(220,300,0x0000);
 8001374:	2200      	movs	r2, #0
 8001376:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800137a:	20dc      	movs	r0, #220	; 0xdc
 800137c:	f7ff fc9a 	bl	8000cb4 <LCD_DrawDot>

	// Task 3 Draw Ellipse
	LCD_DrawEllipse(120, 160, 30, 45, 0x0000);
 8001380:	2300      	movs	r3, #0
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	232d      	movs	r3, #45	; 0x2d
 8001386:	221e      	movs	r2, #30
 8001388:	21a0      	movs	r1, #160	; 0xa0
 800138a:	2078      	movs	r0, #120	; 0x78
 800138c:	f7ff fd2f 	bl	8000dee <LCD_DrawEllipse>
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800139a:	b672      	cpsid	i
}
 800139c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800139e:	e7fe      	b.n	800139e <Error_Handler+0x8>

080013a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <HAL_MspInit+0x5c>)
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	4a14      	ldr	r2, [pc, #80]	; (80013fc <HAL_MspInit+0x5c>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6193      	str	r3, [r2, #24]
 80013b2:	4b12      	ldr	r3, [pc, #72]	; (80013fc <HAL_MspInit+0x5c>)
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <HAL_MspInit+0x5c>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <HAL_MspInit+0x5c>)
 80013c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c8:	61d3      	str	r3, [r2, #28]
 80013ca:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <HAL_MspInit+0x5c>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <HAL_MspInit+0x60>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	4a04      	ldr	r2, [pc, #16]	; (8001400 <HAL_MspInit+0x60>)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f2:	bf00      	nop
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr
 80013fc:	40021000 	.word	0x40021000
 8001400:	40010000 	.word	0x40010000

08001404 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800140a:	f107 0308 	add.w	r3, r7, #8
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8001418:	4b18      	ldr	r3, [pc, #96]	; (800147c <HAL_FSMC_MspInit+0x78>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d129      	bne.n	8001474 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8001420:	4b16      	ldr	r3, [pc, #88]	; (800147c <HAL_FSMC_MspInit+0x78>)
 8001422:	2201      	movs	r2, #1
 8001424:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001426:	4b16      	ldr	r3, [pc, #88]	; (8001480 <HAL_FSMC_MspInit+0x7c>)
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	4a15      	ldr	r2, [pc, #84]	; (8001480 <HAL_FSMC_MspInit+0x7c>)
 800142c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001430:	6153      	str	r3, [r2, #20]
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <HAL_FSMC_MspInit+0x7c>)
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800143e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001442:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001448:	2303      	movs	r3, #3
 800144a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800144c:	f107 0308 	add.w	r3, r7, #8
 8001450:	4619      	mov	r1, r3
 8001452:	480c      	ldr	r0, [pc, #48]	; (8001484 <HAL_FSMC_MspInit+0x80>)
 8001454:	f000 fa20 	bl	8001898 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001458:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 800145c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001462:	2303      	movs	r3, #3
 8001464:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001466:	f107 0308 	add.w	r3, r7, #8
 800146a:	4619      	mov	r1, r3
 800146c:	4806      	ldr	r0, [pc, #24]	; (8001488 <HAL_FSMC_MspInit+0x84>)
 800146e:	f000 fa13 	bl	8001898 <HAL_GPIO_Init>
 8001472:	e000      	b.n	8001476 <HAL_FSMC_MspInit+0x72>
    return;
 8001474:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000070 	.word	0x20000070
 8001480:	40021000 	.word	0x40021000
 8001484:	40011800 	.word	0x40011800
 8001488:	40011400 	.word	0x40011400

0800148c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001494:	f7ff ffb6 	bl	8001404 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <NMI_Handler+0x4>

080014a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014aa:	e7fe      	b.n	80014aa <HardFault_Handler+0x4>

080014ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <MemManage_Handler+0x4>

080014b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b6:	e7fe      	b.n	80014b6 <BusFault_Handler+0x4>

080014b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <UsageFault_Handler+0x4>

080014be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr

080014ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr

080014d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr

080014e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e6:	f000 f8ad 	bl	8001644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET)
 80014f6:	4b18      	ldr	r3, [pc, #96]	; (8001558 <EXTI15_10_IRQHandler+0x68>)
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d022      	beq.n	8001548 <EXTI15_10_IRQHandler+0x58>
	{
		if(status==0)
 8001502:	4b16      	ldr	r3, [pc, #88]	; (800155c <EXTI15_10_IRQHandler+0x6c>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d111      	bne.n	800152e <EXTI15_10_IRQHandler+0x3e>
		{
			LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800150a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001514:	22f0      	movs	r2, #240	; 0xf0
 8001516:	2100      	movs	r1, #0
 8001518:	2000      	movs	r0, #0
 800151a:	f7ff fb62 	bl	8000be2 <LCD_Clear>
			LCD_DrawName(30,30);
 800151e:	211e      	movs	r1, #30
 8001520:	201e      	movs	r0, #30
 8001522:	f7ff fce7 	bl	8000ef4 <LCD_DrawName>
			status=1;
 8001526:	4b0d      	ldr	r3, [pc, #52]	; (800155c <EXTI15_10_IRQHandler+0x6c>)
 8001528:	2201      	movs	r2, #1
 800152a:	701a      	strb	r2, [r3, #0]
 800152c:	e004      	b.n	8001538 <EXTI15_10_IRQHandler+0x48>
		}
		else
		{
			lab_task();
 800152e:	f7ff fefb 	bl	8001328 <lab_task>
			status=0;
 8001532:	4b0a      	ldr	r3, [pc, #40]	; (800155c <EXTI15_10_IRQHandler+0x6c>)
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]
		}
//		LCD_Clear (0, 0, 240, 320, BACKGROUND);
//		LCD_DrawName(30,30);
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8001538:	4b07      	ldr	r3, [pc, #28]	; (8001558 <EXTI15_10_IRQHandler+0x68>)
 800153a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800153e:	615a      	str	r2, [r3, #20]
		HAL_GPIO_EXTI_Callback(GPIO_PIN_13);
 8001540:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001544:	f000 fb6c 	bl	8001c20 <HAL_GPIO_EXTI_Callback>
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001548:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800154c:	f000 fb50 	bl	8001bf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40010400 	.word	0x40010400
 800155c:	20000074 	.word	0x20000074

08001560 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr

0800156c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800156c:	480c      	ldr	r0, [pc, #48]	; (80015a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800156e:	490d      	ldr	r1, [pc, #52]	; (80015a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001570:	4a0d      	ldr	r2, [pc, #52]	; (80015a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001574:	e002      	b.n	800157c <LoopCopyDataInit>

08001576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157a:	3304      	adds	r3, #4

0800157c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800157c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001580:	d3f9      	bcc.n	8001576 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001584:	4c0a      	ldr	r4, [pc, #40]	; (80015b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001588:	e001      	b.n	800158e <LoopFillZerobss>

0800158a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800158c:	3204      	adds	r2, #4

0800158e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001590:	d3fb      	bcc.n	800158a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001592:	f7ff ffe5 	bl	8001560 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001596:	f001 f859 	bl	800264c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800159a:	f7ff fd87 	bl	80010ac <main>
  bx lr
 800159e:	4770      	bx	lr
  ldr r0, =_sdata
 80015a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015a8:	08002d38 	.word	0x08002d38
  ldr r2, =_sbss
 80015ac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80015b0:	2000007c 	.word	0x2000007c

080015b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015b4:	e7fe      	b.n	80015b4 <ADC1_2_IRQHandler>
	...

080015b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <HAL_Init+0x28>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a07      	ldr	r2, [pc, #28]	; (80015e0 <HAL_Init+0x28>)
 80015c2:	f043 0310 	orr.w	r3, r3, #16
 80015c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c8:	2003      	movs	r0, #3
 80015ca:	f000 f923 	bl	8001814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ce:	200f      	movs	r0, #15
 80015d0:	f000 f808 	bl	80015e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d4:	f7ff fee4 	bl	80013a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40022000 	.word	0x40022000

080015e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <HAL_InitTick+0x54>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_InitTick+0x58>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	4619      	mov	r1, r3
 80015f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001602:	4618      	mov	r0, r3
 8001604:	f000 f93b 	bl	800187e <HAL_SYSTICK_Config>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e00e      	b.n	8001630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b0f      	cmp	r3, #15
 8001616:	d80a      	bhi.n	800162e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001618:	2200      	movs	r2, #0
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001620:	f000 f903 	bl	800182a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001624:	4a06      	ldr	r2, [pc, #24]	; (8001640 <HAL_InitTick+0x5c>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	e000      	b.n	8001630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000000 	.word	0x20000000
 800163c:	20000008 	.word	0x20000008
 8001640:	20000004 	.word	0x20000004

08001644 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001648:	4b05      	ldr	r3, [pc, #20]	; (8001660 <HAL_IncTick+0x1c>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	4b05      	ldr	r3, [pc, #20]	; (8001664 <HAL_IncTick+0x20>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4413      	add	r3, r2
 8001654:	4a03      	ldr	r2, [pc, #12]	; (8001664 <HAL_IncTick+0x20>)
 8001656:	6013      	str	r3, [r2, #0]
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	20000008 	.word	0x20000008
 8001664:	20000078 	.word	0x20000078

08001668 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return uwTick;
 800166c:	4b02      	ldr	r3, [pc, #8]	; (8001678 <HAL_GetTick+0x10>)
 800166e:	681b      	ldr	r3, [r3, #0]
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr
 8001678:	20000078 	.word	0x20000078

0800167c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <__NVIC_SetPriorityGrouping+0x44>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001698:	4013      	ands	r3, r2
 800169a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ae:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <__NVIC_SetPriorityGrouping+0x44>)
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	60d3      	str	r3, [r2, #12]
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c8:	4b04      	ldr	r3, [pc, #16]	; (80016dc <__NVIC_GetPriorityGrouping+0x18>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	0a1b      	lsrs	r3, r3, #8
 80016ce:	f003 0307 	and.w	r3, r3, #7
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	db0b      	blt.n	800170a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	f003 021f 	and.w	r2, r3, #31
 80016f8:	4906      	ldr	r1, [pc, #24]	; (8001714 <__NVIC_EnableIRQ+0x34>)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	095b      	lsrs	r3, r3, #5
 8001700:	2001      	movs	r0, #1
 8001702:	fa00 f202 	lsl.w	r2, r0, r2
 8001706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	e000e100 	.word	0xe000e100

08001718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001728:	2b00      	cmp	r3, #0
 800172a:	db0a      	blt.n	8001742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	b2da      	uxtb	r2, r3
 8001730:	490c      	ldr	r1, [pc, #48]	; (8001764 <__NVIC_SetPriority+0x4c>)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	0112      	lsls	r2, r2, #4
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	440b      	add	r3, r1
 800173c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001740:	e00a      	b.n	8001758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4908      	ldr	r1, [pc, #32]	; (8001768 <__NVIC_SetPriority+0x50>)
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	3b04      	subs	r3, #4
 8001750:	0112      	lsls	r2, r2, #4
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	440b      	add	r3, r1
 8001756:	761a      	strb	r2, [r3, #24]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000e100 	.word	0xe000e100
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176c:	b480      	push	{r7}
 800176e:	b089      	sub	sp, #36	; 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f1c3 0307 	rsb	r3, r3, #7
 8001786:	2b04      	cmp	r3, #4
 8001788:	bf28      	it	cs
 800178a:	2304      	movcs	r3, #4
 800178c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3304      	adds	r3, #4
 8001792:	2b06      	cmp	r3, #6
 8001794:	d902      	bls.n	800179c <NVIC_EncodePriority+0x30>
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3b03      	subs	r3, #3
 800179a:	e000      	b.n	800179e <NVIC_EncodePriority+0x32>
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43da      	mvns	r2, r3
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	401a      	ands	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	43d9      	mvns	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	4313      	orrs	r3, r2
         );
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3724      	adds	r7, #36	; 0x24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e0:	d301      	bcc.n	80017e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00f      	b.n	8001806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <SysTick_Config+0x40>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ee:	210f      	movs	r1, #15
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017f4:	f7ff ff90 	bl	8001718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <SysTick_Config+0x40>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fe:	4b04      	ldr	r3, [pc, #16]	; (8001810 <SysTick_Config+0x40>)
 8001800:	2207      	movs	r2, #7
 8001802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	e000e010 	.word	0xe000e010

08001814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ff2d 	bl	800167c <__NVIC_SetPriorityGrouping>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800183c:	f7ff ff42 	bl	80016c4 <__NVIC_GetPriorityGrouping>
 8001840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	6978      	ldr	r0, [r7, #20]
 8001848:	f7ff ff90 	bl	800176c <NVIC_EncodePriority>
 800184c:	4602      	mov	r2, r0
 800184e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff5f 	bl	8001718 <__NVIC_SetPriority>
}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff35 	bl	80016e0 <__NVIC_EnableIRQ>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ffa2 	bl	80017d0 <SysTick_Config>
 800188c:	4603      	mov	r3, r0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001898:	b480      	push	{r7}
 800189a:	b08b      	sub	sp, #44	; 0x2c
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018a2:	2300      	movs	r3, #0
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018a6:	2300      	movs	r3, #0
 80018a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018aa:	e179      	b.n	8001ba0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018ac:	2201      	movs	r2, #1
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	69fa      	ldr	r2, [r7, #28]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	f040 8168 	bne.w	8001b9a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	4a96      	ldr	r2, [pc, #600]	; (8001b28 <HAL_GPIO_Init+0x290>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d05e      	beq.n	8001992 <HAL_GPIO_Init+0xfa>
 80018d4:	4a94      	ldr	r2, [pc, #592]	; (8001b28 <HAL_GPIO_Init+0x290>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d875      	bhi.n	80019c6 <HAL_GPIO_Init+0x12e>
 80018da:	4a94      	ldr	r2, [pc, #592]	; (8001b2c <HAL_GPIO_Init+0x294>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d058      	beq.n	8001992 <HAL_GPIO_Init+0xfa>
 80018e0:	4a92      	ldr	r2, [pc, #584]	; (8001b2c <HAL_GPIO_Init+0x294>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d86f      	bhi.n	80019c6 <HAL_GPIO_Init+0x12e>
 80018e6:	4a92      	ldr	r2, [pc, #584]	; (8001b30 <HAL_GPIO_Init+0x298>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d052      	beq.n	8001992 <HAL_GPIO_Init+0xfa>
 80018ec:	4a90      	ldr	r2, [pc, #576]	; (8001b30 <HAL_GPIO_Init+0x298>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d869      	bhi.n	80019c6 <HAL_GPIO_Init+0x12e>
 80018f2:	4a90      	ldr	r2, [pc, #576]	; (8001b34 <HAL_GPIO_Init+0x29c>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d04c      	beq.n	8001992 <HAL_GPIO_Init+0xfa>
 80018f8:	4a8e      	ldr	r2, [pc, #568]	; (8001b34 <HAL_GPIO_Init+0x29c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d863      	bhi.n	80019c6 <HAL_GPIO_Init+0x12e>
 80018fe:	4a8e      	ldr	r2, [pc, #568]	; (8001b38 <HAL_GPIO_Init+0x2a0>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d046      	beq.n	8001992 <HAL_GPIO_Init+0xfa>
 8001904:	4a8c      	ldr	r2, [pc, #560]	; (8001b38 <HAL_GPIO_Init+0x2a0>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d85d      	bhi.n	80019c6 <HAL_GPIO_Init+0x12e>
 800190a:	2b12      	cmp	r3, #18
 800190c:	d82a      	bhi.n	8001964 <HAL_GPIO_Init+0xcc>
 800190e:	2b12      	cmp	r3, #18
 8001910:	d859      	bhi.n	80019c6 <HAL_GPIO_Init+0x12e>
 8001912:	a201      	add	r2, pc, #4	; (adr r2, 8001918 <HAL_GPIO_Init+0x80>)
 8001914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001918:	08001993 	.word	0x08001993
 800191c:	0800196d 	.word	0x0800196d
 8001920:	0800197f 	.word	0x0800197f
 8001924:	080019c1 	.word	0x080019c1
 8001928:	080019c7 	.word	0x080019c7
 800192c:	080019c7 	.word	0x080019c7
 8001930:	080019c7 	.word	0x080019c7
 8001934:	080019c7 	.word	0x080019c7
 8001938:	080019c7 	.word	0x080019c7
 800193c:	080019c7 	.word	0x080019c7
 8001940:	080019c7 	.word	0x080019c7
 8001944:	080019c7 	.word	0x080019c7
 8001948:	080019c7 	.word	0x080019c7
 800194c:	080019c7 	.word	0x080019c7
 8001950:	080019c7 	.word	0x080019c7
 8001954:	080019c7 	.word	0x080019c7
 8001958:	080019c7 	.word	0x080019c7
 800195c:	08001975 	.word	0x08001975
 8001960:	08001989 	.word	0x08001989
 8001964:	4a75      	ldr	r2, [pc, #468]	; (8001b3c <HAL_GPIO_Init+0x2a4>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d013      	beq.n	8001992 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800196a:	e02c      	b.n	80019c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	623b      	str	r3, [r7, #32]
          break;
 8001972:	e029      	b.n	80019c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	3304      	adds	r3, #4
 800197a:	623b      	str	r3, [r7, #32]
          break;
 800197c:	e024      	b.n	80019c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	3308      	adds	r3, #8
 8001984:	623b      	str	r3, [r7, #32]
          break;
 8001986:	e01f      	b.n	80019c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	330c      	adds	r3, #12
 800198e:	623b      	str	r3, [r7, #32]
          break;
 8001990:	e01a      	b.n	80019c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d102      	bne.n	80019a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800199a:	2304      	movs	r3, #4
 800199c:	623b      	str	r3, [r7, #32]
          break;
 800199e:	e013      	b.n	80019c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d105      	bne.n	80019b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019a8:	2308      	movs	r3, #8
 80019aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69fa      	ldr	r2, [r7, #28]
 80019b0:	611a      	str	r2, [r3, #16]
          break;
 80019b2:	e009      	b.n	80019c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019b4:	2308      	movs	r3, #8
 80019b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69fa      	ldr	r2, [r7, #28]
 80019bc:	615a      	str	r2, [r3, #20]
          break;
 80019be:	e003      	b.n	80019c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019c0:	2300      	movs	r3, #0
 80019c2:	623b      	str	r3, [r7, #32]
          break;
 80019c4:	e000      	b.n	80019c8 <HAL_GPIO_Init+0x130>
          break;
 80019c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	2bff      	cmp	r3, #255	; 0xff
 80019cc:	d801      	bhi.n	80019d2 <HAL_GPIO_Init+0x13a>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	e001      	b.n	80019d6 <HAL_GPIO_Init+0x13e>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3304      	adds	r3, #4
 80019d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	2bff      	cmp	r3, #255	; 0xff
 80019dc:	d802      	bhi.n	80019e4 <HAL_GPIO_Init+0x14c>
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	e002      	b.n	80019ea <HAL_GPIO_Init+0x152>
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	3b08      	subs	r3, #8
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	210f      	movs	r1, #15
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	fa01 f303 	lsl.w	r3, r1, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	401a      	ands	r2, r3
 80019fc:	6a39      	ldr	r1, [r7, #32]
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	431a      	orrs	r2, r3
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 80c1 	beq.w	8001b9a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a18:	4b49      	ldr	r3, [pc, #292]	; (8001b40 <HAL_GPIO_Init+0x2a8>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	4a48      	ldr	r2, [pc, #288]	; (8001b40 <HAL_GPIO_Init+0x2a8>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	6193      	str	r3, [r2, #24]
 8001a24:	4b46      	ldr	r3, [pc, #280]	; (8001b40 <HAL_GPIO_Init+0x2a8>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a30:	4a44      	ldr	r2, [pc, #272]	; (8001b44 <HAL_GPIO_Init+0x2ac>)
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	089b      	lsrs	r3, r3, #2
 8001a36:	3302      	adds	r3, #2
 8001a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	220f      	movs	r2, #15
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	4013      	ands	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a3c      	ldr	r2, [pc, #240]	; (8001b48 <HAL_GPIO_Init+0x2b0>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d01f      	beq.n	8001a9c <HAL_GPIO_Init+0x204>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a3b      	ldr	r2, [pc, #236]	; (8001b4c <HAL_GPIO_Init+0x2b4>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d019      	beq.n	8001a98 <HAL_GPIO_Init+0x200>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a3a      	ldr	r2, [pc, #232]	; (8001b50 <HAL_GPIO_Init+0x2b8>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d013      	beq.n	8001a94 <HAL_GPIO_Init+0x1fc>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a39      	ldr	r2, [pc, #228]	; (8001b54 <HAL_GPIO_Init+0x2bc>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d00d      	beq.n	8001a90 <HAL_GPIO_Init+0x1f8>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a38      	ldr	r2, [pc, #224]	; (8001b58 <HAL_GPIO_Init+0x2c0>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d007      	beq.n	8001a8c <HAL_GPIO_Init+0x1f4>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a37      	ldr	r2, [pc, #220]	; (8001b5c <HAL_GPIO_Init+0x2c4>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d101      	bne.n	8001a88 <HAL_GPIO_Init+0x1f0>
 8001a84:	2305      	movs	r3, #5
 8001a86:	e00a      	b.n	8001a9e <HAL_GPIO_Init+0x206>
 8001a88:	2306      	movs	r3, #6
 8001a8a:	e008      	b.n	8001a9e <HAL_GPIO_Init+0x206>
 8001a8c:	2304      	movs	r3, #4
 8001a8e:	e006      	b.n	8001a9e <HAL_GPIO_Init+0x206>
 8001a90:	2303      	movs	r3, #3
 8001a92:	e004      	b.n	8001a9e <HAL_GPIO_Init+0x206>
 8001a94:	2302      	movs	r3, #2
 8001a96:	e002      	b.n	8001a9e <HAL_GPIO_Init+0x206>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <HAL_GPIO_Init+0x206>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa0:	f002 0203 	and.w	r2, r2, #3
 8001aa4:	0092      	lsls	r2, r2, #2
 8001aa6:	4093      	lsls	r3, r2
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001aae:	4925      	ldr	r1, [pc, #148]	; (8001b44 <HAL_GPIO_Init+0x2ac>)
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	089b      	lsrs	r3, r3, #2
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d006      	beq.n	8001ad6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ac8:	4b25      	ldr	r3, [pc, #148]	; (8001b60 <HAL_GPIO_Init+0x2c8>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4924      	ldr	r1, [pc, #144]	; (8001b60 <HAL_GPIO_Init+0x2c8>)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	600b      	str	r3, [r1, #0]
 8001ad4:	e006      	b.n	8001ae4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ad6:	4b22      	ldr	r3, [pc, #136]	; (8001b60 <HAL_GPIO_Init+0x2c8>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	4920      	ldr	r1, [pc, #128]	; (8001b60 <HAL_GPIO_Init+0x2c8>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d006      	beq.n	8001afe <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001af0:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <HAL_GPIO_Init+0x2c8>)
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	491a      	ldr	r1, [pc, #104]	; (8001b60 <HAL_GPIO_Init+0x2c8>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]
 8001afc:	e006      	b.n	8001b0c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001afe:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <HAL_GPIO_Init+0x2c8>)
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	43db      	mvns	r3, r3
 8001b06:	4916      	ldr	r1, [pc, #88]	; (8001b60 <HAL_GPIO_Init+0x2c8>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d025      	beq.n	8001b64 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <HAL_GPIO_Init+0x2c8>)
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	4910      	ldr	r1, [pc, #64]	; (8001b60 <HAL_GPIO_Init+0x2c8>)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	608b      	str	r3, [r1, #8]
 8001b24:	e025      	b.n	8001b72 <HAL_GPIO_Init+0x2da>
 8001b26:	bf00      	nop
 8001b28:	10320000 	.word	0x10320000
 8001b2c:	10310000 	.word	0x10310000
 8001b30:	10220000 	.word	0x10220000
 8001b34:	10210000 	.word	0x10210000
 8001b38:	10120000 	.word	0x10120000
 8001b3c:	10110000 	.word	0x10110000
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40010000 	.word	0x40010000
 8001b48:	40010800 	.word	0x40010800
 8001b4c:	40010c00 	.word	0x40010c00
 8001b50:	40011000 	.word	0x40011000
 8001b54:	40011400 	.word	0x40011400
 8001b58:	40011800 	.word	0x40011800
 8001b5c:	40011c00 	.word	0x40011c00
 8001b60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b64:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <HAL_GPIO_Init+0x324>)
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	4913      	ldr	r1, [pc, #76]	; (8001bbc <HAL_GPIO_Init+0x324>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d006      	beq.n	8001b8c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b7e:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <HAL_GPIO_Init+0x324>)
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	490e      	ldr	r1, [pc, #56]	; (8001bbc <HAL_GPIO_Init+0x324>)
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	60cb      	str	r3, [r1, #12]
 8001b8a:	e006      	b.n	8001b9a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <HAL_GPIO_Init+0x324>)
 8001b8e:	68da      	ldr	r2, [r3, #12]
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	4909      	ldr	r1, [pc, #36]	; (8001bbc <HAL_GPIO_Init+0x324>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f47f ae7e 	bne.w	80018ac <HAL_GPIO_Init+0x14>
  }
}
 8001bb0:	bf00      	nop
 8001bb2:	bf00      	nop
 8001bb4:	372c      	adds	r7, #44	; 0x2c
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr
 8001bbc:	40010400 	.word	0x40010400

08001bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	807b      	strh	r3, [r7, #2]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bd0:	787b      	ldrb	r3, [r7, #1]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bd6:	887a      	ldrh	r2, [r7, #2]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bdc:	e003      	b.n	8001be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bde:	887b      	ldrh	r3, [r7, #2]
 8001be0:	041a      	lsls	r2, r3, #16
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	611a      	str	r2, [r3, #16]
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr

08001bf0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bfa:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bfc:	695a      	ldr	r2, [r3, #20]
 8001bfe:	88fb      	ldrh	r3, [r7, #6]
 8001c00:	4013      	ands	r3, r2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d006      	beq.n	8001c14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c06:	4a05      	ldr	r2, [pc, #20]	; (8001c1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c08:	88fb      	ldrh	r3, [r7, #6]
 8001c0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 f806 	bl	8001c20 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40010400 	.word	0x40010400

08001c20 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr

08001c34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e272      	b.n	800212c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 8087 	beq.w	8001d62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c54:	4b92      	ldr	r3, [pc, #584]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 030c 	and.w	r3, r3, #12
 8001c5c:	2b04      	cmp	r3, #4
 8001c5e:	d00c      	beq.n	8001c7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c60:	4b8f      	ldr	r3, [pc, #572]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 030c 	and.w	r3, r3, #12
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d112      	bne.n	8001c92 <HAL_RCC_OscConfig+0x5e>
 8001c6c:	4b8c      	ldr	r3, [pc, #560]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c78:	d10b      	bne.n	8001c92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c7a:	4b89      	ldr	r3, [pc, #548]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d06c      	beq.n	8001d60 <HAL_RCC_OscConfig+0x12c>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d168      	bne.n	8001d60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e24c      	b.n	800212c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c9a:	d106      	bne.n	8001caa <HAL_RCC_OscConfig+0x76>
 8001c9c:	4b80      	ldr	r3, [pc, #512]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a7f      	ldr	r2, [pc, #508]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	e02e      	b.n	8001d08 <HAL_RCC_OscConfig+0xd4>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10c      	bne.n	8001ccc <HAL_RCC_OscConfig+0x98>
 8001cb2:	4b7b      	ldr	r3, [pc, #492]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a7a      	ldr	r2, [pc, #488]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	4b78      	ldr	r3, [pc, #480]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a77      	ldr	r2, [pc, #476]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	e01d      	b.n	8001d08 <HAL_RCC_OscConfig+0xd4>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cd4:	d10c      	bne.n	8001cf0 <HAL_RCC_OscConfig+0xbc>
 8001cd6:	4b72      	ldr	r3, [pc, #456]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a71      	ldr	r2, [pc, #452]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	4b6f      	ldr	r3, [pc, #444]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a6e      	ldr	r2, [pc, #440]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	e00b      	b.n	8001d08 <HAL_RCC_OscConfig+0xd4>
 8001cf0:	4b6b      	ldr	r3, [pc, #428]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a6a      	ldr	r2, [pc, #424]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	4b68      	ldr	r3, [pc, #416]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a67      	ldr	r2, [pc, #412]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d013      	beq.n	8001d38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d10:	f7ff fcaa 	bl	8001668 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d18:	f7ff fca6 	bl	8001668 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b64      	cmp	r3, #100	; 0x64
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e200      	b.n	800212c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2a:	4b5d      	ldr	r3, [pc, #372]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0xe4>
 8001d36:	e014      	b.n	8001d62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d38:	f7ff fc96 	bl	8001668 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d40:	f7ff fc92 	bl	8001668 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b64      	cmp	r3, #100	; 0x64
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e1ec      	b.n	800212c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d52:	4b53      	ldr	r3, [pc, #332]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x10c>
 8001d5e:	e000      	b.n	8001d62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d063      	beq.n	8001e36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d6e:	4b4c      	ldr	r3, [pc, #304]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 030c 	and.w	r3, r3, #12
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00b      	beq.n	8001d92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d7a:	4b49      	ldr	r3, [pc, #292]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d11c      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x18c>
 8001d86:	4b46      	ldr	r3, [pc, #280]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d116      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d92:	4b43      	ldr	r3, [pc, #268]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d005      	beq.n	8001daa <HAL_RCC_OscConfig+0x176>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d001      	beq.n	8001daa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e1c0      	b.n	800212c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001daa:	4b3d      	ldr	r3, [pc, #244]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	4939      	ldr	r1, [pc, #228]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dbe:	e03a      	b.n	8001e36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d020      	beq.n	8001e0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc8:	4b36      	ldr	r3, [pc, #216]	; (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dce:	f7ff fc4b 	bl	8001668 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd6:	f7ff fc47 	bl	8001668 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e1a1      	b.n	800212c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de8:	4b2d      	ldr	r3, [pc, #180]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0f0      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df4:	4b2a      	ldr	r3, [pc, #168]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	695b      	ldr	r3, [r3, #20]
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	4927      	ldr	r1, [pc, #156]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	600b      	str	r3, [r1, #0]
 8001e08:	e015      	b.n	8001e36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e0a:	4b26      	ldr	r3, [pc, #152]	; (8001ea4 <HAL_RCC_OscConfig+0x270>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e10:	f7ff fc2a 	bl	8001668 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e18:	f7ff fc26 	bl	8001668 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e180      	b.n	800212c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d03a      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d019      	beq.n	8001e7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e4a:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e50:	f7ff fc0a 	bl	8001668 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e58:	f7ff fc06 	bl	8001668 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e160      	b.n	800212c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ea0 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0f0      	beq.n	8001e58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e76:	2001      	movs	r0, #1
 8001e78:	f000 faa6 	bl	80023c8 <RCC_Delay>
 8001e7c:	e01c      	b.n	8001eb8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <HAL_RCC_OscConfig+0x274>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e84:	f7ff fbf0 	bl	8001668 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e8a:	e00f      	b.n	8001eac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e8c:	f7ff fbec 	bl	8001668 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d908      	bls.n	8001eac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e146      	b.n	800212c <HAL_RCC_OscConfig+0x4f8>
 8001e9e:	bf00      	nop
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	42420000 	.word	0x42420000
 8001ea8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eac:	4b92      	ldr	r3, [pc, #584]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1e9      	bne.n	8001e8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 80a6 	beq.w	8002012 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eca:	4b8b      	ldr	r3, [pc, #556]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10d      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed6:	4b88      	ldr	r3, [pc, #544]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	4a87      	ldr	r2, [pc, #540]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	61d3      	str	r3, [r2, #28]
 8001ee2:	4b85      	ldr	r3, [pc, #532]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef2:	4b82      	ldr	r3, [pc, #520]	; (80020fc <HAL_RCC_OscConfig+0x4c8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d118      	bne.n	8001f30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001efe:	4b7f      	ldr	r3, [pc, #508]	; (80020fc <HAL_RCC_OscConfig+0x4c8>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a7e      	ldr	r2, [pc, #504]	; (80020fc <HAL_RCC_OscConfig+0x4c8>)
 8001f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f0a:	f7ff fbad 	bl	8001668 <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f12:	f7ff fba9 	bl	8001668 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b64      	cmp	r3, #100	; 0x64
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e103      	b.n	800212c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f24:	4b75      	ldr	r3, [pc, #468]	; (80020fc <HAL_RCC_OscConfig+0x4c8>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0f0      	beq.n	8001f12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d106      	bne.n	8001f46 <HAL_RCC_OscConfig+0x312>
 8001f38:	4b6f      	ldr	r3, [pc, #444]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	4a6e      	ldr	r2, [pc, #440]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	6213      	str	r3, [r2, #32]
 8001f44:	e02d      	b.n	8001fa2 <HAL_RCC_OscConfig+0x36e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10c      	bne.n	8001f68 <HAL_RCC_OscConfig+0x334>
 8001f4e:	4b6a      	ldr	r3, [pc, #424]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	4a69      	ldr	r2, [pc, #420]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001f54:	f023 0301 	bic.w	r3, r3, #1
 8001f58:	6213      	str	r3, [r2, #32]
 8001f5a:	4b67      	ldr	r3, [pc, #412]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	4a66      	ldr	r2, [pc, #408]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001f60:	f023 0304 	bic.w	r3, r3, #4
 8001f64:	6213      	str	r3, [r2, #32]
 8001f66:	e01c      	b.n	8001fa2 <HAL_RCC_OscConfig+0x36e>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	2b05      	cmp	r3, #5
 8001f6e:	d10c      	bne.n	8001f8a <HAL_RCC_OscConfig+0x356>
 8001f70:	4b61      	ldr	r3, [pc, #388]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	4a60      	ldr	r2, [pc, #384]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001f76:	f043 0304 	orr.w	r3, r3, #4
 8001f7a:	6213      	str	r3, [r2, #32]
 8001f7c:	4b5e      	ldr	r3, [pc, #376]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	4a5d      	ldr	r2, [pc, #372]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	6213      	str	r3, [r2, #32]
 8001f88:	e00b      	b.n	8001fa2 <HAL_RCC_OscConfig+0x36e>
 8001f8a:	4b5b      	ldr	r3, [pc, #364]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	4a5a      	ldr	r2, [pc, #360]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	f023 0301 	bic.w	r3, r3, #1
 8001f94:	6213      	str	r3, [r2, #32]
 8001f96:	4b58      	ldr	r3, [pc, #352]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	4a57      	ldr	r2, [pc, #348]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001f9c:	f023 0304 	bic.w	r3, r3, #4
 8001fa0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d015      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001faa:	f7ff fb5d 	bl	8001668 <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb0:	e00a      	b.n	8001fc8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb2:	f7ff fb59 	bl	8001668 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e0b1      	b.n	800212c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc8:	4b4b      	ldr	r3, [pc, #300]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0ee      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x37e>
 8001fd4:	e014      	b.n	8002000 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd6:	f7ff fb47 	bl	8001668 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fdc:	e00a      	b.n	8001ff4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fde:	f7ff fb43 	bl	8001668 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e09b      	b.n	800212c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff4:	4b40      	ldr	r3, [pc, #256]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1ee      	bne.n	8001fde <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002000:	7dfb      	ldrb	r3, [r7, #23]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d105      	bne.n	8002012 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002006:	4b3c      	ldr	r3, [pc, #240]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	4a3b      	ldr	r2, [pc, #236]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 800200c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002010:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 8087 	beq.w	800212a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800201c:	4b36      	ldr	r3, [pc, #216]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 030c 	and.w	r3, r3, #12
 8002024:	2b08      	cmp	r3, #8
 8002026:	d061      	beq.n	80020ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	2b02      	cmp	r3, #2
 800202e:	d146      	bne.n	80020be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002030:	4b33      	ldr	r3, [pc, #204]	; (8002100 <HAL_RCC_OscConfig+0x4cc>)
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002036:	f7ff fb17 	bl	8001668 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203e:	f7ff fb13 	bl	8001668 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e06d      	b.n	800212c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002050:	4b29      	ldr	r3, [pc, #164]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1f0      	bne.n	800203e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002064:	d108      	bne.n	8002078 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002066:	4b24      	ldr	r3, [pc, #144]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	4921      	ldr	r1, [pc, #132]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 8002074:	4313      	orrs	r3, r2
 8002076:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002078:	4b1f      	ldr	r3, [pc, #124]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a19      	ldr	r1, [r3, #32]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	430b      	orrs	r3, r1
 800208a:	491b      	ldr	r1, [pc, #108]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 800208c:	4313      	orrs	r3, r2
 800208e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002090:	4b1b      	ldr	r3, [pc, #108]	; (8002100 <HAL_RCC_OscConfig+0x4cc>)
 8002092:	2201      	movs	r2, #1
 8002094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002096:	f7ff fae7 	bl	8001668 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800209e:	f7ff fae3 	bl	8001668 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e03d      	b.n	800212c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0f0      	beq.n	800209e <HAL_RCC_OscConfig+0x46a>
 80020bc:	e035      	b.n	800212a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020be:	4b10      	ldr	r3, [pc, #64]	; (8002100 <HAL_RCC_OscConfig+0x4cc>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c4:	f7ff fad0 	bl	8001668 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020cc:	f7ff facc 	bl	8001668 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e026      	b.n	800212c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_RCC_OscConfig+0x4c4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f0      	bne.n	80020cc <HAL_RCC_OscConfig+0x498>
 80020ea:	e01e      	b.n	800212a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d107      	bne.n	8002104 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e019      	b.n	800212c <HAL_RCC_OscConfig+0x4f8>
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40007000 	.word	0x40007000
 8002100:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_RCC_OscConfig+0x500>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	429a      	cmp	r2, r3
 8002116:	d106      	bne.n	8002126 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002122:	429a      	cmp	r2, r3
 8002124:	d001      	beq.n	800212a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40021000 	.word	0x40021000

08002138 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0d0      	b.n	80022ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800214c:	4b6a      	ldr	r3, [pc, #424]	; (80022f8 <HAL_RCC_ClockConfig+0x1c0>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d910      	bls.n	800217c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215a:	4b67      	ldr	r3, [pc, #412]	; (80022f8 <HAL_RCC_ClockConfig+0x1c0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f023 0207 	bic.w	r2, r3, #7
 8002162:	4965      	ldr	r1, [pc, #404]	; (80022f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	4313      	orrs	r3, r2
 8002168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800216a:	4b63      	ldr	r3, [pc, #396]	; (80022f8 <HAL_RCC_ClockConfig+0x1c0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d001      	beq.n	800217c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e0b8      	b.n	80022ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d020      	beq.n	80021ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b00      	cmp	r3, #0
 8002192:	d005      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002194:	4b59      	ldr	r3, [pc, #356]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	4a58      	ldr	r2, [pc, #352]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800219e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0308 	and.w	r3, r3, #8
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d005      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021ac:	4b53      	ldr	r3, [pc, #332]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	4a52      	ldr	r2, [pc, #328]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 80021b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b8:	4b50      	ldr	r3, [pc, #320]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	494d      	ldr	r1, [pc, #308]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d040      	beq.n	8002258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d107      	bne.n	80021ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021de:	4b47      	ldr	r3, [pc, #284]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d115      	bne.n	8002216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e07f      	b.n	80022ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d107      	bne.n	8002206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f6:	4b41      	ldr	r3, [pc, #260]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d109      	bne.n	8002216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e073      	b.n	80022ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002206:	4b3d      	ldr	r3, [pc, #244]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e06b      	b.n	80022ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002216:	4b39      	ldr	r3, [pc, #228]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f023 0203 	bic.w	r2, r3, #3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	4936      	ldr	r1, [pc, #216]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 8002224:	4313      	orrs	r3, r2
 8002226:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002228:	f7ff fa1e 	bl	8001668 <HAL_GetTick>
 800222c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222e:	e00a      	b.n	8002246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002230:	f7ff fa1a 	bl	8001668 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	f241 3288 	movw	r2, #5000	; 0x1388
 800223e:	4293      	cmp	r3, r2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e053      	b.n	80022ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002246:	4b2d      	ldr	r3, [pc, #180]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f003 020c 	and.w	r2, r3, #12
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	429a      	cmp	r2, r3
 8002256:	d1eb      	bne.n	8002230 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002258:	4b27      	ldr	r3, [pc, #156]	; (80022f8 <HAL_RCC_ClockConfig+0x1c0>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d210      	bcs.n	8002288 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002266:	4b24      	ldr	r3, [pc, #144]	; (80022f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 0207 	bic.w	r2, r3, #7
 800226e:	4922      	ldr	r1, [pc, #136]	; (80022f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	4313      	orrs	r3, r2
 8002274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002276:	4b20      	ldr	r3, [pc, #128]	; (80022f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	429a      	cmp	r2, r3
 8002282:	d001      	beq.n	8002288 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e032      	b.n	80022ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b00      	cmp	r3, #0
 8002292:	d008      	beq.n	80022a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002294:	4b19      	ldr	r3, [pc, #100]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	4916      	ldr	r1, [pc, #88]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d009      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022b2:	4b12      	ldr	r3, [pc, #72]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	490e      	ldr	r1, [pc, #56]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022c6:	f000 f821 	bl	800230c <HAL_RCC_GetSysClockFreq>
 80022ca:	4602      	mov	r2, r0
 80022cc:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	490a      	ldr	r1, [pc, #40]	; (8002300 <HAL_RCC_ClockConfig+0x1c8>)
 80022d8:	5ccb      	ldrb	r3, [r1, r3]
 80022da:	fa22 f303 	lsr.w	r3, r2, r3
 80022de:	4a09      	ldr	r2, [pc, #36]	; (8002304 <HAL_RCC_ClockConfig+0x1cc>)
 80022e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <HAL_RCC_ClockConfig+0x1d0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff f97c 	bl	80015e4 <HAL_InitTick>

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40022000 	.word	0x40022000
 80022fc:	40021000 	.word	0x40021000
 8002300:	08002d20 	.word	0x08002d20
 8002304:	20000000 	.word	0x20000000
 8002308:	20000004 	.word	0x20000004

0800230c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800230c:	b490      	push	{r4, r7}
 800230e:	b08a      	sub	sp, #40	; 0x28
 8002310:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002312:	4b29      	ldr	r3, [pc, #164]	; (80023b8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002314:	1d3c      	adds	r4, r7, #4
 8002316:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002318:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800231c:	f240 2301 	movw	r3, #513	; 0x201
 8002320:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002322:	2300      	movs	r3, #0
 8002324:	61fb      	str	r3, [r7, #28]
 8002326:	2300      	movs	r3, #0
 8002328:	61bb      	str	r3, [r7, #24]
 800232a:	2300      	movs	r3, #0
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002332:	2300      	movs	r3, #0
 8002334:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002336:	4b21      	ldr	r3, [pc, #132]	; (80023bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	2b04      	cmp	r3, #4
 8002344:	d002      	beq.n	800234c <HAL_RCC_GetSysClockFreq+0x40>
 8002346:	2b08      	cmp	r3, #8
 8002348:	d003      	beq.n	8002352 <HAL_RCC_GetSysClockFreq+0x46>
 800234a:	e02b      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800234c:	4b1c      	ldr	r3, [pc, #112]	; (80023c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800234e:	623b      	str	r3, [r7, #32]
      break;
 8002350:	e02b      	b.n	80023aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	0c9b      	lsrs	r3, r3, #18
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	3328      	adds	r3, #40	; 0x28
 800235c:	443b      	add	r3, r7
 800235e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002362:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d012      	beq.n	8002394 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800236e:	4b13      	ldr	r3, [pc, #76]	; (80023bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	0c5b      	lsrs	r3, r3, #17
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	3328      	adds	r3, #40	; 0x28
 800237a:	443b      	add	r3, r7
 800237c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002380:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	4a0e      	ldr	r2, [pc, #56]	; (80023c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002386:	fb03 f202 	mul.w	r2, r3, r2
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002390:	627b      	str	r3, [r7, #36]	; 0x24
 8002392:	e004      	b.n	800239e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	4a0b      	ldr	r2, [pc, #44]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002398:	fb02 f303 	mul.w	r3, r2, r3
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	623b      	str	r3, [r7, #32]
      break;
 80023a2:	e002      	b.n	80023aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023a4:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023a6:	623b      	str	r3, [r7, #32]
      break;
 80023a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023aa:	6a3b      	ldr	r3, [r7, #32]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3728      	adds	r7, #40	; 0x28
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc90      	pop	{r4, r7}
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	08002720 	.word	0x08002720
 80023bc:	40021000 	.word	0x40021000
 80023c0:	007a1200 	.word	0x007a1200
 80023c4:	003d0900 	.word	0x003d0900

080023c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023d0:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <RCC_Delay+0x34>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <RCC_Delay+0x38>)
 80023d6:	fba2 2303 	umull	r2, r3, r2, r3
 80023da:	0a5b      	lsrs	r3, r3, #9
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	fb02 f303 	mul.w	r3, r2, r3
 80023e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023e4:	bf00      	nop
  }
  while (Delay --);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	1e5a      	subs	r2, r3, #1
 80023ea:	60fa      	str	r2, [r7, #12]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1f9      	bne.n	80023e4 <RCC_Delay+0x1c>
}
 80023f0:	bf00      	nop
 80023f2:	bf00      	nop
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr
 80023fc:	20000000 	.word	0x20000000
 8002400:	10624dd3 	.word	0x10624dd3

08002404 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d004      	beq.n	8002420 <HAL_SRAM_Init+0x1c>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800241e:	d101      	bne.n	8002424 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e038      	b.n	8002496 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d106      	bne.n	800243e <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f7ff f827 	bl	800148c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	3308      	adds	r3, #8
 8002446:	4619      	mov	r1, r3
 8002448:	4610      	mov	r0, r2
 800244a:	f000 f829 	bl	80024a0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	461a      	mov	r2, r3
 8002458:	68b9      	ldr	r1, [r7, #8]
 800245a:	f000 f88b 	bl	8002574 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6858      	ldr	r0, [r3, #4]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	f000 f8b6 	bl	80025dc <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	6892      	ldr	r2, [r2, #8]
 8002478:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	6892      	ldr	r2, [r2, #8]
 8002484:	f041 0101 	orr.w	r1, r1, #1
 8002488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b087      	sub	sp, #28
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	f023 0101 	bic.w	r1, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d102      	bne.n	80024d0 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80024ca:	2340      	movs	r3, #64	; 0x40
 80024cc:	617b      	str	r3, [r7, #20]
 80024ce:	e001      	b.n	80024d4 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80024e0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80024e6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80024ec:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80024f2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80024f8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80024fe:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8002504:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800250a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8002510:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8002516:	4313      	orrs	r3, r2
 8002518:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	4313      	orrs	r3, r2
 800252c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 800252e:	4b10      	ldr	r3, [pc, #64]	; (8002570 <FSMC_NORSRAM_Init+0xd0>)
 8002530:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002538:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8002540:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	43db      	mvns	r3, r3
 8002550:	ea02 0103 	and.w	r1, r2, r3
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	4319      	orrs	r1, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	371c      	adds	r7, #28
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	0008fb7f 	.word	0x0008fb7f

08002574 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800258a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	431a      	orrs	r2, r3
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	021b      	lsls	r3, r3, #8
 80025a0:	431a      	orrs	r2, r3
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	041b      	lsls	r3, r3, #16
 80025a8:	431a      	orrs	r2, r3
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	051b      	lsls	r3, r3, #20
 80025b2:	431a      	orrs	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	3b02      	subs	r3, #2
 80025ba:	061b      	lsls	r3, r3, #24
 80025bc:	431a      	orrs	r2, r3
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	3201      	adds	r2, #1
 80025c8:	4319      	orrs	r1, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
 80025e8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025f0:	d11d      	bne.n	800262e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80025fa:	4b13      	ldr	r3, [pc, #76]	; (8002648 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80025fc:	4013      	ands	r3, r2
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	6811      	ldr	r1, [r2, #0]
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	6852      	ldr	r2, [r2, #4]
 8002606:	0112      	lsls	r2, r2, #4
 8002608:	4311      	orrs	r1, r2
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	6892      	ldr	r2, [r2, #8]
 800260e:	0212      	lsls	r2, r2, #8
 8002610:	4311      	orrs	r1, r2
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	6992      	ldr	r2, [r2, #24]
 8002616:	4311      	orrs	r1, r2
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	68d2      	ldr	r2, [r2, #12]
 800261c:	0412      	lsls	r2, r2, #16
 800261e:	430a      	orrs	r2, r1
 8002620:	ea43 0102 	orr.w	r1, r3, r2
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800262c:	e005      	b.n	800263a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8002636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	cff00000 	.word	0xcff00000

0800264c <__libc_init_array>:
 800264c:	b570      	push	{r4, r5, r6, lr}
 800264e:	2600      	movs	r6, #0
 8002650:	4d0c      	ldr	r5, [pc, #48]	; (8002684 <__libc_init_array+0x38>)
 8002652:	4c0d      	ldr	r4, [pc, #52]	; (8002688 <__libc_init_array+0x3c>)
 8002654:	1b64      	subs	r4, r4, r5
 8002656:	10a4      	asrs	r4, r4, #2
 8002658:	42a6      	cmp	r6, r4
 800265a:	d109      	bne.n	8002670 <__libc_init_array+0x24>
 800265c:	f000 f830 	bl	80026c0 <_init>
 8002660:	2600      	movs	r6, #0
 8002662:	4d0a      	ldr	r5, [pc, #40]	; (800268c <__libc_init_array+0x40>)
 8002664:	4c0a      	ldr	r4, [pc, #40]	; (8002690 <__libc_init_array+0x44>)
 8002666:	1b64      	subs	r4, r4, r5
 8002668:	10a4      	asrs	r4, r4, #2
 800266a:	42a6      	cmp	r6, r4
 800266c:	d105      	bne.n	800267a <__libc_init_array+0x2e>
 800266e:	bd70      	pop	{r4, r5, r6, pc}
 8002670:	f855 3b04 	ldr.w	r3, [r5], #4
 8002674:	4798      	blx	r3
 8002676:	3601      	adds	r6, #1
 8002678:	e7ee      	b.n	8002658 <__libc_init_array+0xc>
 800267a:	f855 3b04 	ldr.w	r3, [r5], #4
 800267e:	4798      	blx	r3
 8002680:	3601      	adds	r6, #1
 8002682:	e7f2      	b.n	800266a <__libc_init_array+0x1e>
 8002684:	08002d30 	.word	0x08002d30
 8002688:	08002d30 	.word	0x08002d30
 800268c:	08002d30 	.word	0x08002d30
 8002690:	08002d34 	.word	0x08002d34

08002694 <memcpy>:
 8002694:	440a      	add	r2, r1
 8002696:	4291      	cmp	r1, r2
 8002698:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800269c:	d100      	bne.n	80026a0 <memcpy+0xc>
 800269e:	4770      	bx	lr
 80026a0:	b510      	push	{r4, lr}
 80026a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80026a6:	4291      	cmp	r1, r2
 80026a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80026ac:	d1f9      	bne.n	80026a2 <memcpy+0xe>
 80026ae:	bd10      	pop	{r4, pc}

080026b0 <memset>:
 80026b0:	4603      	mov	r3, r0
 80026b2:	4402      	add	r2, r0
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d100      	bne.n	80026ba <memset+0xa>
 80026b8:	4770      	bx	lr
 80026ba:	f803 1b01 	strb.w	r1, [r3], #1
 80026be:	e7f9      	b.n	80026b4 <memset+0x4>

080026c0 <_init>:
 80026c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026c2:	bf00      	nop
 80026c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026c6:	bc08      	pop	{r3}
 80026c8:	469e      	mov	lr, r3
 80026ca:	4770      	bx	lr

080026cc <_fini>:
 80026cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ce:	bf00      	nop
 80026d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026d2:	bc08      	pop	{r3}
 80026d4:	469e      	mov	lr, r3
 80026d6:	4770      	bx	lr
