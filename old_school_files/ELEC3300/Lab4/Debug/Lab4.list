
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002560  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002744  08002744  00012744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002764  08002764  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002764  08002764  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002764  08002764  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002764  08002764  00012764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002768  08002768  00012768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800276c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08002778  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08002778  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007bbb  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001417  00000000  00000000  00027bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  00029008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000890  00000000  00000000  00029940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018515  00000000  00000000  0002a1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009452  00000000  00000000  000426e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000920e3  00000000  00000000  0004bb37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ddc1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002604  00000000  00000000  000ddc6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	0800272c 	.word	0x0800272c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	0800272c 	.word	0x0800272c

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000228:	f000 fc06 	bl	8000a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022c:	f000 f89c 	bl	8000368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000230:	f000 fa4c 	bl	80006cc <MX_GPIO_Init>
  MX_TIM3_Init();
 8000234:	f000 f95a 	bl	80004ec <MX_TIM3_Init>
  MX_TIM4_Init();
 8000238:	f000 f9ce 	bl	80005d8 <MX_TIM4_Init>
  MX_TIM2_Init();
 800023c:	f000 f8e0 	bl	8000400 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // task 2
  // z=9, so freq = 90kHz
  // y=4, so duty cycle is 40%
  // using Pin A6 for timer 3
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000240:	2100      	movs	r1, #0
 8000242:	4844      	ldr	r0, [pc, #272]	; (8000354 <main+0x130>)
 8000244:	f001 fbee 	bl	8001a24 <HAL_TIM_PWM_Start>
  // task 3
  // w = 1, so freq = 100hz
  // x = 6, so duty cycle is 60%
  // using B6 for timer 4
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000248:	2100      	movs	r1, #0
 800024a:	4843      	ldr	r0, [pc, #268]	; (8000358 <main+0x134>)
 800024c:	f001 fbea 	bl	8001a24 <HAL_TIM_PWM_Start>

  //task 5
  // using A2 for timer 2, also using channel 3 cause of gpio
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000250:	2108      	movs	r1, #8
 8000252:	4842      	ldr	r0, [pc, #264]	; (800035c <main+0x138>)
 8000254:	f001 fbe6 	bl	8001a24 <HAL_TIM_PWM_Start>
  // reset motor to middle
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 75);
 8000258:	4b40      	ldr	r3, [pc, #256]	; (800035c <main+0x138>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	224b      	movs	r2, #75	; 0x4b
 800025e:	63da      	str	r2, [r3, #60]	; 0x3c
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Turn 30 degrees if K1 pressed
	  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==1 && HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0)
 8000260:	2101      	movs	r1, #1
 8000262:	483f      	ldr	r0, [pc, #252]	; (8000360 <main+0x13c>)
 8000264:	f000 fee6 	bl	8001034 <HAL_GPIO_ReadPin>
 8000268:	4603      	mov	r3, r0
 800026a:	2b01      	cmp	r3, #1
 800026c:	d11e      	bne.n	80002ac <main+0x88>
 800026e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000272:	483c      	ldr	r0, [pc, #240]	; (8000364 <main+0x140>)
 8000274:	f000 fede 	bl	8001034 <HAL_GPIO_ReadPin>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d116      	bne.n	80002ac <main+0x88>
	  {
		  //add delay to make sure key press won't get mixed up
		  HAL_Delay(10);
 800027e:	200a      	movs	r0, #10
 8000280:	f000 fc3c 	bl	8000afc <HAL_Delay>
		  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==1 && HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0)
 8000284:	2101      	movs	r1, #1
 8000286:	4836      	ldr	r0, [pc, #216]	; (8000360 <main+0x13c>)
 8000288:	f000 fed4 	bl	8001034 <HAL_GPIO_ReadPin>
 800028c:	4603      	mov	r3, r0
 800028e:	2b01      	cmp	r3, #1
 8000290:	d158      	bne.n	8000344 <main+0x120>
 8000292:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000296:	4833      	ldr	r0, [pc, #204]	; (8000364 <main+0x140>)
 8000298:	f000 fecc 	bl	8001034 <HAL_GPIO_ReadPin>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d150      	bne.n	8000344 <main+0x120>
		  {
			  // since period is 1000 (ARR), and 30 degrees is around 1.83 ms, so dyty cycle is around 9.2% (1.83/20) so CRR is 0.092*1000= around 92
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 92);
 80002a2:	4b2e      	ldr	r3, [pc, #184]	; (800035c <main+0x138>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	225c      	movs	r2, #92	; 0x5c
 80002a8:	63da      	str	r2, [r3, #60]	; 0x3c
		  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==1 && HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0)
 80002aa:	e04b      	b.n	8000344 <main+0x120>
		  }

	  }
	  else if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1 && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==0)
 80002ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002b0:	482c      	ldr	r0, [pc, #176]	; (8000364 <main+0x140>)
 80002b2:	f000 febf 	bl	8001034 <HAL_GPIO_ReadPin>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b01      	cmp	r3, #1
 80002ba:	d11d      	bne.n	80002f8 <main+0xd4>
 80002bc:	2101      	movs	r1, #1
 80002be:	4828      	ldr	r0, [pc, #160]	; (8000360 <main+0x13c>)
 80002c0:	f000 feb8 	bl	8001034 <HAL_GPIO_ReadPin>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d116      	bne.n	80002f8 <main+0xd4>
	  {
		  //add delay to make sure key press won't get mixed up
		  HAL_Delay(10);
 80002ca:	200a      	movs	r0, #10
 80002cc:	f000 fc16 	bl	8000afc <HAL_Delay>
		  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==0 && HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 80002d0:	2101      	movs	r1, #1
 80002d2:	4823      	ldr	r0, [pc, #140]	; (8000360 <main+0x13c>)
 80002d4:	f000 feae 	bl	8001034 <HAL_GPIO_ReadPin>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d134      	bne.n	8000348 <main+0x124>
 80002de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002e2:	4820      	ldr	r0, [pc, #128]	; (8000364 <main+0x140>)
 80002e4:	f000 fea6 	bl	8001034 <HAL_GPIO_ReadPin>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b01      	cmp	r3, #1
 80002ec:	d12c      	bne.n	8000348 <main+0x124>
		  {
			  // since period is 1000 (ARR), and -30 degrees is around 1.166 ms, so dyty cycle is around 5.83% (1.166/20) so CRR is 0.058*1000= around 58
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 58);
 80002ee:	4b1b      	ldr	r3, [pc, #108]	; (800035c <main+0x138>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	223a      	movs	r2, #58	; 0x3a
 80002f4:	63da      	str	r2, [r3, #60]	; 0x3c
		  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==0 && HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 80002f6:	e027      	b.n	8000348 <main+0x124>
		  }

	  }
	  else if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==1 && HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 80002f8:	2101      	movs	r1, #1
 80002fa:	4819      	ldr	r0, [pc, #100]	; (8000360 <main+0x13c>)
 80002fc:	f000 fe9a 	bl	8001034 <HAL_GPIO_ReadPin>
 8000300:	4603      	mov	r3, r0
 8000302:	2b01      	cmp	r3, #1
 8000304:	d121      	bne.n	800034a <main+0x126>
 8000306:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800030a:	4816      	ldr	r0, [pc, #88]	; (8000364 <main+0x140>)
 800030c:	f000 fe92 	bl	8001034 <HAL_GPIO_ReadPin>
 8000310:	4603      	mov	r3, r0
 8000312:	2b01      	cmp	r3, #1
 8000314:	d119      	bne.n	800034a <main+0x126>
	  {
		  //add delay to make sure key press won't get mixed up
		  HAL_Delay(10);
 8000316:	200a      	movs	r0, #10
 8000318:	f000 fbf0 	bl	8000afc <HAL_Delay>
		  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==1 && HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 800031c:	2101      	movs	r1, #1
 800031e:	4810      	ldr	r0, [pc, #64]	; (8000360 <main+0x13c>)
 8000320:	f000 fe88 	bl	8001034 <HAL_GPIO_ReadPin>
 8000324:	4603      	mov	r3, r0
 8000326:	2b01      	cmp	r3, #1
 8000328:	d10f      	bne.n	800034a <main+0x126>
 800032a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800032e:	480d      	ldr	r0, [pc, #52]	; (8000364 <main+0x140>)
 8000330:	f000 fe80 	bl	8001034 <HAL_GPIO_ReadPin>
 8000334:	4603      	mov	r3, r0
 8000336:	2b01      	cmp	r3, #1
 8000338:	d107      	bne.n	800034a <main+0x126>
		  {
			  // since 1.5 ms pulse set motor to middle, so duty cycle is 1.5/20 = 0.075 so CRR = 75
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 75);
 800033a:	4b08      	ldr	r3, [pc, #32]	; (800035c <main+0x138>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	224b      	movs	r2, #75	; 0x4b
 8000340:	63da      	str	r2, [r3, #60]	; 0x3c
 8000342:	e002      	b.n	800034a <main+0x126>
		  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==1 && HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0)
 8000344:	bf00      	nop
 8000346:	e000      	b.n	800034a <main+0x126>
		  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==0 && HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8000348:	bf00      	nop
		  }
	  }
	  //add delay to make sure key press won't get mixed up
	  HAL_Delay(50);
 800034a:	2032      	movs	r0, #50	; 0x32
 800034c:	f000 fbd6 	bl	8000afc <HAL_Delay>
	  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==1 && HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0)
 8000350:	e786      	b.n	8000260 <main+0x3c>
 8000352:	bf00      	nop
 8000354:	20000070 	.word	0x20000070
 8000358:	200000b8 	.word	0x200000b8
 800035c:	20000028 	.word	0x20000028
 8000360:	40010800 	.word	0x40010800
 8000364:	40011000 	.word	0x40011000

08000368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b090      	sub	sp, #64	; 0x40
 800036c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036e:	f107 0318 	add.w	r3, r7, #24
 8000372:	2228      	movs	r2, #40	; 0x28
 8000374:	2100      	movs	r1, #0
 8000376:	4618      	mov	r0, r3
 8000378:	f002 f9d0 	bl	800271c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]
 8000388:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800038a:	2301      	movs	r3, #1
 800038c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800038e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000392:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000394:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000398:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800039a:	2301      	movs	r3, #1
 800039c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800039e:	2302      	movs	r3, #2
 80003a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80003a8:	2300      	movs	r3, #0
 80003aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ac:	f107 0318 	add.w	r3, r7, #24
 80003b0:	4618      	mov	r0, r3
 80003b2:	f000 fe6f 	bl	8001094 <HAL_RCC_OscConfig>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003bc:	f000 f9fa 	bl	80007b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c0:	230f      	movs	r3, #15
 80003c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c4:	2302      	movs	r3, #2
 80003c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c8:	2300      	movs	r3, #0
 80003ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d2:	2300      	movs	r3, #0
 80003d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	2100      	movs	r1, #0
 80003da:	4618      	mov	r0, r3
 80003dc:	f001 f8dc 	bl	8001598 <HAL_RCC_ClockConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003e6:	f000 f9e5 	bl	80007b4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80003ea:	2200      	movs	r2, #0
 80003ec:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80003f0:	2000      	movs	r0, #0
 80003f2:	f001 f9bb 	bl	800176c <HAL_RCC_MCOConfig>
}
 80003f6:	bf00      	nop
 80003f8:	3740      	adds	r7, #64	; 0x40
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
	...

08000400 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b08e      	sub	sp, #56	; 0x38
 8000404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000406:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
 800040e:	605a      	str	r2, [r3, #4]
 8000410:	609a      	str	r2, [r3, #8]
 8000412:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000414:	f107 0320 	add.w	r3, r7, #32
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
 8000424:	605a      	str	r2, [r3, #4]
 8000426:	609a      	str	r2, [r3, #8]
 8000428:	60da      	str	r2, [r3, #12]
 800042a:	611a      	str	r2, [r3, #16]
 800042c:	615a      	str	r2, [r3, #20]
 800042e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000430:	4b2d      	ldr	r3, [pc, #180]	; (80004e8 <MX_TIM2_Init+0xe8>)
 8000432:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000436:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 160;
 8000438:	4b2b      	ldr	r3, [pc, #172]	; (80004e8 <MX_TIM2_Init+0xe8>)
 800043a:	22a0      	movs	r2, #160	; 0xa0
 800043c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800043e:	4b2a      	ldr	r3, [pc, #168]	; (80004e8 <MX_TIM2_Init+0xe8>)
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000444:	4b28      	ldr	r3, [pc, #160]	; (80004e8 <MX_TIM2_Init+0xe8>)
 8000446:	f240 32e7 	movw	r2, #999	; 0x3e7
 800044a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800044c:	4b26      	ldr	r3, [pc, #152]	; (80004e8 <MX_TIM2_Init+0xe8>)
 800044e:	2200      	movs	r2, #0
 8000450:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000452:	4b25      	ldr	r3, [pc, #148]	; (80004e8 <MX_TIM2_Init+0xe8>)
 8000454:	2200      	movs	r2, #0
 8000456:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000458:	4823      	ldr	r0, [pc, #140]	; (80004e8 <MX_TIM2_Init+0xe8>)
 800045a:	f001 fa3b 	bl	80018d4 <HAL_TIM_Base_Init>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000464:	f000 f9a6 	bl	80007b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800046c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800046e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000472:	4619      	mov	r1, r3
 8000474:	481c      	ldr	r0, [pc, #112]	; (80004e8 <MX_TIM2_Init+0xe8>)
 8000476:	f001 fc4d 	bl	8001d14 <HAL_TIM_ConfigClockSource>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000480:	f000 f998 	bl	80007b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000484:	4818      	ldr	r0, [pc, #96]	; (80004e8 <MX_TIM2_Init+0xe8>)
 8000486:	f001 fa74 	bl	8001972 <HAL_TIM_PWM_Init>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000490:	f000 f990 	bl	80007b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000494:	2300      	movs	r3, #0
 8000496:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000498:	2300      	movs	r3, #0
 800049a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800049c:	f107 0320 	add.w	r3, r7, #32
 80004a0:	4619      	mov	r1, r3
 80004a2:	4811      	ldr	r0, [pc, #68]	; (80004e8 <MX_TIM2_Init+0xe8>)
 80004a4:	f002 f8aa 	bl	80025fc <HAL_TIMEx_MasterConfigSynchronization>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80004ae:	f000 f981 	bl	80007b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004b2:	2360      	movs	r3, #96	; 0x60
 80004b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80004b6:	2300      	movs	r3, #0
 80004b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004ba:	2300      	movs	r3, #0
 80004bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004be:	2300      	movs	r3, #0
 80004c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	2208      	movs	r2, #8
 80004c6:	4619      	mov	r1, r3
 80004c8:	4807      	ldr	r0, [pc, #28]	; (80004e8 <MX_TIM2_Init+0xe8>)
 80004ca:	f001 fb65 	bl	8001b98 <HAL_TIM_PWM_ConfigChannel>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80004d4:	f000 f96e 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80004d8:	4803      	ldr	r0, [pc, #12]	; (80004e8 <MX_TIM2_Init+0xe8>)
 80004da:	f000 f9e7 	bl	80008ac <HAL_TIM_MspPostInit>

}
 80004de:	bf00      	nop
 80004e0:	3738      	adds	r7, #56	; 0x38
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000028 	.word	0x20000028

080004ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b08e      	sub	sp, #56	; 0x38
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]
 80004fc:	609a      	str	r2, [r3, #8]
 80004fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000500:	f107 0320 	add.w	r3, r7, #32
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]
 8000518:	615a      	str	r2, [r3, #20]
 800051a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800051c:	4b2c      	ldr	r3, [pc, #176]	; (80005d0 <MX_TIM3_Init+0xe4>)
 800051e:	4a2d      	ldr	r2, [pc, #180]	; (80005d4 <MX_TIM3_Init+0xe8>)
 8000520:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000522:	4b2b      	ldr	r3, [pc, #172]	; (80005d0 <MX_TIM3_Init+0xe4>)
 8000524:	2200      	movs	r2, #0
 8000526:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000528:	4b29      	ldr	r3, [pc, #164]	; (80005d0 <MX_TIM3_Init+0xe4>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 88;
 800052e:	4b28      	ldr	r3, [pc, #160]	; (80005d0 <MX_TIM3_Init+0xe4>)
 8000530:	2258      	movs	r2, #88	; 0x58
 8000532:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000534:	4b26      	ldr	r3, [pc, #152]	; (80005d0 <MX_TIM3_Init+0xe4>)
 8000536:	2200      	movs	r2, #0
 8000538:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800053a:	4b25      	ldr	r3, [pc, #148]	; (80005d0 <MX_TIM3_Init+0xe4>)
 800053c:	2200      	movs	r2, #0
 800053e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000540:	4823      	ldr	r0, [pc, #140]	; (80005d0 <MX_TIM3_Init+0xe4>)
 8000542:	f001 f9c7 	bl	80018d4 <HAL_TIM_Base_Init>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800054c:	f000 f932 	bl	80007b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000550:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000554:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000556:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800055a:	4619      	mov	r1, r3
 800055c:	481c      	ldr	r0, [pc, #112]	; (80005d0 <MX_TIM3_Init+0xe4>)
 800055e:	f001 fbd9 	bl	8001d14 <HAL_TIM_ConfigClockSource>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000568:	f000 f924 	bl	80007b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800056c:	4818      	ldr	r0, [pc, #96]	; (80005d0 <MX_TIM3_Init+0xe4>)
 800056e:	f001 fa00 	bl	8001972 <HAL_TIM_PWM_Init>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000578:	f000 f91c 	bl	80007b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800057c:	2320      	movs	r3, #32
 800057e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000584:	f107 0320 	add.w	r3, r7, #32
 8000588:	4619      	mov	r1, r3
 800058a:	4811      	ldr	r0, [pc, #68]	; (80005d0 <MX_TIM3_Init+0xe4>)
 800058c:	f002 f836 	bl	80025fc <HAL_TIMEx_MasterConfigSynchronization>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000596:	f000 f90d 	bl	80007b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800059a:	2360      	movs	r3, #96	; 0x60
 800059c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 35;
 800059e:	2323      	movs	r3, #35	; 0x23
 80005a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	2200      	movs	r2, #0
 80005ae:	4619      	mov	r1, r3
 80005b0:	4807      	ldr	r0, [pc, #28]	; (80005d0 <MX_TIM3_Init+0xe4>)
 80005b2:	f001 faf1 	bl	8001b98 <HAL_TIM_PWM_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80005bc:	f000 f8fa 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80005c0:	4803      	ldr	r0, [pc, #12]	; (80005d0 <MX_TIM3_Init+0xe4>)
 80005c2:	f000 f973 	bl	80008ac <HAL_TIM_MspPostInit>

}
 80005c6:	bf00      	nop
 80005c8:	3738      	adds	r7, #56	; 0x38
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000070 	.word	0x20000070
 80005d4:	40000400 	.word	0x40000400

080005d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08e      	sub	sp, #56	; 0x38
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80005de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005f8:	463b      	mov	r3, r7
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]
 8000606:	615a      	str	r2, [r3, #20]
 8000608:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800060a:	4b2e      	ldr	r3, [pc, #184]	; (80006c4 <MX_TIM4_Init+0xec>)
 800060c:	4a2e      	ldr	r2, [pc, #184]	; (80006c8 <MX_TIM4_Init+0xf0>)
 800060e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000610:	4b2c      	ldr	r3, [pc, #176]	; (80006c4 <MX_TIM4_Init+0xec>)
 8000612:	2200      	movs	r2, #0
 8000614:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000616:	4b2b      	ldr	r3, [pc, #172]	; (80006c4 <MX_TIM4_Init+0xec>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 900-1;
 800061c:	4b29      	ldr	r3, [pc, #164]	; (80006c4 <MX_TIM4_Init+0xec>)
 800061e:	f240 3283 	movw	r2, #899	; 0x383
 8000622:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000624:	4b27      	ldr	r3, [pc, #156]	; (80006c4 <MX_TIM4_Init+0xec>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800062a:	4b26      	ldr	r3, [pc, #152]	; (80006c4 <MX_TIM4_Init+0xec>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000630:	4824      	ldr	r0, [pc, #144]	; (80006c4 <MX_TIM4_Init+0xec>)
 8000632:	f001 f94f 	bl	80018d4 <HAL_TIM_Base_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800063c:	f000 f8ba 	bl	80007b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000640:	4820      	ldr	r0, [pc, #128]	; (80006c4 <MX_TIM4_Init+0xec>)
 8000642:	f001 f996 	bl	8001972 <HAL_TIM_PWM_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800064c:	f000 f8b2 	bl	80007b4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000650:	2307      	movs	r3, #7
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8000654:	2320      	movs	r3, #32
 8000656:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800065c:	4619      	mov	r1, r3
 800065e:	4819      	ldr	r0, [pc, #100]	; (80006c4 <MX_TIM4_Init+0xec>)
 8000660:	f001 fc1c 	bl	8001e9c <HAL_TIM_SlaveConfigSynchro>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800066a:	f000 f8a3 	bl	80007b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000672:	2300      	movs	r3, #0
 8000674:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000676:	f107 031c 	add.w	r3, r7, #28
 800067a:	4619      	mov	r1, r3
 800067c:	4811      	ldr	r0, [pc, #68]	; (80006c4 <MX_TIM4_Init+0xec>)
 800067e:	f001 ffbd 	bl	80025fc <HAL_TIMEx_MasterConfigSynchronization>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000688:	f000 f894 	bl	80007b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800068c:	2360      	movs	r3, #96	; 0x60
 800068e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 540;
 8000690:	f44f 7307 	mov.w	r3, #540	; 0x21c
 8000694:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000696:	2300      	movs	r3, #0
 8000698:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800069e:	463b      	mov	r3, r7
 80006a0:	2200      	movs	r2, #0
 80006a2:	4619      	mov	r1, r3
 80006a4:	4807      	ldr	r0, [pc, #28]	; (80006c4 <MX_TIM4_Init+0xec>)
 80006a6:	f001 fa77 	bl	8001b98 <HAL_TIM_PWM_ConfigChannel>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 80006b0:	f000 f880 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80006b4:	4803      	ldr	r0, [pc, #12]	; (80006c4 <MX_TIM4_Init+0xec>)
 80006b6:	f000 f8f9 	bl	80008ac <HAL_TIM_MspPostInit>

}
 80006ba:	bf00      	nop
 80006bc:	3738      	adds	r7, #56	; 0x38
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	200000b8 	.word	0x200000b8
 80006c8:	40000800 	.word	0x40000800

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 0310 	add.w	r3, r7, #16
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e0:	4b30      	ldr	r3, [pc, #192]	; (80007a4 <MX_GPIO_Init+0xd8>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4a2f      	ldr	r2, [pc, #188]	; (80007a4 <MX_GPIO_Init+0xd8>)
 80006e6:	f043 0310 	orr.w	r3, r3, #16
 80006ea:	6193      	str	r3, [r2, #24]
 80006ec:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <MX_GPIO_Init+0xd8>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	f003 0310 	and.w	r3, r3, #16
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f8:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <MX_GPIO_Init+0xd8>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a29      	ldr	r2, [pc, #164]	; (80007a4 <MX_GPIO_Init+0xd8>)
 80006fe:	f043 0304 	orr.w	r3, r3, #4
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <MX_GPIO_Init+0xd8>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f003 0304 	and.w	r3, r3, #4
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000710:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <MX_GPIO_Init+0xd8>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	4a23      	ldr	r2, [pc, #140]	; (80007a4 <MX_GPIO_Init+0xd8>)
 8000716:	f043 0308 	orr.w	r3, r3, #8
 800071a:	6193      	str	r3, [r2, #24]
 800071c:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <MX_GPIO_Init+0xd8>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	f003 0308 	and.w	r3, r3, #8
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000728:	2201      	movs	r2, #1
 800072a:	2120      	movs	r1, #32
 800072c:	481e      	ldr	r0, [pc, #120]	; (80007a8 <MX_GPIO_Init+0xdc>)
 800072e:	f000 fc98 	bl	8001062 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000732:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000736:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800073c:	2302      	movs	r3, #2
 800073e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	4619      	mov	r1, r3
 8000746:	4819      	ldr	r0, [pc, #100]	; (80007ac <MX_GPIO_Init+0xe0>)
 8000748:	f000 fae0 	bl	8000d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800074c:	2301      	movs	r3, #1
 800074e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000754:	2302      	movs	r3, #2
 8000756:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000758:	f107 0310 	add.w	r3, r7, #16
 800075c:	4619      	mov	r1, r3
 800075e:	4814      	ldr	r0, [pc, #80]	; (80007b0 <MX_GPIO_Init+0xe4>)
 8000760:	f000 fad4 	bl	8000d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000764:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000768:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076a:	2302      	movs	r3, #2
 800076c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800076e:	2303      	movs	r3, #3
 8000770:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000772:	f107 0310 	add.w	r3, r7, #16
 8000776:	4619      	mov	r1, r3
 8000778:	480d      	ldr	r0, [pc, #52]	; (80007b0 <MX_GPIO_Init+0xe4>)
 800077a:	f000 fac7 	bl	8000d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800077e:	2320      	movs	r3, #32
 8000780:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	2301      	movs	r3, #1
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800078a:	2303      	movs	r3, #3
 800078c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078e:	f107 0310 	add.w	r3, r7, #16
 8000792:	4619      	mov	r1, r3
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_GPIO_Init+0xdc>)
 8000796:	f000 fab9 	bl	8000d0c <HAL_GPIO_Init>

}
 800079a:	bf00      	nop
 800079c:	3720      	adds	r7, #32
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40021000 	.word	0x40021000
 80007a8:	40010c00 	.word	0x40010c00
 80007ac:	40011000 	.word	0x40011000
 80007b0:	40010800 	.word	0x40010800

080007b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b8:	b672      	cpsid	i
}
 80007ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007bc:	e7fe      	b.n	80007bc <Error_Handler+0x8>
	...

080007c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <HAL_MspInit+0x5c>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	4a14      	ldr	r2, [pc, #80]	; (800081c <HAL_MspInit+0x5c>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6193      	str	r3, [r2, #24]
 80007d2:	4b12      	ldr	r3, [pc, #72]	; (800081c <HAL_MspInit+0x5c>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <HAL_MspInit+0x5c>)
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	4a0e      	ldr	r2, [pc, #56]	; (800081c <HAL_MspInit+0x5c>)
 80007e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e8:	61d3      	str	r3, [r2, #28]
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <HAL_MspInit+0x5c>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007f6:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <HAL_MspInit+0x60>)
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	4a04      	ldr	r2, [pc, #16]	; (8000820 <HAL_MspInit+0x60>)
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000812:	bf00      	nop
 8000814:	3714      	adds	r7, #20
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr
 800081c:	40021000 	.word	0x40021000
 8000820:	40010000 	.word	0x40010000

08000824 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000824:	b480      	push	{r7}
 8000826:	b087      	sub	sp, #28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000834:	d10c      	bne.n	8000850 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000836:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <HAL_TIM_Base_MspInit+0x7c>)
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	4a19      	ldr	r2, [pc, #100]	; (80008a0 <HAL_TIM_Base_MspInit+0x7c>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	61d3      	str	r3, [r2, #28]
 8000842:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <HAL_TIM_Base_MspInit+0x7c>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800084e:	e022      	b.n	8000896 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a13      	ldr	r2, [pc, #76]	; (80008a4 <HAL_TIM_Base_MspInit+0x80>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d10c      	bne.n	8000874 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <HAL_TIM_Base_MspInit+0x7c>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	4a10      	ldr	r2, [pc, #64]	; (80008a0 <HAL_TIM_Base_MspInit+0x7c>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	61d3      	str	r3, [r2, #28]
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <HAL_TIM_Base_MspInit+0x7c>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]
}
 8000872:	e010      	b.n	8000896 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a0b      	ldr	r2, [pc, #44]	; (80008a8 <HAL_TIM_Base_MspInit+0x84>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d10b      	bne.n	8000896 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <HAL_TIM_Base_MspInit+0x7c>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	4a07      	ldr	r2, [pc, #28]	; (80008a0 <HAL_TIM_Base_MspInit+0x7c>)
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	61d3      	str	r3, [r2, #28]
 800088a:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <HAL_TIM_Base_MspInit+0x7c>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	f003 0304 	and.w	r3, r3, #4
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
}
 8000896:	bf00      	nop
 8000898:	371c      	adds	r7, #28
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr
 80008a0:	40021000 	.word	0x40021000
 80008a4:	40000400 	.word	0x40000400
 80008a8:	40000800 	.word	0x40000800

080008ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	; 0x28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0318 	add.w	r3, r7, #24
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008ca:	d118      	bne.n	80008fe <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008cc:	4b2b      	ldr	r3, [pc, #172]	; (800097c <HAL_TIM_MspPostInit+0xd0>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	4a2a      	ldr	r2, [pc, #168]	; (800097c <HAL_TIM_MspPostInit+0xd0>)
 80008d2:	f043 0304 	orr.w	r3, r3, #4
 80008d6:	6193      	str	r3, [r2, #24]
 80008d8:	4b28      	ldr	r3, [pc, #160]	; (800097c <HAL_TIM_MspPostInit+0xd0>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f003 0304 	and.w	r3, r3, #4
 80008e0:	617b      	str	r3, [r7, #20]
 80008e2:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008e4:	2304      	movs	r3, #4
 80008e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	2302      	movs	r3, #2
 80008ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2302      	movs	r3, #2
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f0:	f107 0318 	add.w	r3, r7, #24
 80008f4:	4619      	mov	r1, r3
 80008f6:	4822      	ldr	r0, [pc, #136]	; (8000980 <HAL_TIM_MspPostInit+0xd4>)
 80008f8:	f000 fa08 	bl	8000d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80008fc:	e03a      	b.n	8000974 <HAL_TIM_MspPostInit+0xc8>
  else if(htim->Instance==TIM3)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a20      	ldr	r2, [pc, #128]	; (8000984 <HAL_TIM_MspPostInit+0xd8>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d118      	bne.n	800093a <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000908:	4b1c      	ldr	r3, [pc, #112]	; (800097c <HAL_TIM_MspPostInit+0xd0>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	4a1b      	ldr	r2, [pc, #108]	; (800097c <HAL_TIM_MspPostInit+0xd0>)
 800090e:	f043 0304 	orr.w	r3, r3, #4
 8000912:	6193      	str	r3, [r2, #24]
 8000914:	4b19      	ldr	r3, [pc, #100]	; (800097c <HAL_TIM_MspPostInit+0xd0>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	f003 0304 	and.w	r3, r3, #4
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000920:	2340      	movs	r3, #64	; 0x40
 8000922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2302      	movs	r3, #2
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092c:	f107 0318 	add.w	r3, r7, #24
 8000930:	4619      	mov	r1, r3
 8000932:	4813      	ldr	r0, [pc, #76]	; (8000980 <HAL_TIM_MspPostInit+0xd4>)
 8000934:	f000 f9ea 	bl	8000d0c <HAL_GPIO_Init>
}
 8000938:	e01c      	b.n	8000974 <HAL_TIM_MspPostInit+0xc8>
  else if(htim->Instance==TIM4)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a12      	ldr	r2, [pc, #72]	; (8000988 <HAL_TIM_MspPostInit+0xdc>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d117      	bne.n	8000974 <HAL_TIM_MspPostInit+0xc8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000944:	4b0d      	ldr	r3, [pc, #52]	; (800097c <HAL_TIM_MspPostInit+0xd0>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a0c      	ldr	r2, [pc, #48]	; (800097c <HAL_TIM_MspPostInit+0xd0>)
 800094a:	f043 0308 	orr.w	r3, r3, #8
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b0a      	ldr	r3, [pc, #40]	; (800097c <HAL_TIM_MspPostInit+0xd0>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f003 0308 	and.w	r3, r3, #8
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800095c:	2340      	movs	r3, #64	; 0x40
 800095e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2302      	movs	r3, #2
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000968:	f107 0318 	add.w	r3, r7, #24
 800096c:	4619      	mov	r1, r3
 800096e:	4807      	ldr	r0, [pc, #28]	; (800098c <HAL_TIM_MspPostInit+0xe0>)
 8000970:	f000 f9cc 	bl	8000d0c <HAL_GPIO_Init>
}
 8000974:	bf00      	nop
 8000976:	3728      	adds	r7, #40	; 0x28
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40021000 	.word	0x40021000
 8000980:	40010800 	.word	0x40010800
 8000984:	40000400 	.word	0x40000400
 8000988:	40000800 	.word	0x40000800
 800098c:	40010c00 	.word	0x40010c00

08000990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <NMI_Handler+0x4>

08000996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <HardFault_Handler+0x4>

0800099c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <MemManage_Handler+0x4>

080009a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <BusFault_Handler+0x4>

080009a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <UsageFault_Handler+0x4>

080009ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr

080009ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr

080009c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr

080009d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d6:	f000 f875 	bl	8000ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}

080009de <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr
	...

080009ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ec:	480c      	ldr	r0, [pc, #48]	; (8000a20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009ee:	490d      	ldr	r1, [pc, #52]	; (8000a24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009f0:	4a0d      	ldr	r2, [pc, #52]	; (8000a28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f4:	e002      	b.n	80009fc <LoopCopyDataInit>

080009f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fa:	3304      	adds	r3, #4

080009fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a00:	d3f9      	bcc.n	80009f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a02:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a04:	4c0a      	ldr	r4, [pc, #40]	; (8000a30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a08:	e001      	b.n	8000a0e <LoopFillZerobss>

08000a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a0c:	3204      	adds	r2, #4

08000a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a10:	d3fb      	bcc.n	8000a0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a12:	f7ff ffe4 	bl	80009de <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a16:	f001 fe5d 	bl	80026d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a1a:	f7ff fc03 	bl	8000224 <main>
  bx lr
 8000a1e:	4770      	bx	lr
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a28:	0800276c 	.word	0x0800276c
  ldr r2, =_sbss
 8000a2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a30:	20000104 	.word	0x20000104

08000a34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC1_2_IRQHandler>
	...

08000a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <HAL_Init+0x28>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a07      	ldr	r2, [pc, #28]	; (8000a60 <HAL_Init+0x28>)
 8000a42:	f043 0310 	orr.w	r3, r3, #16
 8000a46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a48:	2003      	movs	r0, #3
 8000a4a:	f000 f92b 	bl	8000ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4e:	200f      	movs	r0, #15
 8000a50:	f000 f808 	bl	8000a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a54:	f7ff feb4 	bl	80007c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40022000 	.word	0x40022000

08000a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <HAL_InitTick+0x54>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_InitTick+0x58>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	4619      	mov	r1, r3
 8000a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 f935 	bl	8000cf2 <HAL_SYSTICK_Config>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e00e      	b.n	8000ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2b0f      	cmp	r3, #15
 8000a96:	d80a      	bhi.n	8000aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aa0:	f000 f90b 	bl	8000cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa4:	4a06      	ldr	r2, [pc, #24]	; (8000ac0 <HAL_InitTick+0x5c>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	e000      	b.n	8000ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	20000004 	.word	0x20000004

08000ac4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <HAL_IncTick+0x1c>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <HAL_IncTick+0x20>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a03      	ldr	r2, [pc, #12]	; (8000ae4 <HAL_IncTick+0x20>)
 8000ad6:	6013      	str	r3, [r2, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	20000100 	.word	0x20000100

08000ae8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return uwTick;
 8000aec:	4b02      	ldr	r3, [pc, #8]	; (8000af8 <HAL_GetTick+0x10>)
 8000aee:	681b      	ldr	r3, [r3, #0]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	20000100 	.word	0x20000100

08000afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b04:	f7ff fff0 	bl	8000ae8 <HAL_GetTick>
 8000b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b14:	d005      	beq.n	8000b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b16:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <HAL_Delay+0x44>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	4413      	add	r3, r2
 8000b20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b22:	bf00      	nop
 8000b24:	f7ff ffe0 	bl	8000ae8 <HAL_GetTick>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d8f7      	bhi.n	8000b24 <HAL_Delay+0x28>
  {
  }
}
 8000b34:	bf00      	nop
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000008 	.word	0x20000008

08000b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <__NVIC_SetPriorityGrouping+0x44>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b5a:	68ba      	ldr	r2, [r7, #8]
 8000b5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b60:	4013      	ands	r3, r2
 8000b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b76:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <__NVIC_SetPriorityGrouping+0x44>)
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	60d3      	str	r3, [r2, #12]
}
 8000b7c:	bf00      	nop
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b90:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	0a1b      	lsrs	r3, r3, #8
 8000b96:	f003 0307 	and.w	r3, r3, #7
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	db0a      	blt.n	8000bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	490c      	ldr	r1, [pc, #48]	; (8000bf4 <__NVIC_SetPriority+0x4c>)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	0112      	lsls	r2, r2, #4
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	440b      	add	r3, r1
 8000bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd0:	e00a      	b.n	8000be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4908      	ldr	r1, [pc, #32]	; (8000bf8 <__NVIC_SetPriority+0x50>)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	f003 030f 	and.w	r3, r3, #15
 8000bde:	3b04      	subs	r3, #4
 8000be0:	0112      	lsls	r2, r2, #4
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	440b      	add	r3, r1
 8000be6:	761a      	strb	r2, [r3, #24]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000e100 	.word	0xe000e100
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b089      	sub	sp, #36	; 0x24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	f1c3 0307 	rsb	r3, r3, #7
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	bf28      	it	cs
 8000c1a:	2304      	movcs	r3, #4
 8000c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3304      	adds	r3, #4
 8000c22:	2b06      	cmp	r3, #6
 8000c24:	d902      	bls.n	8000c2c <NVIC_EncodePriority+0x30>
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3b03      	subs	r3, #3
 8000c2a:	e000      	b.n	8000c2e <NVIC_EncodePriority+0x32>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	401a      	ands	r2, r3
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4e:	43d9      	mvns	r1, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	4313      	orrs	r3, r2
         );
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3724      	adds	r7, #36	; 0x24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr

08000c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c70:	d301      	bcc.n	8000c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00f      	b.n	8000c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <SysTick_Config+0x40>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c7e:	210f      	movs	r1, #15
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c84:	f7ff ff90 	bl	8000ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <SysTick_Config+0x40>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8e:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <SysTick_Config+0x40>)
 8000c90:	2207      	movs	r2, #7
 8000c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	e000e010 	.word	0xe000e010

08000ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff ff49 	bl	8000b44 <__NVIC_SetPriorityGrouping>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b086      	sub	sp, #24
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ccc:	f7ff ff5e 	bl	8000b8c <__NVIC_GetPriorityGrouping>
 8000cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	6978      	ldr	r0, [r7, #20]
 8000cd8:	f7ff ff90 	bl	8000bfc <NVIC_EncodePriority>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff5f 	bl	8000ba8 <__NVIC_SetPriority>
}
 8000cea:	bf00      	nop
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff ffb0 	bl	8000c60 <SysTick_Config>
 8000d00:	4603      	mov	r3, r0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b08b      	sub	sp, #44	; 0x2c
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1e:	e179      	b.n	8001014 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d20:	2201      	movs	r2, #1
 8000d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	69fa      	ldr	r2, [r7, #28]
 8000d30:	4013      	ands	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	f040 8168 	bne.w	800100e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	4a96      	ldr	r2, [pc, #600]	; (8000f9c <HAL_GPIO_Init+0x290>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d05e      	beq.n	8000e06 <HAL_GPIO_Init+0xfa>
 8000d48:	4a94      	ldr	r2, [pc, #592]	; (8000f9c <HAL_GPIO_Init+0x290>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d875      	bhi.n	8000e3a <HAL_GPIO_Init+0x12e>
 8000d4e:	4a94      	ldr	r2, [pc, #592]	; (8000fa0 <HAL_GPIO_Init+0x294>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d058      	beq.n	8000e06 <HAL_GPIO_Init+0xfa>
 8000d54:	4a92      	ldr	r2, [pc, #584]	; (8000fa0 <HAL_GPIO_Init+0x294>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d86f      	bhi.n	8000e3a <HAL_GPIO_Init+0x12e>
 8000d5a:	4a92      	ldr	r2, [pc, #584]	; (8000fa4 <HAL_GPIO_Init+0x298>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d052      	beq.n	8000e06 <HAL_GPIO_Init+0xfa>
 8000d60:	4a90      	ldr	r2, [pc, #576]	; (8000fa4 <HAL_GPIO_Init+0x298>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d869      	bhi.n	8000e3a <HAL_GPIO_Init+0x12e>
 8000d66:	4a90      	ldr	r2, [pc, #576]	; (8000fa8 <HAL_GPIO_Init+0x29c>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d04c      	beq.n	8000e06 <HAL_GPIO_Init+0xfa>
 8000d6c:	4a8e      	ldr	r2, [pc, #568]	; (8000fa8 <HAL_GPIO_Init+0x29c>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d863      	bhi.n	8000e3a <HAL_GPIO_Init+0x12e>
 8000d72:	4a8e      	ldr	r2, [pc, #568]	; (8000fac <HAL_GPIO_Init+0x2a0>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d046      	beq.n	8000e06 <HAL_GPIO_Init+0xfa>
 8000d78:	4a8c      	ldr	r2, [pc, #560]	; (8000fac <HAL_GPIO_Init+0x2a0>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d85d      	bhi.n	8000e3a <HAL_GPIO_Init+0x12e>
 8000d7e:	2b12      	cmp	r3, #18
 8000d80:	d82a      	bhi.n	8000dd8 <HAL_GPIO_Init+0xcc>
 8000d82:	2b12      	cmp	r3, #18
 8000d84:	d859      	bhi.n	8000e3a <HAL_GPIO_Init+0x12e>
 8000d86:	a201      	add	r2, pc, #4	; (adr r2, 8000d8c <HAL_GPIO_Init+0x80>)
 8000d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d8c:	08000e07 	.word	0x08000e07
 8000d90:	08000de1 	.word	0x08000de1
 8000d94:	08000df3 	.word	0x08000df3
 8000d98:	08000e35 	.word	0x08000e35
 8000d9c:	08000e3b 	.word	0x08000e3b
 8000da0:	08000e3b 	.word	0x08000e3b
 8000da4:	08000e3b 	.word	0x08000e3b
 8000da8:	08000e3b 	.word	0x08000e3b
 8000dac:	08000e3b 	.word	0x08000e3b
 8000db0:	08000e3b 	.word	0x08000e3b
 8000db4:	08000e3b 	.word	0x08000e3b
 8000db8:	08000e3b 	.word	0x08000e3b
 8000dbc:	08000e3b 	.word	0x08000e3b
 8000dc0:	08000e3b 	.word	0x08000e3b
 8000dc4:	08000e3b 	.word	0x08000e3b
 8000dc8:	08000e3b 	.word	0x08000e3b
 8000dcc:	08000e3b 	.word	0x08000e3b
 8000dd0:	08000de9 	.word	0x08000de9
 8000dd4:	08000dfd 	.word	0x08000dfd
 8000dd8:	4a75      	ldr	r2, [pc, #468]	; (8000fb0 <HAL_GPIO_Init+0x2a4>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d013      	beq.n	8000e06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dde:	e02c      	b.n	8000e3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	623b      	str	r3, [r7, #32]
          break;
 8000de6:	e029      	b.n	8000e3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	3304      	adds	r3, #4
 8000dee:	623b      	str	r3, [r7, #32]
          break;
 8000df0:	e024      	b.n	8000e3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	3308      	adds	r3, #8
 8000df8:	623b      	str	r3, [r7, #32]
          break;
 8000dfa:	e01f      	b.n	8000e3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	330c      	adds	r3, #12
 8000e02:	623b      	str	r3, [r7, #32]
          break;
 8000e04:	e01a      	b.n	8000e3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d102      	bne.n	8000e14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e0e:	2304      	movs	r3, #4
 8000e10:	623b      	str	r3, [r7, #32]
          break;
 8000e12:	e013      	b.n	8000e3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d105      	bne.n	8000e28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e1c:	2308      	movs	r3, #8
 8000e1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	69fa      	ldr	r2, [r7, #28]
 8000e24:	611a      	str	r2, [r3, #16]
          break;
 8000e26:	e009      	b.n	8000e3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e28:	2308      	movs	r3, #8
 8000e2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	69fa      	ldr	r2, [r7, #28]
 8000e30:	615a      	str	r2, [r3, #20]
          break;
 8000e32:	e003      	b.n	8000e3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e34:	2300      	movs	r3, #0
 8000e36:	623b      	str	r3, [r7, #32]
          break;
 8000e38:	e000      	b.n	8000e3c <HAL_GPIO_Init+0x130>
          break;
 8000e3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	2bff      	cmp	r3, #255	; 0xff
 8000e40:	d801      	bhi.n	8000e46 <HAL_GPIO_Init+0x13a>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	e001      	b.n	8000e4a <HAL_GPIO_Init+0x13e>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	2bff      	cmp	r3, #255	; 0xff
 8000e50:	d802      	bhi.n	8000e58 <HAL_GPIO_Init+0x14c>
 8000e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	e002      	b.n	8000e5e <HAL_GPIO_Init+0x152>
 8000e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5a:	3b08      	subs	r3, #8
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	210f      	movs	r1, #15
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	401a      	ands	r2, r3
 8000e70:	6a39      	ldr	r1, [r7, #32]
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	fa01 f303 	lsl.w	r3, r1, r3
 8000e78:	431a      	orrs	r2, r3
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f000 80c1 	beq.w	800100e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e8c:	4b49      	ldr	r3, [pc, #292]	; (8000fb4 <HAL_GPIO_Init+0x2a8>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a48      	ldr	r2, [pc, #288]	; (8000fb4 <HAL_GPIO_Init+0x2a8>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b46      	ldr	r3, [pc, #280]	; (8000fb4 <HAL_GPIO_Init+0x2a8>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ea4:	4a44      	ldr	r2, [pc, #272]	; (8000fb8 <HAL_GPIO_Init+0x2ac>)
 8000ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea8:	089b      	lsrs	r3, r3, #2
 8000eaa:	3302      	adds	r3, #2
 8000eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	220f      	movs	r2, #15
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a3c      	ldr	r2, [pc, #240]	; (8000fbc <HAL_GPIO_Init+0x2b0>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d01f      	beq.n	8000f10 <HAL_GPIO_Init+0x204>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a3b      	ldr	r2, [pc, #236]	; (8000fc0 <HAL_GPIO_Init+0x2b4>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d019      	beq.n	8000f0c <HAL_GPIO_Init+0x200>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a3a      	ldr	r2, [pc, #232]	; (8000fc4 <HAL_GPIO_Init+0x2b8>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d013      	beq.n	8000f08 <HAL_GPIO_Init+0x1fc>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a39      	ldr	r2, [pc, #228]	; (8000fc8 <HAL_GPIO_Init+0x2bc>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d00d      	beq.n	8000f04 <HAL_GPIO_Init+0x1f8>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a38      	ldr	r2, [pc, #224]	; (8000fcc <HAL_GPIO_Init+0x2c0>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d007      	beq.n	8000f00 <HAL_GPIO_Init+0x1f4>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a37      	ldr	r2, [pc, #220]	; (8000fd0 <HAL_GPIO_Init+0x2c4>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d101      	bne.n	8000efc <HAL_GPIO_Init+0x1f0>
 8000ef8:	2305      	movs	r3, #5
 8000efa:	e00a      	b.n	8000f12 <HAL_GPIO_Init+0x206>
 8000efc:	2306      	movs	r3, #6
 8000efe:	e008      	b.n	8000f12 <HAL_GPIO_Init+0x206>
 8000f00:	2304      	movs	r3, #4
 8000f02:	e006      	b.n	8000f12 <HAL_GPIO_Init+0x206>
 8000f04:	2303      	movs	r3, #3
 8000f06:	e004      	b.n	8000f12 <HAL_GPIO_Init+0x206>
 8000f08:	2302      	movs	r3, #2
 8000f0a:	e002      	b.n	8000f12 <HAL_GPIO_Init+0x206>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e000      	b.n	8000f12 <HAL_GPIO_Init+0x206>
 8000f10:	2300      	movs	r3, #0
 8000f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f14:	f002 0203 	and.w	r2, r2, #3
 8000f18:	0092      	lsls	r2, r2, #2
 8000f1a:	4093      	lsls	r3, r2
 8000f1c:	68fa      	ldr	r2, [r7, #12]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f22:	4925      	ldr	r1, [pc, #148]	; (8000fb8 <HAL_GPIO_Init+0x2ac>)
 8000f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f26:	089b      	lsrs	r3, r3, #2
 8000f28:	3302      	adds	r3, #2
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d006      	beq.n	8000f4a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f3c:	4b25      	ldr	r3, [pc, #148]	; (8000fd4 <HAL_GPIO_Init+0x2c8>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4924      	ldr	r1, [pc, #144]	; (8000fd4 <HAL_GPIO_Init+0x2c8>)
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	600b      	str	r3, [r1, #0]
 8000f48:	e006      	b.n	8000f58 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f4a:	4b22      	ldr	r3, [pc, #136]	; (8000fd4 <HAL_GPIO_Init+0x2c8>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	43db      	mvns	r3, r3
 8000f52:	4920      	ldr	r1, [pc, #128]	; (8000fd4 <HAL_GPIO_Init+0x2c8>)
 8000f54:	4013      	ands	r3, r2
 8000f56:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d006      	beq.n	8000f72 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f64:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <HAL_GPIO_Init+0x2c8>)
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	491a      	ldr	r1, [pc, #104]	; (8000fd4 <HAL_GPIO_Init+0x2c8>)
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	604b      	str	r3, [r1, #4]
 8000f70:	e006      	b.n	8000f80 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f72:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <HAL_GPIO_Init+0x2c8>)
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	4916      	ldr	r1, [pc, #88]	; (8000fd4 <HAL_GPIO_Init+0x2c8>)
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d025      	beq.n	8000fd8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <HAL_GPIO_Init+0x2c8>)
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	4910      	ldr	r1, [pc, #64]	; (8000fd4 <HAL_GPIO_Init+0x2c8>)
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	608b      	str	r3, [r1, #8]
 8000f98:	e025      	b.n	8000fe6 <HAL_GPIO_Init+0x2da>
 8000f9a:	bf00      	nop
 8000f9c:	10320000 	.word	0x10320000
 8000fa0:	10310000 	.word	0x10310000
 8000fa4:	10220000 	.word	0x10220000
 8000fa8:	10210000 	.word	0x10210000
 8000fac:	10120000 	.word	0x10120000
 8000fb0:	10110000 	.word	0x10110000
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	40010000 	.word	0x40010000
 8000fbc:	40010800 	.word	0x40010800
 8000fc0:	40010c00 	.word	0x40010c00
 8000fc4:	40011000 	.word	0x40011000
 8000fc8:	40011400 	.word	0x40011400
 8000fcc:	40011800 	.word	0x40011800
 8000fd0:	40011c00 	.word	0x40011c00
 8000fd4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fd8:	4b15      	ldr	r3, [pc, #84]	; (8001030 <HAL_GPIO_Init+0x324>)
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	4913      	ldr	r1, [pc, #76]	; (8001030 <HAL_GPIO_Init+0x324>)
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d006      	beq.n	8001000 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <HAL_GPIO_Init+0x324>)
 8000ff4:	68da      	ldr	r2, [r3, #12]
 8000ff6:	490e      	ldr	r1, [pc, #56]	; (8001030 <HAL_GPIO_Init+0x324>)
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	60cb      	str	r3, [r1, #12]
 8000ffe:	e006      	b.n	800100e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001000:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <HAL_GPIO_Init+0x324>)
 8001002:	68da      	ldr	r2, [r3, #12]
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	43db      	mvns	r3, r3
 8001008:	4909      	ldr	r1, [pc, #36]	; (8001030 <HAL_GPIO_Init+0x324>)
 800100a:	4013      	ands	r3, r2
 800100c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800100e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001010:	3301      	adds	r3, #1
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101a:	fa22 f303 	lsr.w	r3, r2, r3
 800101e:	2b00      	cmp	r3, #0
 8001020:	f47f ae7e 	bne.w	8000d20 <HAL_GPIO_Init+0x14>
  }
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	372c      	adds	r7, #44	; 0x2c
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	40010400 	.word	0x40010400

08001034 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	887b      	ldrh	r3, [r7, #2]
 8001046:	4013      	ands	r3, r2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d002      	beq.n	8001052 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800104c:	2301      	movs	r3, #1
 800104e:	73fb      	strb	r3, [r7, #15]
 8001050:	e001      	b.n	8001056 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001052:	2300      	movs	r3, #0
 8001054:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001056:	7bfb      	ldrb	r3, [r7, #15]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr

08001062 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	460b      	mov	r3, r1
 800106c:	807b      	strh	r3, [r7, #2]
 800106e:	4613      	mov	r3, r2
 8001070:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001072:	787b      	ldrb	r3, [r7, #1]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001078:	887a      	ldrh	r2, [r7, #2]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800107e:	e003      	b.n	8001088 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001080:	887b      	ldrh	r3, [r7, #2]
 8001082:	041a      	lsls	r2, r3, #16
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	611a      	str	r2, [r3, #16]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
	...

08001094 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d101      	bne.n	80010a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e272      	b.n	800158c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f000 8087 	beq.w	80011c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010b4:	4b92      	ldr	r3, [pc, #584]	; (8001300 <HAL_RCC_OscConfig+0x26c>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 030c 	and.w	r3, r3, #12
 80010bc:	2b04      	cmp	r3, #4
 80010be:	d00c      	beq.n	80010da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010c0:	4b8f      	ldr	r3, [pc, #572]	; (8001300 <HAL_RCC_OscConfig+0x26c>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 030c 	and.w	r3, r3, #12
 80010c8:	2b08      	cmp	r3, #8
 80010ca:	d112      	bne.n	80010f2 <HAL_RCC_OscConfig+0x5e>
 80010cc:	4b8c      	ldr	r3, [pc, #560]	; (8001300 <HAL_RCC_OscConfig+0x26c>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010d8:	d10b      	bne.n	80010f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010da:	4b89      	ldr	r3, [pc, #548]	; (8001300 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d06c      	beq.n	80011c0 <HAL_RCC_OscConfig+0x12c>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d168      	bne.n	80011c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e24c      	b.n	800158c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010fa:	d106      	bne.n	800110a <HAL_RCC_OscConfig+0x76>
 80010fc:	4b80      	ldr	r3, [pc, #512]	; (8001300 <HAL_RCC_OscConfig+0x26c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a7f      	ldr	r2, [pc, #508]	; (8001300 <HAL_RCC_OscConfig+0x26c>)
 8001102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001106:	6013      	str	r3, [r2, #0]
 8001108:	e02e      	b.n	8001168 <HAL_RCC_OscConfig+0xd4>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10c      	bne.n	800112c <HAL_RCC_OscConfig+0x98>
 8001112:	4b7b      	ldr	r3, [pc, #492]	; (8001300 <HAL_RCC_OscConfig+0x26c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a7a      	ldr	r2, [pc, #488]	; (8001300 <HAL_RCC_OscConfig+0x26c>)
 8001118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	4b78      	ldr	r3, [pc, #480]	; (8001300 <HAL_RCC_OscConfig+0x26c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a77      	ldr	r2, [pc, #476]	; (8001300 <HAL_RCC_OscConfig+0x26c>)
 8001124:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	e01d      	b.n	8001168 <HAL_RCC_OscConfig+0xd4>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001134:	d10c      	bne.n	8001150 <HAL_RCC_OscConfig+0xbc>
 8001136:	4b72      	ldr	r3, [pc, #456]	; (8001300 <HAL_RCC_OscConfig+0x26c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a71      	ldr	r2, [pc, #452]	; (8001300 <HAL_RCC_OscConfig+0x26c>)
 800113c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	4b6f      	ldr	r3, [pc, #444]	; (8001300 <HAL_RCC_OscConfig+0x26c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a6e      	ldr	r2, [pc, #440]	; (8001300 <HAL_RCC_OscConfig+0x26c>)
 8001148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	e00b      	b.n	8001168 <HAL_RCC_OscConfig+0xd4>
 8001150:	4b6b      	ldr	r3, [pc, #428]	; (8001300 <HAL_RCC_OscConfig+0x26c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a6a      	ldr	r2, [pc, #424]	; (8001300 <HAL_RCC_OscConfig+0x26c>)
 8001156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	4b68      	ldr	r3, [pc, #416]	; (8001300 <HAL_RCC_OscConfig+0x26c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a67      	ldr	r2, [pc, #412]	; (8001300 <HAL_RCC_OscConfig+0x26c>)
 8001162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001166:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d013      	beq.n	8001198 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001170:	f7ff fcba 	bl	8000ae8 <HAL_GetTick>
 8001174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001176:	e008      	b.n	800118a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001178:	f7ff fcb6 	bl	8000ae8 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b64      	cmp	r3, #100	; 0x64
 8001184:	d901      	bls.n	800118a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e200      	b.n	800158c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118a:	4b5d      	ldr	r3, [pc, #372]	; (8001300 <HAL_RCC_OscConfig+0x26c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d0f0      	beq.n	8001178 <HAL_RCC_OscConfig+0xe4>
 8001196:	e014      	b.n	80011c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001198:	f7ff fca6 	bl	8000ae8 <HAL_GetTick>
 800119c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800119e:	e008      	b.n	80011b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011a0:	f7ff fca2 	bl	8000ae8 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b64      	cmp	r3, #100	; 0x64
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e1ec      	b.n	800158c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011b2:	4b53      	ldr	r3, [pc, #332]	; (8001300 <HAL_RCC_OscConfig+0x26c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f0      	bne.n	80011a0 <HAL_RCC_OscConfig+0x10c>
 80011be:	e000      	b.n	80011c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d063      	beq.n	8001296 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011ce:	4b4c      	ldr	r3, [pc, #304]	; (8001300 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 030c 	and.w	r3, r3, #12
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d00b      	beq.n	80011f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011da:	4b49      	ldr	r3, [pc, #292]	; (8001300 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 030c 	and.w	r3, r3, #12
 80011e2:	2b08      	cmp	r3, #8
 80011e4:	d11c      	bne.n	8001220 <HAL_RCC_OscConfig+0x18c>
 80011e6:	4b46      	ldr	r3, [pc, #280]	; (8001300 <HAL_RCC_OscConfig+0x26c>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d116      	bne.n	8001220 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011f2:	4b43      	ldr	r3, [pc, #268]	; (8001300 <HAL_RCC_OscConfig+0x26c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d005      	beq.n	800120a <HAL_RCC_OscConfig+0x176>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d001      	beq.n	800120a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e1c0      	b.n	800158c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120a:	4b3d      	ldr	r3, [pc, #244]	; (8001300 <HAL_RCC_OscConfig+0x26c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	4939      	ldr	r1, [pc, #228]	; (8001300 <HAL_RCC_OscConfig+0x26c>)
 800121a:	4313      	orrs	r3, r2
 800121c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800121e:	e03a      	b.n	8001296 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d020      	beq.n	800126a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001228:	4b36      	ldr	r3, [pc, #216]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 800122a:	2201      	movs	r2, #1
 800122c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122e:	f7ff fc5b 	bl	8000ae8 <HAL_GetTick>
 8001232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001234:	e008      	b.n	8001248 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001236:	f7ff fc57 	bl	8000ae8 <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e1a1      	b.n	800158c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001248:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <HAL_RCC_OscConfig+0x26c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0f0      	beq.n	8001236 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001254:	4b2a      	ldr	r3, [pc, #168]	; (8001300 <HAL_RCC_OscConfig+0x26c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	4927      	ldr	r1, [pc, #156]	; (8001300 <HAL_RCC_OscConfig+0x26c>)
 8001264:	4313      	orrs	r3, r2
 8001266:	600b      	str	r3, [r1, #0]
 8001268:	e015      	b.n	8001296 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800126a:	4b26      	ldr	r3, [pc, #152]	; (8001304 <HAL_RCC_OscConfig+0x270>)
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001270:	f7ff fc3a 	bl	8000ae8 <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001278:	f7ff fc36 	bl	8000ae8 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e180      	b.n	800158c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800128a:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <HAL_RCC_OscConfig+0x26c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1f0      	bne.n	8001278 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d03a      	beq.n	8001318 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d019      	beq.n	80012de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012aa:	4b17      	ldr	r3, [pc, #92]	; (8001308 <HAL_RCC_OscConfig+0x274>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b0:	f7ff fc1a 	bl	8000ae8 <HAL_GetTick>
 80012b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012b8:	f7ff fc16 	bl	8000ae8 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e160      	b.n	800158c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ca:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <HAL_RCC_OscConfig+0x26c>)
 80012cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0f0      	beq.n	80012b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012d6:	2001      	movs	r0, #1
 80012d8:	f000 fade 	bl	8001898 <RCC_Delay>
 80012dc:	e01c      	b.n	8001318 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012de:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <HAL_RCC_OscConfig+0x274>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e4:	f7ff fc00 	bl	8000ae8 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ea:	e00f      	b.n	800130c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012ec:	f7ff fbfc 	bl	8000ae8 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d908      	bls.n	800130c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e146      	b.n	800158c <HAL_RCC_OscConfig+0x4f8>
 80012fe:	bf00      	nop
 8001300:	40021000 	.word	0x40021000
 8001304:	42420000 	.word	0x42420000
 8001308:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800130c:	4b92      	ldr	r3, [pc, #584]	; (8001558 <HAL_RCC_OscConfig+0x4c4>)
 800130e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1e9      	bne.n	80012ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 80a6 	beq.w	8001472 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001326:	2300      	movs	r3, #0
 8001328:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800132a:	4b8b      	ldr	r3, [pc, #556]	; (8001558 <HAL_RCC_OscConfig+0x4c4>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10d      	bne.n	8001352 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001336:	4b88      	ldr	r3, [pc, #544]	; (8001558 <HAL_RCC_OscConfig+0x4c4>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	4a87      	ldr	r2, [pc, #540]	; (8001558 <HAL_RCC_OscConfig+0x4c4>)
 800133c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001340:	61d3      	str	r3, [r2, #28]
 8001342:	4b85      	ldr	r3, [pc, #532]	; (8001558 <HAL_RCC_OscConfig+0x4c4>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800134e:	2301      	movs	r3, #1
 8001350:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001352:	4b82      	ldr	r3, [pc, #520]	; (800155c <HAL_RCC_OscConfig+0x4c8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800135a:	2b00      	cmp	r3, #0
 800135c:	d118      	bne.n	8001390 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800135e:	4b7f      	ldr	r3, [pc, #508]	; (800155c <HAL_RCC_OscConfig+0x4c8>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a7e      	ldr	r2, [pc, #504]	; (800155c <HAL_RCC_OscConfig+0x4c8>)
 8001364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001368:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800136a:	f7ff fbbd 	bl	8000ae8 <HAL_GetTick>
 800136e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001370:	e008      	b.n	8001384 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001372:	f7ff fbb9 	bl	8000ae8 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b64      	cmp	r3, #100	; 0x64
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e103      	b.n	800158c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001384:	4b75      	ldr	r3, [pc, #468]	; (800155c <HAL_RCC_OscConfig+0x4c8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0f0      	beq.n	8001372 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d106      	bne.n	80013a6 <HAL_RCC_OscConfig+0x312>
 8001398:	4b6f      	ldr	r3, [pc, #444]	; (8001558 <HAL_RCC_OscConfig+0x4c4>)
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	4a6e      	ldr	r2, [pc, #440]	; (8001558 <HAL_RCC_OscConfig+0x4c4>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	6213      	str	r3, [r2, #32]
 80013a4:	e02d      	b.n	8001402 <HAL_RCC_OscConfig+0x36e>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d10c      	bne.n	80013c8 <HAL_RCC_OscConfig+0x334>
 80013ae:	4b6a      	ldr	r3, [pc, #424]	; (8001558 <HAL_RCC_OscConfig+0x4c4>)
 80013b0:	6a1b      	ldr	r3, [r3, #32]
 80013b2:	4a69      	ldr	r2, [pc, #420]	; (8001558 <HAL_RCC_OscConfig+0x4c4>)
 80013b4:	f023 0301 	bic.w	r3, r3, #1
 80013b8:	6213      	str	r3, [r2, #32]
 80013ba:	4b67      	ldr	r3, [pc, #412]	; (8001558 <HAL_RCC_OscConfig+0x4c4>)
 80013bc:	6a1b      	ldr	r3, [r3, #32]
 80013be:	4a66      	ldr	r2, [pc, #408]	; (8001558 <HAL_RCC_OscConfig+0x4c4>)
 80013c0:	f023 0304 	bic.w	r3, r3, #4
 80013c4:	6213      	str	r3, [r2, #32]
 80013c6:	e01c      	b.n	8001402 <HAL_RCC_OscConfig+0x36e>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	2b05      	cmp	r3, #5
 80013ce:	d10c      	bne.n	80013ea <HAL_RCC_OscConfig+0x356>
 80013d0:	4b61      	ldr	r3, [pc, #388]	; (8001558 <HAL_RCC_OscConfig+0x4c4>)
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	4a60      	ldr	r2, [pc, #384]	; (8001558 <HAL_RCC_OscConfig+0x4c4>)
 80013d6:	f043 0304 	orr.w	r3, r3, #4
 80013da:	6213      	str	r3, [r2, #32]
 80013dc:	4b5e      	ldr	r3, [pc, #376]	; (8001558 <HAL_RCC_OscConfig+0x4c4>)
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	4a5d      	ldr	r2, [pc, #372]	; (8001558 <HAL_RCC_OscConfig+0x4c4>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	6213      	str	r3, [r2, #32]
 80013e8:	e00b      	b.n	8001402 <HAL_RCC_OscConfig+0x36e>
 80013ea:	4b5b      	ldr	r3, [pc, #364]	; (8001558 <HAL_RCC_OscConfig+0x4c4>)
 80013ec:	6a1b      	ldr	r3, [r3, #32]
 80013ee:	4a5a      	ldr	r2, [pc, #360]	; (8001558 <HAL_RCC_OscConfig+0x4c4>)
 80013f0:	f023 0301 	bic.w	r3, r3, #1
 80013f4:	6213      	str	r3, [r2, #32]
 80013f6:	4b58      	ldr	r3, [pc, #352]	; (8001558 <HAL_RCC_OscConfig+0x4c4>)
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	4a57      	ldr	r2, [pc, #348]	; (8001558 <HAL_RCC_OscConfig+0x4c4>)
 80013fc:	f023 0304 	bic.w	r3, r3, #4
 8001400:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d015      	beq.n	8001436 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140a:	f7ff fb6d 	bl	8000ae8 <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001410:	e00a      	b.n	8001428 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001412:	f7ff fb69 	bl	8000ae8 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001420:	4293      	cmp	r3, r2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e0b1      	b.n	800158c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001428:	4b4b      	ldr	r3, [pc, #300]	; (8001558 <HAL_RCC_OscConfig+0x4c4>)
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0ee      	beq.n	8001412 <HAL_RCC_OscConfig+0x37e>
 8001434:	e014      	b.n	8001460 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001436:	f7ff fb57 	bl	8000ae8 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800143c:	e00a      	b.n	8001454 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800143e:	f7ff fb53 	bl	8000ae8 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	f241 3288 	movw	r2, #5000	; 0x1388
 800144c:	4293      	cmp	r3, r2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e09b      	b.n	800158c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001454:	4b40      	ldr	r3, [pc, #256]	; (8001558 <HAL_RCC_OscConfig+0x4c4>)
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1ee      	bne.n	800143e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001460:	7dfb      	ldrb	r3, [r7, #23]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d105      	bne.n	8001472 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001466:	4b3c      	ldr	r3, [pc, #240]	; (8001558 <HAL_RCC_OscConfig+0x4c4>)
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	4a3b      	ldr	r2, [pc, #236]	; (8001558 <HAL_RCC_OscConfig+0x4c4>)
 800146c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001470:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	2b00      	cmp	r3, #0
 8001478:	f000 8087 	beq.w	800158a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800147c:	4b36      	ldr	r3, [pc, #216]	; (8001558 <HAL_RCC_OscConfig+0x4c4>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 030c 	and.w	r3, r3, #12
 8001484:	2b08      	cmp	r3, #8
 8001486:	d061      	beq.n	800154c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	69db      	ldr	r3, [r3, #28]
 800148c:	2b02      	cmp	r3, #2
 800148e:	d146      	bne.n	800151e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001490:	4b33      	ldr	r3, [pc, #204]	; (8001560 <HAL_RCC_OscConfig+0x4cc>)
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001496:	f7ff fb27 	bl	8000ae8 <HAL_GetTick>
 800149a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800149e:	f7ff fb23 	bl	8000ae8 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e06d      	b.n	800158c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b0:	4b29      	ldr	r3, [pc, #164]	; (8001558 <HAL_RCC_OscConfig+0x4c4>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f0      	bne.n	800149e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c4:	d108      	bne.n	80014d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014c6:	4b24      	ldr	r3, [pc, #144]	; (8001558 <HAL_RCC_OscConfig+0x4c4>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	4921      	ldr	r1, [pc, #132]	; (8001558 <HAL_RCC_OscConfig+0x4c4>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014d8:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <HAL_RCC_OscConfig+0x4c4>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a19      	ldr	r1, [r3, #32]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e8:	430b      	orrs	r3, r1
 80014ea:	491b      	ldr	r1, [pc, #108]	; (8001558 <HAL_RCC_OscConfig+0x4c4>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014f0:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <HAL_RCC_OscConfig+0x4cc>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f6:	f7ff faf7 	bl	8000ae8 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014fe:	f7ff faf3 	bl	8000ae8 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e03d      	b.n	800158c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <HAL_RCC_OscConfig+0x4c4>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0f0      	beq.n	80014fe <HAL_RCC_OscConfig+0x46a>
 800151c:	e035      	b.n	800158a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <HAL_RCC_OscConfig+0x4cc>)
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001524:	f7ff fae0 	bl	8000ae8 <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800152c:	f7ff fadc 	bl	8000ae8 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e026      	b.n	800158c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_RCC_OscConfig+0x4c4>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f0      	bne.n	800152c <HAL_RCC_OscConfig+0x498>
 800154a:	e01e      	b.n	800158a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69db      	ldr	r3, [r3, #28]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d107      	bne.n	8001564 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e019      	b.n	800158c <HAL_RCC_OscConfig+0x4f8>
 8001558:	40021000 	.word	0x40021000
 800155c:	40007000 	.word	0x40007000
 8001560:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <HAL_RCC_OscConfig+0x500>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	429a      	cmp	r2, r3
 8001576:	d106      	bne.n	8001586 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001582:	429a      	cmp	r2, r3
 8001584:	d001      	beq.n	800158a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e000      	b.n	800158c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40021000 	.word	0x40021000

08001598 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e0d0      	b.n	800174e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015ac:	4b6a      	ldr	r3, [pc, #424]	; (8001758 <HAL_RCC_ClockConfig+0x1c0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0307 	and.w	r3, r3, #7
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d910      	bls.n	80015dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ba:	4b67      	ldr	r3, [pc, #412]	; (8001758 <HAL_RCC_ClockConfig+0x1c0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f023 0207 	bic.w	r2, r3, #7
 80015c2:	4965      	ldr	r1, [pc, #404]	; (8001758 <HAL_RCC_ClockConfig+0x1c0>)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ca:	4b63      	ldr	r3, [pc, #396]	; (8001758 <HAL_RCC_ClockConfig+0x1c0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d001      	beq.n	80015dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e0b8      	b.n	800174e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d020      	beq.n	800162a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015f4:	4b59      	ldr	r3, [pc, #356]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	4a58      	ldr	r2, [pc, #352]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 80015fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	2b00      	cmp	r3, #0
 800160a:	d005      	beq.n	8001618 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800160c:	4b53      	ldr	r3, [pc, #332]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	4a52      	ldr	r2, [pc, #328]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 8001612:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001616:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001618:	4b50      	ldr	r3, [pc, #320]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	494d      	ldr	r1, [pc, #308]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 8001626:	4313      	orrs	r3, r2
 8001628:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	d040      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d107      	bne.n	800164e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163e:	4b47      	ldr	r3, [pc, #284]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d115      	bne.n	8001676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e07f      	b.n	800174e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d107      	bne.n	8001666 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001656:	4b41      	ldr	r3, [pc, #260]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d109      	bne.n	8001676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e073      	b.n	800174e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001666:	4b3d      	ldr	r3, [pc, #244]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e06b      	b.n	800174e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001676:	4b39      	ldr	r3, [pc, #228]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f023 0203 	bic.w	r2, r3, #3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	4936      	ldr	r1, [pc, #216]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 8001684:	4313      	orrs	r3, r2
 8001686:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001688:	f7ff fa2e 	bl	8000ae8 <HAL_GetTick>
 800168c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168e:	e00a      	b.n	80016a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001690:	f7ff fa2a 	bl	8000ae8 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f241 3288 	movw	r2, #5000	; 0x1388
 800169e:	4293      	cmp	r3, r2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e053      	b.n	800174e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a6:	4b2d      	ldr	r3, [pc, #180]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 020c 	and.w	r2, r3, #12
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d1eb      	bne.n	8001690 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016b8:	4b27      	ldr	r3, [pc, #156]	; (8001758 <HAL_RCC_ClockConfig+0x1c0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0307 	and.w	r3, r3, #7
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d210      	bcs.n	80016e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c6:	4b24      	ldr	r3, [pc, #144]	; (8001758 <HAL_RCC_ClockConfig+0x1c0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f023 0207 	bic.w	r2, r3, #7
 80016ce:	4922      	ldr	r1, [pc, #136]	; (8001758 <HAL_RCC_ClockConfig+0x1c0>)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <HAL_RCC_ClockConfig+0x1c0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d001      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e032      	b.n	800174e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d008      	beq.n	8001706 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016f4:	4b19      	ldr	r3, [pc, #100]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	4916      	ldr	r1, [pc, #88]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 8001702:	4313      	orrs	r3, r2
 8001704:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0308 	and.w	r3, r3, #8
 800170e:	2b00      	cmp	r3, #0
 8001710:	d009      	beq.n	8001726 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001712:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	490e      	ldr	r1, [pc, #56]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 8001722:	4313      	orrs	r3, r2
 8001724:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001726:	f000 f859 	bl	80017dc <HAL_RCC_GetSysClockFreq>
 800172a:	4602      	mov	r2, r0
 800172c:	4b0b      	ldr	r3, [pc, #44]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	091b      	lsrs	r3, r3, #4
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	490a      	ldr	r1, [pc, #40]	; (8001760 <HAL_RCC_ClockConfig+0x1c8>)
 8001738:	5ccb      	ldrb	r3, [r1, r3]
 800173a:	fa22 f303 	lsr.w	r3, r2, r3
 800173e:	4a09      	ldr	r2, [pc, #36]	; (8001764 <HAL_RCC_ClockConfig+0x1cc>)
 8001740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001742:	4b09      	ldr	r3, [pc, #36]	; (8001768 <HAL_RCC_ClockConfig+0x1d0>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff f98c 	bl	8000a64 <HAL_InitTick>

  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40022000 	.word	0x40022000
 800175c:	40021000 	.word	0x40021000
 8001760:	08002754 	.word	0x08002754
 8001764:	20000000 	.word	0x20000000
 8001768:	20000004 	.word	0x20000004

0800176c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	; 0x28
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8001778:	f107 0318 	add.w	r3, r7, #24
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800178a:	2303      	movs	r3, #3
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8001792:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001796:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8001798:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <HAL_RCC_MCOConfig+0x68>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	4a0d      	ldr	r2, [pc, #52]	; (80017d4 <HAL_RCC_MCOConfig+0x68>)
 800179e:	f043 0304 	orr.w	r3, r3, #4
 80017a2:	6193      	str	r3, [r2, #24]
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <HAL_RCC_MCOConfig+0x68>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80017b0:	f107 0318 	add.w	r3, r7, #24
 80017b4:	4619      	mov	r1, r3
 80017b6:	4808      	ldr	r0, [pc, #32]	; (80017d8 <HAL_RCC_MCOConfig+0x6c>)
 80017b8:	f7ff faa8 	bl	8000d0c <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <HAL_RCC_MCOConfig+0x68>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80017c4:	4903      	ldr	r1, [pc, #12]	; (80017d4 <HAL_RCC_MCOConfig+0x68>)
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
}
 80017cc:	bf00      	nop
 80017ce:	3728      	adds	r7, #40	; 0x28
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40010800 	.word	0x40010800

080017dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017dc:	b490      	push	{r4, r7}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017e2:	4b29      	ldr	r3, [pc, #164]	; (8001888 <HAL_RCC_GetSysClockFreq+0xac>)
 80017e4:	1d3c      	adds	r4, r7, #4
 80017e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80017ec:	f240 2301 	movw	r3, #513	; 0x201
 80017f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
 80017f6:	2300      	movs	r3, #0
 80017f8:	61bb      	str	r3, [r7, #24]
 80017fa:	2300      	movs	r3, #0
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001802:	2300      	movs	r3, #0
 8001804:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001806:	4b21      	ldr	r3, [pc, #132]	; (800188c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f003 030c 	and.w	r3, r3, #12
 8001812:	2b04      	cmp	r3, #4
 8001814:	d002      	beq.n	800181c <HAL_RCC_GetSysClockFreq+0x40>
 8001816:	2b08      	cmp	r3, #8
 8001818:	d003      	beq.n	8001822 <HAL_RCC_GetSysClockFreq+0x46>
 800181a:	e02b      	b.n	8001874 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800181c:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <HAL_RCC_GetSysClockFreq+0xb4>)
 800181e:	623b      	str	r3, [r7, #32]
      break;
 8001820:	e02b      	b.n	800187a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	0c9b      	lsrs	r3, r3, #18
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	3328      	adds	r3, #40	; 0x28
 800182c:	443b      	add	r3, r7
 800182e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001832:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d012      	beq.n	8001864 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800183e:	4b13      	ldr	r3, [pc, #76]	; (800188c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	0c5b      	lsrs	r3, r3, #17
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	3328      	adds	r3, #40	; 0x28
 800184a:	443b      	add	r3, r7
 800184c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001850:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	4a0e      	ldr	r2, [pc, #56]	; (8001890 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001856:	fb03 f202 	mul.w	r2, r3, r2
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
 8001862:	e004      	b.n	800186e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	4a0b      	ldr	r2, [pc, #44]	; (8001894 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001868:	fb02 f303 	mul.w	r3, r2, r3
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	623b      	str	r3, [r7, #32]
      break;
 8001872:	e002      	b.n	800187a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001876:	623b      	str	r3, [r7, #32]
      break;
 8001878:	bf00      	nop
    }
  }
  return sysclockfreq;
 800187a:	6a3b      	ldr	r3, [r7, #32]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3728      	adds	r7, #40	; 0x28
 8001880:	46bd      	mov	sp, r7
 8001882:	bc90      	pop	{r4, r7}
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	08002744 	.word	0x08002744
 800188c:	40021000 	.word	0x40021000
 8001890:	007a1200 	.word	0x007a1200
 8001894:	003d0900 	.word	0x003d0900

08001898 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018a0:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <RCC_Delay+0x34>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <RCC_Delay+0x38>)
 80018a6:	fba2 2303 	umull	r2, r3, r2, r3
 80018aa:	0a5b      	lsrs	r3, r3, #9
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	fb02 f303 	mul.w	r3, r2, r3
 80018b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018b4:	bf00      	nop
  }
  while (Delay --);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	1e5a      	subs	r2, r3, #1
 80018ba:	60fa      	str	r2, [r7, #12]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1f9      	bne.n	80018b4 <RCC_Delay+0x1c>
}
 80018c0:	bf00      	nop
 80018c2:	bf00      	nop
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	20000000 	.word	0x20000000
 80018d0:	10624dd3 	.word	0x10624dd3

080018d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e041      	b.n	800196a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d106      	bne.n	8001900 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7fe ff92 	bl	8000824 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2202      	movs	r2, #2
 8001904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3304      	adds	r3, #4
 8001910:	4619      	mov	r1, r3
 8001912:	4610      	mov	r0, r2
 8001914:	f000 fb04 	bl	8001f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e041      	b.n	8001a08 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b00      	cmp	r3, #0
 800198e:	d106      	bne.n	800199e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f000 f839 	bl	8001a10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2202      	movs	r2, #2
 80019a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3304      	adds	r3, #4
 80019ae:	4619      	mov	r1, r3
 80019b0:	4610      	mov	r0, r2
 80019b2:	f000 fab5 	bl	8001f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
	...

08001a24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d109      	bne.n	8001a48 <HAL_TIM_PWM_Start+0x24>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	bf14      	ite	ne
 8001a40:	2301      	movne	r3, #1
 8001a42:	2300      	moveq	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	e022      	b.n	8001a8e <HAL_TIM_PWM_Start+0x6a>
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	d109      	bne.n	8001a62 <HAL_TIM_PWM_Start+0x3e>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	bf14      	ite	ne
 8001a5a:	2301      	movne	r3, #1
 8001a5c:	2300      	moveq	r3, #0
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	e015      	b.n	8001a8e <HAL_TIM_PWM_Start+0x6a>
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d109      	bne.n	8001a7c <HAL_TIM_PWM_Start+0x58>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	bf14      	ite	ne
 8001a74:	2301      	movne	r3, #1
 8001a76:	2300      	moveq	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	e008      	b.n	8001a8e <HAL_TIM_PWM_Start+0x6a>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	bf14      	ite	ne
 8001a88:	2301      	movne	r3, #1
 8001a8a:	2300      	moveq	r3, #0
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e072      	b.n	8001b7c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d104      	bne.n	8001aa6 <HAL_TIM_PWM_Start+0x82>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001aa4:	e013      	b.n	8001ace <HAL_TIM_PWM_Start+0xaa>
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	2b04      	cmp	r3, #4
 8001aaa:	d104      	bne.n	8001ab6 <HAL_TIM_PWM_Start+0x92>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ab4:	e00b      	b.n	8001ace <HAL_TIM_PWM_Start+0xaa>
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d104      	bne.n	8001ac6 <HAL_TIM_PWM_Start+0xa2>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ac4:	e003      	b.n	8001ace <HAL_TIM_PWM_Start+0xaa>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2202      	movs	r2, #2
 8001aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	6839      	ldr	r1, [r7, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 fd6c 	bl	80025b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a28      	ldr	r2, [pc, #160]	; (8001b84 <HAL_TIM_PWM_Start+0x160>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d004      	beq.n	8001af0 <HAL_TIM_PWM_Start+0xcc>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a27      	ldr	r2, [pc, #156]	; (8001b88 <HAL_TIM_PWM_Start+0x164>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d101      	bne.n	8001af4 <HAL_TIM_PWM_Start+0xd0>
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <HAL_TIM_PWM_Start+0xd2>
 8001af4:	2300      	movs	r3, #0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d007      	beq.n	8001b0a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a1d      	ldr	r2, [pc, #116]	; (8001b84 <HAL_TIM_PWM_Start+0x160>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d018      	beq.n	8001b46 <HAL_TIM_PWM_Start+0x122>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a1b      	ldr	r2, [pc, #108]	; (8001b88 <HAL_TIM_PWM_Start+0x164>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d013      	beq.n	8001b46 <HAL_TIM_PWM_Start+0x122>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b26:	d00e      	beq.n	8001b46 <HAL_TIM_PWM_Start+0x122>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a17      	ldr	r2, [pc, #92]	; (8001b8c <HAL_TIM_PWM_Start+0x168>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d009      	beq.n	8001b46 <HAL_TIM_PWM_Start+0x122>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a16      	ldr	r2, [pc, #88]	; (8001b90 <HAL_TIM_PWM_Start+0x16c>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d004      	beq.n	8001b46 <HAL_TIM_PWM_Start+0x122>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a14      	ldr	r2, [pc, #80]	; (8001b94 <HAL_TIM_PWM_Start+0x170>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d111      	bne.n	8001b6a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b06      	cmp	r3, #6
 8001b56:	d010      	beq.n	8001b7a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0201 	orr.w	r2, r2, #1
 8001b66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b68:	e007      	b.n	8001b7a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f042 0201 	orr.w	r2, r2, #1
 8001b78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40012c00 	.word	0x40012c00
 8001b88:	40013400 	.word	0x40013400
 8001b8c:	40000400 	.word	0x40000400
 8001b90:	40000800 	.word	0x40000800
 8001b94:	40000c00 	.word	0x40000c00

08001b98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d101      	bne.n	8001bb2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e0ac      	b.n	8001d0c <HAL_TIM_PWM_ConfigChannel+0x174>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b0c      	cmp	r3, #12
 8001bbe:	f200 809f 	bhi.w	8001d00 <HAL_TIM_PWM_ConfigChannel+0x168>
 8001bc2:	a201      	add	r2, pc, #4	; (adr r2, 8001bc8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc8:	08001bfd 	.word	0x08001bfd
 8001bcc:	08001d01 	.word	0x08001d01
 8001bd0:	08001d01 	.word	0x08001d01
 8001bd4:	08001d01 	.word	0x08001d01
 8001bd8:	08001c3d 	.word	0x08001c3d
 8001bdc:	08001d01 	.word	0x08001d01
 8001be0:	08001d01 	.word	0x08001d01
 8001be4:	08001d01 	.word	0x08001d01
 8001be8:	08001c7f 	.word	0x08001c7f
 8001bec:	08001d01 	.word	0x08001d01
 8001bf0:	08001d01 	.word	0x08001d01
 8001bf4:	08001d01 	.word	0x08001d01
 8001bf8:	08001cbf 	.word	0x08001cbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 fa06 	bl	8002014 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	699a      	ldr	r2, [r3, #24]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0208 	orr.w	r2, r2, #8
 8001c16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	699a      	ldr	r2, [r3, #24]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0204 	bic.w	r2, r2, #4
 8001c26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6999      	ldr	r1, [r3, #24]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	691a      	ldr	r2, [r3, #16]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	619a      	str	r2, [r3, #24]
      break;
 8001c3a:	e062      	b.n	8001d02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68b9      	ldr	r1, [r7, #8]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 fa56 	bl	80020f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	699a      	ldr	r2, [r3, #24]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	699a      	ldr	r2, [r3, #24]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6999      	ldr	r1, [r3, #24]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	021a      	lsls	r2, r3, #8
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	619a      	str	r2, [r3, #24]
      break;
 8001c7c:	e041      	b.n	8001d02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68b9      	ldr	r1, [r7, #8]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 faa9 	bl	80021dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	69da      	ldr	r2, [r3, #28]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f042 0208 	orr.w	r2, r2, #8
 8001c98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	69da      	ldr	r2, [r3, #28]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0204 	bic.w	r2, r2, #4
 8001ca8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	69d9      	ldr	r1, [r3, #28]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	691a      	ldr	r2, [r3, #16]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	61da      	str	r2, [r3, #28]
      break;
 8001cbc:	e021      	b.n	8001d02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68b9      	ldr	r1, [r7, #8]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 fafd 	bl	80022c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	69da      	ldr	r2, [r3, #28]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	69da      	ldr	r2, [r3, #28]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ce8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	69d9      	ldr	r1, [r3, #28]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	021a      	lsls	r2, r3, #8
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	61da      	str	r2, [r3, #28]
      break;
 8001cfe:	e000      	b.n	8001d02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8001d00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_TIM_ConfigClockSource+0x18>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e0b3      	b.n	8001e94 <HAL_TIM_ConfigClockSource+0x180>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2202      	movs	r2, #2
 8001d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001d4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d64:	d03e      	beq.n	8001de4 <HAL_TIM_ConfigClockSource+0xd0>
 8001d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d6a:	f200 8087 	bhi.w	8001e7c <HAL_TIM_ConfigClockSource+0x168>
 8001d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d72:	f000 8085 	beq.w	8001e80 <HAL_TIM_ConfigClockSource+0x16c>
 8001d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d7a:	d87f      	bhi.n	8001e7c <HAL_TIM_ConfigClockSource+0x168>
 8001d7c:	2b70      	cmp	r3, #112	; 0x70
 8001d7e:	d01a      	beq.n	8001db6 <HAL_TIM_ConfigClockSource+0xa2>
 8001d80:	2b70      	cmp	r3, #112	; 0x70
 8001d82:	d87b      	bhi.n	8001e7c <HAL_TIM_ConfigClockSource+0x168>
 8001d84:	2b60      	cmp	r3, #96	; 0x60
 8001d86:	d050      	beq.n	8001e2a <HAL_TIM_ConfigClockSource+0x116>
 8001d88:	2b60      	cmp	r3, #96	; 0x60
 8001d8a:	d877      	bhi.n	8001e7c <HAL_TIM_ConfigClockSource+0x168>
 8001d8c:	2b50      	cmp	r3, #80	; 0x50
 8001d8e:	d03c      	beq.n	8001e0a <HAL_TIM_ConfigClockSource+0xf6>
 8001d90:	2b50      	cmp	r3, #80	; 0x50
 8001d92:	d873      	bhi.n	8001e7c <HAL_TIM_ConfigClockSource+0x168>
 8001d94:	2b40      	cmp	r3, #64	; 0x40
 8001d96:	d058      	beq.n	8001e4a <HAL_TIM_ConfigClockSource+0x136>
 8001d98:	2b40      	cmp	r3, #64	; 0x40
 8001d9a:	d86f      	bhi.n	8001e7c <HAL_TIM_ConfigClockSource+0x168>
 8001d9c:	2b30      	cmp	r3, #48	; 0x30
 8001d9e:	d064      	beq.n	8001e6a <HAL_TIM_ConfigClockSource+0x156>
 8001da0:	2b30      	cmp	r3, #48	; 0x30
 8001da2:	d86b      	bhi.n	8001e7c <HAL_TIM_ConfigClockSource+0x168>
 8001da4:	2b20      	cmp	r3, #32
 8001da6:	d060      	beq.n	8001e6a <HAL_TIM_ConfigClockSource+0x156>
 8001da8:	2b20      	cmp	r3, #32
 8001daa:	d867      	bhi.n	8001e7c <HAL_TIM_ConfigClockSource+0x168>
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d05c      	beq.n	8001e6a <HAL_TIM_ConfigClockSource+0x156>
 8001db0:	2b10      	cmp	r3, #16
 8001db2:	d05a      	beq.n	8001e6a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001db4:	e062      	b.n	8001e7c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	6899      	ldr	r1, [r3, #8]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	f000 fbd6 	bl	8002576 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001dd8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	609a      	str	r2, [r3, #8]
      break;
 8001de2:	e04e      	b.n	8001e82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	6899      	ldr	r1, [r3, #8]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f000 fbbf 	bl	8002576 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e06:	609a      	str	r2, [r3, #8]
      break;
 8001e08:	e03b      	b.n	8001e82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6818      	ldr	r0, [r3, #0]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	6859      	ldr	r1, [r3, #4]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	461a      	mov	r2, r3
 8001e18:	f000 fb36 	bl	8002488 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2150      	movs	r1, #80	; 0x50
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 fb8d 	bl	8002542 <TIM_ITRx_SetConfig>
      break;
 8001e28:	e02b      	b.n	8001e82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6818      	ldr	r0, [r3, #0]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	6859      	ldr	r1, [r3, #4]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	461a      	mov	r2, r3
 8001e38:	f000 fb54 	bl	80024e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2160      	movs	r1, #96	; 0x60
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 fb7d 	bl	8002542 <TIM_ITRx_SetConfig>
      break;
 8001e48:	e01b      	b.n	8001e82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6818      	ldr	r0, [r3, #0]
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	6859      	ldr	r1, [r3, #4]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	461a      	mov	r2, r3
 8001e58:	f000 fb16 	bl	8002488 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2140      	movs	r1, #64	; 0x40
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 fb6d 	bl	8002542 <TIM_ITRx_SetConfig>
      break;
 8001e68:	e00b      	b.n	8001e82 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4619      	mov	r1, r3
 8001e74:	4610      	mov	r0, r2
 8001e76:	f000 fb64 	bl	8002542 <TIM_ITRx_SetConfig>
        break;
 8001e7a:	e002      	b.n	8001e82 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001e7c:	bf00      	nop
 8001e7e:	e000      	b.n	8001e82 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001e80:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_TIM_SlaveConfigSynchro+0x18>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e031      	b.n	8001f18 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8001ec4:	6839      	ldr	r1, [r7, #0]
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 fa50 	bl	800236c <TIM_SlaveTimer_SetConfig>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d009      	beq.n	8001ee6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e018      	b.n	8001f18 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ef4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f04:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a33      	ldr	r2, [pc, #204]	; (8002000 <TIM_Base_SetConfig+0xe0>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d013      	beq.n	8001f60 <TIM_Base_SetConfig+0x40>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a32      	ldr	r2, [pc, #200]	; (8002004 <TIM_Base_SetConfig+0xe4>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d00f      	beq.n	8001f60 <TIM_Base_SetConfig+0x40>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f46:	d00b      	beq.n	8001f60 <TIM_Base_SetConfig+0x40>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a2f      	ldr	r2, [pc, #188]	; (8002008 <TIM_Base_SetConfig+0xe8>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d007      	beq.n	8001f60 <TIM_Base_SetConfig+0x40>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a2e      	ldr	r2, [pc, #184]	; (800200c <TIM_Base_SetConfig+0xec>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d003      	beq.n	8001f60 <TIM_Base_SetConfig+0x40>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a2d      	ldr	r2, [pc, #180]	; (8002010 <TIM_Base_SetConfig+0xf0>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d108      	bne.n	8001f72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a22      	ldr	r2, [pc, #136]	; (8002000 <TIM_Base_SetConfig+0xe0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d013      	beq.n	8001fa2 <TIM_Base_SetConfig+0x82>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a21      	ldr	r2, [pc, #132]	; (8002004 <TIM_Base_SetConfig+0xe4>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d00f      	beq.n	8001fa2 <TIM_Base_SetConfig+0x82>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f88:	d00b      	beq.n	8001fa2 <TIM_Base_SetConfig+0x82>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a1e      	ldr	r2, [pc, #120]	; (8002008 <TIM_Base_SetConfig+0xe8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d007      	beq.n	8001fa2 <TIM_Base_SetConfig+0x82>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a1d      	ldr	r2, [pc, #116]	; (800200c <TIM_Base_SetConfig+0xec>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d003      	beq.n	8001fa2 <TIM_Base_SetConfig+0x82>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a1c      	ldr	r2, [pc, #112]	; (8002010 <TIM_Base_SetConfig+0xf0>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d108      	bne.n	8001fb4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a09      	ldr	r2, [pc, #36]	; (8002000 <TIM_Base_SetConfig+0xe0>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d003      	beq.n	8001fe8 <TIM_Base_SetConfig+0xc8>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a08      	ldr	r2, [pc, #32]	; (8002004 <TIM_Base_SetConfig+0xe4>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d103      	bne.n	8001ff0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	691a      	ldr	r2, [r3, #16]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	615a      	str	r2, [r3, #20]
}
 8001ff6:	bf00      	nop
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr
 8002000:	40012c00 	.word	0x40012c00
 8002004:	40013400 	.word	0x40013400
 8002008:	40000400 	.word	0x40000400
 800200c:	40000800 	.word	0x40000800
 8002010:	40000c00 	.word	0x40000c00

08002014 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002014:	b480      	push	{r7}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	f023 0201 	bic.w	r2, r3, #1
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f023 0303 	bic.w	r3, r3, #3
 800204a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f023 0302 	bic.w	r3, r3, #2
 800205c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4313      	orrs	r3, r2
 8002066:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a20      	ldr	r2, [pc, #128]	; (80020ec <TIM_OC1_SetConfig+0xd8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d003      	beq.n	8002078 <TIM_OC1_SetConfig+0x64>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a1f      	ldr	r2, [pc, #124]	; (80020f0 <TIM_OC1_SetConfig+0xdc>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d10c      	bne.n	8002092 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f023 0308 	bic.w	r3, r3, #8
 800207e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	4313      	orrs	r3, r2
 8002088:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f023 0304 	bic.w	r3, r3, #4
 8002090:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a15      	ldr	r2, [pc, #84]	; (80020ec <TIM_OC1_SetConfig+0xd8>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d003      	beq.n	80020a2 <TIM_OC1_SetConfig+0x8e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a14      	ldr	r2, [pc, #80]	; (80020f0 <TIM_OC1_SetConfig+0xdc>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d111      	bne.n	80020c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80020b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	621a      	str	r2, [r3, #32]
}
 80020e0:	bf00      	nop
 80020e2:	371c      	adds	r7, #28
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40012c00 	.word	0x40012c00
 80020f0:	40013400 	.word	0x40013400

080020f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b087      	sub	sp, #28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	f023 0210 	bic.w	r2, r3, #16
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800212a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	021b      	lsls	r3, r3, #8
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	4313      	orrs	r3, r2
 8002136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f023 0320 	bic.w	r3, r3, #32
 800213e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	4313      	orrs	r3, r2
 800214a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a21      	ldr	r2, [pc, #132]	; (80021d4 <TIM_OC2_SetConfig+0xe0>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d003      	beq.n	800215c <TIM_OC2_SetConfig+0x68>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a20      	ldr	r2, [pc, #128]	; (80021d8 <TIM_OC2_SetConfig+0xe4>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d10d      	bne.n	8002178 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	011b      	lsls	r3, r3, #4
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	4313      	orrs	r3, r2
 800216e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002176:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a16      	ldr	r2, [pc, #88]	; (80021d4 <TIM_OC2_SetConfig+0xe0>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d003      	beq.n	8002188 <TIM_OC2_SetConfig+0x94>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a15      	ldr	r2, [pc, #84]	; (80021d8 <TIM_OC2_SetConfig+0xe4>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d113      	bne.n	80021b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800218e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002196:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	621a      	str	r2, [r3, #32]
}
 80021ca:	bf00      	nop
 80021cc:	371c      	adds	r7, #28
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr
 80021d4:	40012c00 	.word	0x40012c00
 80021d8:	40013400 	.word	0x40013400

080021dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021dc:	b480      	push	{r7}
 80021de:	b087      	sub	sp, #28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800220a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f023 0303 	bic.w	r3, r3, #3
 8002212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	4313      	orrs	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	021b      	lsls	r3, r3, #8
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	4313      	orrs	r3, r2
 8002230:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a21      	ldr	r2, [pc, #132]	; (80022bc <TIM_OC3_SetConfig+0xe0>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d003      	beq.n	8002242 <TIM_OC3_SetConfig+0x66>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a20      	ldr	r2, [pc, #128]	; (80022c0 <TIM_OC3_SetConfig+0xe4>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d10d      	bne.n	800225e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002248:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	021b      	lsls	r3, r3, #8
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	4313      	orrs	r3, r2
 8002254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800225c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a16      	ldr	r2, [pc, #88]	; (80022bc <TIM_OC3_SetConfig+0xe0>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d003      	beq.n	800226e <TIM_OC3_SetConfig+0x92>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a15      	ldr	r2, [pc, #84]	; (80022c0 <TIM_OC3_SetConfig+0xe4>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d113      	bne.n	8002296 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002274:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800227c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	4313      	orrs	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	621a      	str	r2, [r3, #32]
}
 80022b0:	bf00      	nop
 80022b2:	371c      	adds	r7, #28
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40012c00 	.word	0x40012c00
 80022c0:	40013400 	.word	0x40013400

080022c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b087      	sub	sp, #28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	021b      	lsls	r3, r3, #8
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	4313      	orrs	r3, r2
 8002306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800230e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	031b      	lsls	r3, r3, #12
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a11      	ldr	r2, [pc, #68]	; (8002364 <TIM_OC4_SetConfig+0xa0>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d003      	beq.n	800232c <TIM_OC4_SetConfig+0x68>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a10      	ldr	r2, [pc, #64]	; (8002368 <TIM_OC4_SetConfig+0xa4>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d109      	bne.n	8002340 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002332:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	019b      	lsls	r3, r3, #6
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	4313      	orrs	r3, r2
 800233e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	621a      	str	r2, [r3, #32]
}
 800235a:	bf00      	nop
 800235c:	371c      	adds	r7, #28
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr
 8002364:	40012c00 	.word	0x40012c00
 8002368:	40013400 	.word	0x40013400

0800236c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002384:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	4313      	orrs	r3, r2
 800238e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f023 0307 	bic.w	r3, r3, #7
 8002396:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	4313      	orrs	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b70      	cmp	r3, #112	; 0x70
 80023b0:	d01a      	beq.n	80023e8 <TIM_SlaveTimer_SetConfig+0x7c>
 80023b2:	2b70      	cmp	r3, #112	; 0x70
 80023b4:	d860      	bhi.n	8002478 <TIM_SlaveTimer_SetConfig+0x10c>
 80023b6:	2b60      	cmp	r3, #96	; 0x60
 80023b8:	d054      	beq.n	8002464 <TIM_SlaveTimer_SetConfig+0xf8>
 80023ba:	2b60      	cmp	r3, #96	; 0x60
 80023bc:	d85c      	bhi.n	8002478 <TIM_SlaveTimer_SetConfig+0x10c>
 80023be:	2b50      	cmp	r3, #80	; 0x50
 80023c0:	d046      	beq.n	8002450 <TIM_SlaveTimer_SetConfig+0xe4>
 80023c2:	2b50      	cmp	r3, #80	; 0x50
 80023c4:	d858      	bhi.n	8002478 <TIM_SlaveTimer_SetConfig+0x10c>
 80023c6:	2b40      	cmp	r3, #64	; 0x40
 80023c8:	d019      	beq.n	80023fe <TIM_SlaveTimer_SetConfig+0x92>
 80023ca:	2b40      	cmp	r3, #64	; 0x40
 80023cc:	d854      	bhi.n	8002478 <TIM_SlaveTimer_SetConfig+0x10c>
 80023ce:	2b30      	cmp	r3, #48	; 0x30
 80023d0:	d054      	beq.n	800247c <TIM_SlaveTimer_SetConfig+0x110>
 80023d2:	2b30      	cmp	r3, #48	; 0x30
 80023d4:	d850      	bhi.n	8002478 <TIM_SlaveTimer_SetConfig+0x10c>
 80023d6:	2b20      	cmp	r3, #32
 80023d8:	d050      	beq.n	800247c <TIM_SlaveTimer_SetConfig+0x110>
 80023da:	2b20      	cmp	r3, #32
 80023dc:	d84c      	bhi.n	8002478 <TIM_SlaveTimer_SetConfig+0x10c>
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d04c      	beq.n	800247c <TIM_SlaveTimer_SetConfig+0x110>
 80023e2:	2b10      	cmp	r3, #16
 80023e4:	d04a      	beq.n	800247c <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80023e6:	e047      	b.n	8002478 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6818      	ldr	r0, [r3, #0]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	68d9      	ldr	r1, [r3, #12]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	f000 f8bd 	bl	8002576 <TIM_ETR_SetConfig>
      break;
 80023fc:	e03f      	b.n	800247e <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2b05      	cmp	r3, #5
 8002404:	d101      	bne.n	800240a <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e03a      	b.n	8002480 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6a1a      	ldr	r2, [r3, #32]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0201 	bic.w	r2, r2, #1
 8002420:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002430:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	4313      	orrs	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	621a      	str	r2, [r3, #32]
      break;
 800244e:	e016      	b.n	800247e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6818      	ldr	r0, [r3, #0]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	6899      	ldr	r1, [r3, #8]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	461a      	mov	r2, r3
 800245e:	f000 f813 	bl	8002488 <TIM_TI1_ConfigInputStage>
      break;
 8002462:	e00c      	b.n	800247e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6818      	ldr	r0, [r3, #0]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	6899      	ldr	r1, [r3, #8]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	461a      	mov	r2, r3
 8002472:	f000 f837 	bl	80024e4 <TIM_TI2_ConfigInputStage>
      break;
 8002476:	e002      	b.n	800247e <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8002478:	bf00      	nop
 800247a:	e000      	b.n	800247e <TIM_SlaveTimer_SetConfig+0x112>
        break;
 800247c:	bf00      	nop
  }
  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002488:	b480      	push	{r7}
 800248a:	b087      	sub	sp, #28
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	f023 0201 	bic.w	r2, r3, #1
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	f023 030a 	bic.w	r3, r3, #10
 80024c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	621a      	str	r2, [r3, #32]
}
 80024da:	bf00      	nop
 80024dc:	371c      	adds	r7, #28
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr

080024e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	f023 0210 	bic.w	r2, r3, #16
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800250e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	031b      	lsls	r3, r3, #12
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	4313      	orrs	r3, r2
 8002518:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002520:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	011b      	lsls	r3, r3, #4
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	621a      	str	r2, [r3, #32]
}
 8002538:	bf00      	nop
 800253a:	371c      	adds	r7, #28
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr

08002542 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002542:	b480      	push	{r7}
 8002544:	b085      	sub	sp, #20
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002558:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4313      	orrs	r3, r2
 8002560:	f043 0307 	orr.w	r3, r3, #7
 8002564:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	609a      	str	r2, [r3, #8]
}
 800256c:	bf00      	nop
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr

08002576 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002576:	b480      	push	{r7}
 8002578:	b087      	sub	sp, #28
 800257a:	af00      	add	r7, sp, #0
 800257c:	60f8      	str	r0, [r7, #12]
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
 8002582:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002590:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	021a      	lsls	r2, r3, #8
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	431a      	orrs	r2, r3
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	4313      	orrs	r3, r2
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	609a      	str	r2, [r3, #8]
}
 80025aa:	bf00      	nop
 80025ac:	371c      	adds	r7, #28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr

080025b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b087      	sub	sp, #28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	f003 031f 	and.w	r3, r3, #31
 80025c6:	2201      	movs	r2, #1
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6a1a      	ldr	r2, [r3, #32]
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	43db      	mvns	r3, r3
 80025d6:	401a      	ands	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a1a      	ldr	r2, [r3, #32]
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	f003 031f 	and.w	r3, r3, #31
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ec:	431a      	orrs	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	621a      	str	r2, [r3, #32]
}
 80025f2:	bf00      	nop
 80025f4:	371c      	adds	r7, #28
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002610:	2302      	movs	r3, #2
 8002612:	e050      	b.n	80026b6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800263a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	4313      	orrs	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a1b      	ldr	r2, [pc, #108]	; (80026c0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d018      	beq.n	800268a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a19      	ldr	r2, [pc, #100]	; (80026c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d013      	beq.n	800268a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266a:	d00e      	beq.n	800268a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a15      	ldr	r2, [pc, #84]	; (80026c8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d009      	beq.n	800268a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a14      	ldr	r2, [pc, #80]	; (80026cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d004      	beq.n	800268a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a12      	ldr	r2, [pc, #72]	; (80026d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d10c      	bne.n	80026a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002690:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	4313      	orrs	r3, r2
 800269a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr
 80026c0:	40012c00 	.word	0x40012c00
 80026c4:	40013400 	.word	0x40013400
 80026c8:	40000400 	.word	0x40000400
 80026cc:	40000800 	.word	0x40000800
 80026d0:	40000c00 	.word	0x40000c00

080026d4 <__libc_init_array>:
 80026d4:	b570      	push	{r4, r5, r6, lr}
 80026d6:	2600      	movs	r6, #0
 80026d8:	4d0c      	ldr	r5, [pc, #48]	; (800270c <__libc_init_array+0x38>)
 80026da:	4c0d      	ldr	r4, [pc, #52]	; (8002710 <__libc_init_array+0x3c>)
 80026dc:	1b64      	subs	r4, r4, r5
 80026de:	10a4      	asrs	r4, r4, #2
 80026e0:	42a6      	cmp	r6, r4
 80026e2:	d109      	bne.n	80026f8 <__libc_init_array+0x24>
 80026e4:	f000 f822 	bl	800272c <_init>
 80026e8:	2600      	movs	r6, #0
 80026ea:	4d0a      	ldr	r5, [pc, #40]	; (8002714 <__libc_init_array+0x40>)
 80026ec:	4c0a      	ldr	r4, [pc, #40]	; (8002718 <__libc_init_array+0x44>)
 80026ee:	1b64      	subs	r4, r4, r5
 80026f0:	10a4      	asrs	r4, r4, #2
 80026f2:	42a6      	cmp	r6, r4
 80026f4:	d105      	bne.n	8002702 <__libc_init_array+0x2e>
 80026f6:	bd70      	pop	{r4, r5, r6, pc}
 80026f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80026fc:	4798      	blx	r3
 80026fe:	3601      	adds	r6, #1
 8002700:	e7ee      	b.n	80026e0 <__libc_init_array+0xc>
 8002702:	f855 3b04 	ldr.w	r3, [r5], #4
 8002706:	4798      	blx	r3
 8002708:	3601      	adds	r6, #1
 800270a:	e7f2      	b.n	80026f2 <__libc_init_array+0x1e>
 800270c:	08002764 	.word	0x08002764
 8002710:	08002764 	.word	0x08002764
 8002714:	08002764 	.word	0x08002764
 8002718:	08002768 	.word	0x08002768

0800271c <memset>:
 800271c:	4603      	mov	r3, r0
 800271e:	4402      	add	r2, r0
 8002720:	4293      	cmp	r3, r2
 8002722:	d100      	bne.n	8002726 <memset+0xa>
 8002724:	4770      	bx	lr
 8002726:	f803 1b01 	strb.w	r1, [r3], #1
 800272a:	e7f9      	b.n	8002720 <memset+0x4>

0800272c <_init>:
 800272c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800272e:	bf00      	nop
 8002730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002732:	bc08      	pop	{r3}
 8002734:	469e      	mov	lr, r3
 8002736:	4770      	bx	lr

08002738 <_fini>:
 8002738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800273a:	bf00      	nop
 800273c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800273e:	bc08      	pop	{r3}
 8002740:	469e      	mov	lr, r3
 8002742:	4770      	bx	lr
