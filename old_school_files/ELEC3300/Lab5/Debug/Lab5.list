
Lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003730  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a4  08003914  08003914  00013914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fb8  08003fb8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003fb8  08003fb8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fb8  08003fb8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fb8  08003fb8  00013fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fbc  08003fbc  00013fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003fc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000070  08004030  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08004030  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e07  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bc7  00000000  00000000  00027ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  00029a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f8  00000000  00000000  0002a258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a004  00000000  00000000  0002a950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000097af  00000000  00000000  00044954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097247  00000000  00000000  0004e103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e534a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002248  00000000  00000000  000e539c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	080038fc 	.word	0x080038fc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	080038fc 	.word	0x080038fc

08000224 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	e002      	b.n	8000234 <Delay+0x10>
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	3b01      	subs	r3, #1
 8000232:	607b      	str	r3, [r7, #4]
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d1f9      	bne.n	800022e <Delay+0xa>
 800023a:	bf00      	nop
 800023c:	bf00      	nop
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr

08000246 <LCD_INIT>:

void LCD_INIT ( void )
{
 8000246:	b580      	push	{r7, lr}
 8000248:	b082      	sub	sp, #8
 800024a:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 800024c:	2001      	movs	r0, #1
 800024e:	f000 f829 	bl	80002a4 <LCD_BackLed_Control>
	LCD_Rst();
 8000252:	f000 f80f 	bl	8000274 <LCD_Rst>
	LCD_REG_Config();
 8000256:	f000 f85f 	bl	8000318 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800025a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800025e:	9300      	str	r3, [sp, #0]
 8000260:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000264:	22f0      	movs	r2, #240	; 0xf0
 8000266:	2100      	movs	r1, #0
 8000268:	2000      	movs	r0, #0
 800026a:	f000 f9e6 	bl	800063a <LCD_Clear>
}
 800026e:	bf00      	nop
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}

08000274 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2102      	movs	r1, #2
 800027c:	4807      	ldr	r0, [pc, #28]	; (800029c <LCD_Rst+0x28>)
 800027e:	f001 ffb4 	bl	80021ea <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000282:	4807      	ldr	r0, [pc, #28]	; (80002a0 <LCD_Rst+0x2c>)
 8000284:	f7ff ffce 	bl	8000224 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000288:	2201      	movs	r2, #1
 800028a:	2102      	movs	r1, #2
 800028c:	4803      	ldr	r0, [pc, #12]	; (800029c <LCD_Rst+0x28>)
 800028e:	f001 ffac 	bl	80021ea <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000292:	4803      	ldr	r0, [pc, #12]	; (80002a0 <LCD_Rst+0x2c>)
 8000294:	f7ff ffc6 	bl	8000224 <Delay>
}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}
 800029c:	40011800 	.word	0x40011800
 80002a0:	0002bffc 	.word	0x0002bffc

080002a4 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d006      	beq.n	80002c2 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 80002b4:	2200      	movs	r2, #0
 80002b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002ba:	4807      	ldr	r0, [pc, #28]	; (80002d8 <LCD_BackLed_Control+0x34>)
 80002bc:	f001 ff95 	bl	80021ea <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 80002c0:	e005      	b.n	80002ce <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 80002c2:	2201      	movs	r2, #1
 80002c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002c8:	4803      	ldr	r0, [pc, #12]	; (80002d8 <LCD_BackLed_Control+0x34>)
 80002ca:	f001 ff8e 	bl	80021ea <HAL_GPIO_WritePin>
}
 80002ce:	bf00      	nop
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40011400 	.word	0x40011400

080002dc <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002e6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80002ea:	88fb      	ldrh	r3, [r7, #6]
 80002ec:	8013      	strh	r3, [r2, #0]
}
 80002ee:	bf00      	nop
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr

080002f8 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000302:	4a04      	ldr	r2, [pc, #16]	; (8000314 <LCD_Write_Data+0x1c>)
 8000304:	88fb      	ldrh	r3, [r7, #6]
 8000306:	8013      	strh	r3, [r2, #0]
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	60020000 	.word	0x60020000

08000318 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 800031c:	20cf      	movs	r0, #207	; 0xcf
 800031e:	f7ff ffdd 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000322:	2000      	movs	r0, #0
 8000324:	f7ff ffe8 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000328:	2081      	movs	r0, #129	; 0x81
 800032a:	f7ff ffe5 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 800032e:	2030      	movs	r0, #48	; 0x30
 8000330:	f7ff ffe2 	bl	80002f8 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000334:	20ed      	movs	r0, #237	; 0xed
 8000336:	f7ff ffd1 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 800033a:	2064      	movs	r0, #100	; 0x64
 800033c:	f7ff ffdc 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000340:	2003      	movs	r0, #3
 8000342:	f7ff ffd9 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8000346:	2012      	movs	r0, #18
 8000348:	f7ff ffd6 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 800034c:	2081      	movs	r0, #129	; 0x81
 800034e:	f7ff ffd3 	bl	80002f8 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000352:	20e8      	movs	r0, #232	; 0xe8
 8000354:	f7ff ffc2 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000358:	2085      	movs	r0, #133	; 0x85
 800035a:	f7ff ffcd 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800035e:	2010      	movs	r0, #16
 8000360:	f7ff ffca 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000364:	2078      	movs	r0, #120	; 0x78
 8000366:	f7ff ffc7 	bl	80002f8 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800036a:	20cb      	movs	r0, #203	; 0xcb
 800036c:	f7ff ffb6 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000370:	2039      	movs	r0, #57	; 0x39
 8000372:	f7ff ffc1 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000376:	202c      	movs	r0, #44	; 0x2c
 8000378:	f7ff ffbe 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800037c:	2000      	movs	r0, #0
 800037e:	f7ff ffbb 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000382:	2034      	movs	r0, #52	; 0x34
 8000384:	f7ff ffb8 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000388:	2002      	movs	r0, #2
 800038a:	f7ff ffb5 	bl	80002f8 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 800038e:	20f7      	movs	r0, #247	; 0xf7
 8000390:	f7ff ffa4 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000394:	2020      	movs	r0, #32
 8000396:	f7ff ffaf 	bl	80002f8 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800039a:	20ea      	movs	r0, #234	; 0xea
 800039c:	f7ff ff9e 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80003a0:	2000      	movs	r0, #0
 80003a2:	f7ff ffa9 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80003a6:	2000      	movs	r0, #0
 80003a8:	f7ff ffa6 	bl	80002f8 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 80003ac:	20b1      	movs	r0, #177	; 0xb1
 80003ae:	f7ff ff95 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80003b2:	2000      	movs	r0, #0
 80003b4:	f7ff ffa0 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80003b8:	201b      	movs	r0, #27
 80003ba:	f7ff ff9d 	bl	80002f8 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 80003be:	20b6      	movs	r0, #182	; 0xb6
 80003c0:	f7ff ff8c 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 80003c4:	200a      	movs	r0, #10
 80003c6:	f7ff ff97 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 80003ca:	20a2      	movs	r0, #162	; 0xa2
 80003cc:	f7ff ff94 	bl	80002f8 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 80003d0:	20c0      	movs	r0, #192	; 0xc0
 80003d2:	f7ff ff83 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 80003d6:	2035      	movs	r0, #53	; 0x35
 80003d8:	f7ff ff8e 	bl	80002f8 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 80003dc:	20c1      	movs	r0, #193	; 0xc1
 80003de:	f7ff ff7d 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 80003e2:	2011      	movs	r0, #17
 80003e4:	f7ff ff88 	bl	80002f8 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 80003e8:	20c5      	movs	r0, #197	; 0xc5
 80003ea:	f7ff ff77 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 80003ee:	2045      	movs	r0, #69	; 0x45
 80003f0:	f7ff ff82 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 80003f4:	2045      	movs	r0, #69	; 0x45
 80003f6:	f7ff ff7f 	bl	80002f8 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 80003fa:	20c7      	movs	r0, #199	; 0xc7
 80003fc:	f7ff ff6e 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000400:	20a2      	movs	r0, #162	; 0xa2
 8000402:	f7ff ff79 	bl	80002f8 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000406:	20f2      	movs	r0, #242	; 0xf2
 8000408:	f7ff ff68 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800040c:	2000      	movs	r0, #0
 800040e:	f7ff ff73 	bl	80002f8 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000412:	2026      	movs	r0, #38	; 0x26
 8000414:	f7ff ff62 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8000418:	2001      	movs	r0, #1
 800041a:	f7ff ff6d 	bl	80002f8 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 800041e:	20e0      	movs	r0, #224	; 0xe0
 8000420:	f7ff ff5c 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000424:	200f      	movs	r0, #15
 8000426:	f7ff ff67 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 800042a:	2026      	movs	r0, #38	; 0x26
 800042c:	f7ff ff64 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000430:	2024      	movs	r0, #36	; 0x24
 8000432:	f7ff ff61 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8000436:	200b      	movs	r0, #11
 8000438:	f7ff ff5e 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 800043c:	200e      	movs	r0, #14
 800043e:	f7ff ff5b 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000442:	2009      	movs	r0, #9
 8000444:	f7ff ff58 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8000448:	2054      	movs	r0, #84	; 0x54
 800044a:	f7ff ff55 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 800044e:	20a8      	movs	r0, #168	; 0xa8
 8000450:	f7ff ff52 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8000454:	2046      	movs	r0, #70	; 0x46
 8000456:	f7ff ff4f 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 800045a:	200c      	movs	r0, #12
 800045c:	f7ff ff4c 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000460:	2017      	movs	r0, #23
 8000462:	f7ff ff49 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000466:	2009      	movs	r0, #9
 8000468:	f7ff ff46 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 800046c:	200f      	movs	r0, #15
 800046e:	f7ff ff43 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000472:	2007      	movs	r0, #7
 8000474:	f7ff ff40 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000478:	2000      	movs	r0, #0
 800047a:	f7ff ff3d 	bl	80002f8 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 800047e:	20e1      	movs	r0, #225	; 0xe1
 8000480:	f7ff ff2c 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000484:	2000      	movs	r0, #0
 8000486:	f7ff ff37 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800048a:	2019      	movs	r0, #25
 800048c:	f7ff ff34 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000490:	201b      	movs	r0, #27
 8000492:	f7ff ff31 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000496:	2004      	movs	r0, #4
 8000498:	f7ff ff2e 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800049c:	2010      	movs	r0, #16
 800049e:	f7ff ff2b 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80004a2:	2007      	movs	r0, #7
 80004a4:	f7ff ff28 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 80004a8:	202a      	movs	r0, #42	; 0x2a
 80004aa:	f7ff ff25 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 80004ae:	2047      	movs	r0, #71	; 0x47
 80004b0:	f7ff ff22 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 80004b4:	2039      	movs	r0, #57	; 0x39
 80004b6:	f7ff ff1f 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80004ba:	2003      	movs	r0, #3
 80004bc:	f7ff ff1c 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80004c0:	2006      	movs	r0, #6
 80004c2:	f7ff ff19 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80004c6:	2006      	movs	r0, #6
 80004c8:	f7ff ff16 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 80004cc:	2030      	movs	r0, #48	; 0x30
 80004ce:	f7ff ff13 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 80004d2:	2038      	movs	r0, #56	; 0x38
 80004d4:	f7ff ff10 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80004d8:	200f      	movs	r0, #15
 80004da:	f7ff ff0d 	bl	80002f8 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 80004de:	2036      	movs	r0, #54	; 0x36
 80004e0:	f7ff fefc 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 80004e4:	20c8      	movs	r0, #200	; 0xc8
 80004e6:	f7ff ff07 	bl	80002f8 <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 80004ea:	202a      	movs	r0, #42	; 0x2a
 80004ec:	f7ff fef6 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80004f0:	2000      	movs	r0, #0
 80004f2:	f7ff ff01 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80004f6:	2000      	movs	r0, #0
 80004f8:	f7ff fefe 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80004fc:	2000      	movs	r0, #0
 80004fe:	f7ff fefb 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000502:	20ef      	movs	r0, #239	; 0xef
 8000504:	f7ff fef8 	bl	80002f8 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000508:	202b      	movs	r0, #43	; 0x2b
 800050a:	f7ff fee7 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800050e:	2000      	movs	r0, #0
 8000510:	f7ff fef2 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000514:	2000      	movs	r0, #0
 8000516:	f7ff feef 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 800051a:	2001      	movs	r0, #1
 800051c:	f7ff feec 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000520:	203f      	movs	r0, #63	; 0x3f
 8000522:	f7ff fee9 	bl	80002f8 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000526:	203a      	movs	r0, #58	; 0x3a
 8000528:	f7ff fed8 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 800052c:	2055      	movs	r0, #85	; 0x55
 800052e:	f7ff fee3 	bl	80002f8 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000532:	2011      	movs	r0, #17
 8000534:	f7ff fed2 	bl	80002dc <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000538:	4803      	ldr	r0, [pc, #12]	; (8000548 <LCD_REG_Config+0x230>)
 800053a:	f7ff fe73 	bl	8000224 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 800053e:	2029      	movs	r0, #41	; 0x29
 8000540:	f7ff fecc 	bl	80002dc <LCD_Write_Cmd>
	
	
}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}
 8000548:	0002bffc 	.word	0x0002bffc

0800054c <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 800054c:	b590      	push	{r4, r7, lr}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	4604      	mov	r4, r0
 8000554:	4608      	mov	r0, r1
 8000556:	4611      	mov	r1, r2
 8000558:	461a      	mov	r2, r3
 800055a:	4623      	mov	r3, r4
 800055c:	80fb      	strh	r3, [r7, #6]
 800055e:	4603      	mov	r3, r0
 8000560:	80bb      	strh	r3, [r7, #4]
 8000562:	460b      	mov	r3, r1
 8000564:	807b      	strh	r3, [r7, #2]
 8000566:	4613      	mov	r3, r2
 8000568:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 800056a:	202a      	movs	r0, #42	; 0x2a
 800056c:	f7ff feb6 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );
 8000570:	88fb      	ldrh	r3, [r7, #6]
 8000572:	0a1b      	lsrs	r3, r3, #8
 8000574:	b29b      	uxth	r3, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff febe 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );
 800057c:	88fb      	ldrh	r3, [r7, #6]
 800057e:	b2db      	uxtb	r3, r3
 8000580:	b29b      	uxth	r3, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff feb8 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000588:	88fa      	ldrh	r2, [r7, #6]
 800058a:	887b      	ldrh	r3, [r7, #2]
 800058c:	4413      	add	r3, r2
 800058e:	3b01      	subs	r3, #1
 8000590:	121b      	asrs	r3, r3, #8
 8000592:	b29b      	uxth	r3, r3
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff feaf 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800059a:	88fa      	ldrh	r2, [r7, #6]
 800059c:	887b      	ldrh	r3, [r7, #2]
 800059e:	4413      	add	r3, r2
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	3b01      	subs	r3, #1
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff fea4 	bl	80002f8 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 80005b0:	202b      	movs	r0, #43	; 0x2b
 80005b2:	f7ff fe93 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 80005b6:	88bb      	ldrh	r3, [r7, #4]
 80005b8:	0a1b      	lsrs	r3, r3, #8
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe9b 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 80005c2:	88bb      	ldrh	r3, [r7, #4]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff fe95 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 80005ce:	88ba      	ldrh	r2, [r7, #4]
 80005d0:	883b      	ldrh	r3, [r7, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	3b01      	subs	r3, #1
 80005d6:	121b      	asrs	r3, r3, #8
 80005d8:	b29b      	uxth	r3, r3
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff fe8c 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80005e0:	88ba      	ldrh	r2, [r7, #4]
 80005e2:	883b      	ldrh	r3, [r7, #0]
 80005e4:	4413      	add	r3, r2
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	3b01      	subs	r3, #1
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff fe81 	bl	80002f8 <LCD_Write_Data>
	
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd90      	pop	{r4, r7, pc}

080005fe <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b084      	sub	sp, #16
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	460b      	mov	r3, r1
 8000608:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 800060e:	202c      	movs	r0, #44	; 0x2c
 8000610:	f7ff fe64 	bl	80002dc <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	e006      	b.n	8000628 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 800061a:	887b      	ldrh	r3, [r7, #2]
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff fe6b 	bl	80002f8 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	3301      	adds	r3, #1
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	429a      	cmp	r2, r3
 800062e:	d3f4      	bcc.n	800061a <LCD_FillColor+0x1c>
		
}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 800063a:	b590      	push	{r4, r7, lr}
 800063c:	b083      	sub	sp, #12
 800063e:	af00      	add	r7, sp, #0
 8000640:	4604      	mov	r4, r0
 8000642:	4608      	mov	r0, r1
 8000644:	4611      	mov	r1, r2
 8000646:	461a      	mov	r2, r3
 8000648:	4623      	mov	r3, r4
 800064a:	80fb      	strh	r3, [r7, #6]
 800064c:	4603      	mov	r3, r0
 800064e:	80bb      	strh	r3, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	807b      	strh	r3, [r7, #2]
 8000654:	4613      	mov	r3, r2
 8000656:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000658:	883b      	ldrh	r3, [r7, #0]
 800065a:	887a      	ldrh	r2, [r7, #2]
 800065c:	88b9      	ldrh	r1, [r7, #4]
 800065e:	88f8      	ldrh	r0, [r7, #6]
 8000660:	f7ff ff74 	bl	800054c <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000664:	887b      	ldrh	r3, [r7, #2]
 8000666:	883a      	ldrh	r2, [r7, #0]
 8000668:	fb02 f303 	mul.w	r3, r2, r3
 800066c:	461a      	mov	r2, r3
 800066e:	8b3b      	ldrh	r3, [r7, #24]
 8000670:	4619      	mov	r1, r3
 8000672:	4610      	mov	r0, r2
 8000674:	f7ff ffc3 	bl	80005fe <LCD_FillColor>
	
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	bd90      	pop	{r4, r7, pc}

08000680 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	80fb      	strh	r3, [r7, #6]
 800068a:	460b      	mov	r3, r1
 800068c:	80bb      	strh	r3, [r7, #4]
 800068e:	4613      	mov	r3, r2
 8000690:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8000692:	78fb      	ldrb	r3, [r7, #3]
 8000694:	3b20      	subs	r3, #32
 8000696:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000698:	88b9      	ldrh	r1, [r7, #4]
 800069a:	88f8      	ldrh	r0, [r7, #6]
 800069c:	2310      	movs	r3, #16
 800069e:	2208      	movs	r2, #8
 80006a0:	f7ff ff54 	bl	800054c <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80006a4:	202c      	movs	r0, #44	; 0x2c
 80006a6:	f7ff fe19 	bl	80002dc <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80006aa:	2300      	movs	r3, #0
 80006ac:	73bb      	strb	r3, [r7, #14]
 80006ae:	e023      	b.n	80006f8 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80006b0:	7b3a      	ldrb	r2, [r7, #12]
 80006b2:	7bbb      	ldrb	r3, [r7, #14]
 80006b4:	4914      	ldr	r1, [pc, #80]	; (8000708 <LCD_DrawChar+0x88>)
 80006b6:	0112      	lsls	r2, r2, #4
 80006b8:	440a      	add	r2, r1
 80006ba:	4413      	add	r3, r2
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80006c0:	2300      	movs	r3, #0
 80006c2:	737b      	strb	r3, [r7, #13]
 80006c4:	e012      	b.n	80006ec <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	f003 0301 	and.w	r3, r3, #1
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d003      	beq.n	80006d8 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 80006d0:	201f      	movs	r0, #31
 80006d2:	f7ff fe11 	bl	80002f8 <LCD_Write_Data>
 80006d6:	e003      	b.n	80006e0 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 80006d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80006dc:	f7ff fe0c 	bl	80002f8 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	085b      	lsrs	r3, r3, #1
 80006e4:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80006e6:	7b7b      	ldrb	r3, [r7, #13]
 80006e8:	3301      	adds	r3, #1
 80006ea:	737b      	strb	r3, [r7, #13]
 80006ec:	7b7b      	ldrb	r3, [r7, #13]
 80006ee:	2b07      	cmp	r3, #7
 80006f0:	d9e9      	bls.n	80006c6 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80006f2:	7bbb      	ldrb	r3, [r7, #14]
 80006f4:	3301      	adds	r3, #1
 80006f6:	73bb      	strb	r3, [r7, #14]
 80006f8:	7bbb      	ldrb	r3, [r7, #14]
 80006fa:	2b0f      	cmp	r3, #15
 80006fc:	d9d8      	bls.n	80006b0 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 80006fe:	bf00      	nop
 8000700:	bf00      	nop
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	0800397c 	.word	0x0800397c

0800070c <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	603a      	str	r2, [r7, #0]
 8000716:	80fb      	strh	r3, [r7, #6]
 8000718:	460b      	mov	r3, r1
 800071a:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 800071c:	e01c      	b.n	8000758 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	2be8      	cmp	r3, #232	; 0xe8
 8000722:	d904      	bls.n	800072e <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000724:	2300      	movs	r3, #0
 8000726:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8000728:	88bb      	ldrh	r3, [r7, #4]
 800072a:	3310      	adds	r3, #16
 800072c:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 800072e:	88bb      	ldrh	r3, [r7, #4]
 8000730:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8000734:	d903      	bls.n	800073e <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000736:	2300      	movs	r3, #0
 8000738:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 800073a:	2300      	movs	r3, #0
 800073c:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	781a      	ldrb	r2, [r3, #0]
 8000742:	88b9      	ldrh	r1, [r7, #4]
 8000744:	88fb      	ldrh	r3, [r7, #6]
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff9a 	bl	8000680 <LCD_DrawChar>
		
		pStr ++;
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	3301      	adds	r3, #1
 8000750:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	3308      	adds	r3, #8
 8000756:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d1de      	bne.n	800071e <LCD_DrawString+0x12>
		
	}
	
}
 8000760:	bf00      	nop
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	; 0x28
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000772:	f000 fd0f 	bl	8001194 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000776:	f000 f9bd 	bl	8000af4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077a:	f000 fa95 	bl	8000ca8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800077e:	f000 fa17 	bl	8000bb0 <MX_ADC1_Init>
  MX_FSMC_Init();
 8000782:	f000 fb2d 	bl	8000de0 <MX_FSMC_Init>
  MX_ADC2_Init();
 8000786:	f000 fa51 	bl	8000c2c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 800078a:	48b3      	ldr	r0, [pc, #716]	; (8000a58 <main+0x2ec>)
 800078c:	f001 f9f2 	bl	8001b74 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2);
 8000790:	48b2      	ldr	r0, [pc, #712]	; (8000a5c <main+0x2f0>)
 8000792:	f001 f9ef 	bl	8001b74 <HAL_ADCEx_Calibration_Start>
  LCD_INIT();
 8000796:	f7ff fd56 	bl	8000246 <LCD_INIT>
  LCD_DrawString(110, 15, "DEC");
 800079a:	4ab1      	ldr	r2, [pc, #708]	; (8000a60 <main+0x2f4>)
 800079c:	210f      	movs	r1, #15
 800079e:	206e      	movs	r0, #110	; 0x6e
 80007a0:	f7ff ffb4 	bl	800070c <LCD_DrawString>
  LCD_DrawString(170, 15, "HEX");
 80007a4:	4aaf      	ldr	r2, [pc, #700]	; (8000a64 <main+0x2f8>)
 80007a6:	210f      	movs	r1, #15
 80007a8:	20aa      	movs	r0, #170	; 0xaa
 80007aa:	f7ff ffaf 	bl	800070c <LCD_DrawString>
  LCD_DrawString(5, 30, "ADC Value1: ");
 80007ae:	4aae      	ldr	r2, [pc, #696]	; (8000a68 <main+0x2fc>)
 80007b0:	211e      	movs	r1, #30
 80007b2:	2005      	movs	r0, #5
 80007b4:	f7ff ffaa 	bl	800070c <LCD_DrawString>
  LCD_DrawString(5, 50, "ADC Value2: ");
 80007b8:	4aac      	ldr	r2, [pc, #688]	; (8000a6c <main+0x300>)
 80007ba:	2132      	movs	r1, #50	; 0x32
 80007bc:	2005      	movs	r0, #5
 80007be:	f7ff ffa5 	bl	800070c <LCD_DrawString>
  uint8_t status = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  HAL_ADC_Start(&hadc2);
 80007c8:	48a4      	ldr	r0, [pc, #656]	; (8000a5c <main+0x2f0>)
 80007ca:	f000 fe53 	bl	8001474 <HAL_ADC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_ADC_PollForConversion(&hadc2, 100);
 80007ce:	2164      	movs	r1, #100	; 0x64
 80007d0:	48a2      	ldr	r0, [pc, #648]	; (8000a5c <main+0x2f0>)
 80007d2:	f000 ff29 	bl	8001628 <HAL_ADC_PollForConversion>
	uint32_t adc_value2 =  HAL_ADC_GetValue(&hadc2);
 80007d6:	48a1      	ldr	r0, [pc, #644]	; (8000a5c <main+0x2f0>)
 80007d8:	f001 f82c 	bl	8001834 <HAL_ADC_GetValue>
 80007dc:	6238      	str	r0, [r7, #32]
	char str2[5];
	if(adc_value2<10)
 80007de:	6a3b      	ldr	r3, [r7, #32]
 80007e0:	2b09      	cmp	r3, #9
 80007e2:	d807      	bhi.n	80007f4 <main+0x88>
	{
		sprintf(str2, "000%d", adc_value2);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	6a3a      	ldr	r2, [r7, #32]
 80007ea:	49a1      	ldr	r1, [pc, #644]	; (8000a70 <main+0x304>)
 80007ec:	4618      	mov	r0, r3
 80007ee:	f002 fc19 	bl	8003024 <siprintf>
 80007f2:	e02b      	b.n	800084c <main+0xe0>
	}
	else if(adc_value2>=10 && adc_value2<100)
 80007f4:	6a3b      	ldr	r3, [r7, #32]
 80007f6:	2b09      	cmp	r3, #9
 80007f8:	d90a      	bls.n	8000810 <main+0xa4>
 80007fa:	6a3b      	ldr	r3, [r7, #32]
 80007fc:	2b63      	cmp	r3, #99	; 0x63
 80007fe:	d807      	bhi.n	8000810 <main+0xa4>
	{
		sprintf(str2, "00%d", adc_value2);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	6a3a      	ldr	r2, [r7, #32]
 8000806:	499b      	ldr	r1, [pc, #620]	; (8000a74 <main+0x308>)
 8000808:	4618      	mov	r0, r3
 800080a:	f002 fc0b 	bl	8003024 <siprintf>
 800080e:	e01d      	b.n	800084c <main+0xe0>
	}
	else if(adc_value2>=100 && adc_value2<1000)
 8000810:	6a3b      	ldr	r3, [r7, #32]
 8000812:	2b63      	cmp	r3, #99	; 0x63
 8000814:	d90b      	bls.n	800082e <main+0xc2>
 8000816:	6a3b      	ldr	r3, [r7, #32]
 8000818:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800081c:	d207      	bcs.n	800082e <main+0xc2>
	{
		sprintf(str2, "0%d", adc_value2);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	6a3a      	ldr	r2, [r7, #32]
 8000824:	4994      	ldr	r1, [pc, #592]	; (8000a78 <main+0x30c>)
 8000826:	4618      	mov	r0, r3
 8000828:	f002 fbfc 	bl	8003024 <siprintf>
 800082c:	e00e      	b.n	800084c <main+0xe0>
	}
	else if(adc_value2>=1000 && adc_value2<=4095)
 800082e:	6a3b      	ldr	r3, [r7, #32]
 8000830:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000834:	d30a      	bcc.n	800084c <main+0xe0>
 8000836:	6a3b      	ldr	r3, [r7, #32]
 8000838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800083c:	d206      	bcs.n	800084c <main+0xe0>
	{
		sprintf(str2, "%d", adc_value2);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	6a3a      	ldr	r2, [r7, #32]
 8000844:	498d      	ldr	r1, [pc, #564]	; (8000a7c <main+0x310>)
 8000846:	4618      	mov	r0, r3
 8000848:	f002 fbec 	bl	8003024 <siprintf>
	}
	char hex2[4];
	sprintf(hex2,"%03X",adc_value2);
 800084c:	f107 0310 	add.w	r3, r7, #16
 8000850:	6a3a      	ldr	r2, [r7, #32]
 8000852:	498b      	ldr	r1, [pc, #556]	; (8000a80 <main+0x314>)
 8000854:	4618      	mov	r0, r3
 8000856:	f002 fbe5 	bl	8003024 <siprintf>
	LCD_DrawString(110,50,str2);
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	461a      	mov	r2, r3
 8000860:	2132      	movs	r1, #50	; 0x32
 8000862:	206e      	movs	r0, #110	; 0x6e
 8000864:	f7ff ff52 	bl	800070c <LCD_DrawString>
	LCD_DrawString(170,50,hex2);
 8000868:	f107 0310 	add.w	r3, r7, #16
 800086c:	461a      	mov	r2, r3
 800086e:	2132      	movs	r1, #50	; 0x32
 8000870:	20aa      	movs	r0, #170	; 0xaa
 8000872:	f7ff ff4b 	bl	800070c <LCD_DrawString>
	if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1 && status==1)
 8000876:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800087a:	4882      	ldr	r0, [pc, #520]	; (8000a84 <main+0x318>)
 800087c:	f001 fc9e 	bl	80021bc <HAL_GPIO_ReadPin>
 8000880:	4603      	mov	r3, r0
 8000882:	2b01      	cmp	r3, #1
 8000884:	d116      	bne.n	80008b4 <main+0x148>
 8000886:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800088a:	2b01      	cmp	r3, #1
 800088c:	d112      	bne.n	80008b4 <main+0x148>
	{
		HAL_Delay(60);
 800088e:	203c      	movs	r0, #60	; 0x3c
 8000890:	f000 fce2 	bl	8001258 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1 && status==1)
 8000894:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000898:	487a      	ldr	r0, [pc, #488]	; (8000a84 <main+0x318>)
 800089a:	f001 fc8f 	bl	80021bc <HAL_GPIO_ReadPin>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d126      	bne.n	80008f2 <main+0x186>
 80008a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d122      	bne.n	80008f2 <main+0x186>
//			}
//			char hex1[4];
//			sprintf(hex1,"%03X",adc_value1);
//			LCD_DrawString(110,30,str1);
//			LCD_DrawString(170,30,hex1);
			status=0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1 && status==1)
 80008b2:	e01e      	b.n	80008f2 <main+0x186>
		}

	}
	else if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1 && status==0)
 80008b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008b8:	4872      	ldr	r0, [pc, #456]	; (8000a84 <main+0x318>)
 80008ba:	f001 fc7f 	bl	80021bc <HAL_GPIO_ReadPin>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d117      	bne.n	80008f4 <main+0x188>
 80008c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d113      	bne.n	80008f4 <main+0x188>
	{
		HAL_Delay(60);
 80008cc:	203c      	movs	r0, #60	; 0x3c
 80008ce:	f000 fcc3 	bl	8001258 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1 && status==0)
 80008d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008d6:	486b      	ldr	r0, [pc, #428]	; (8000a84 <main+0x318>)
 80008d8:	f001 fc70 	bl	80021bc <HAL_GPIO_ReadPin>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d108      	bne.n	80008f4 <main+0x188>
 80008e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d104      	bne.n	80008f4 <main+0x188>
		{
			//HAL_ADC_Stop(&hadc1);
			status=1;
 80008ea:	2301      	movs	r3, #1
 80008ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80008f0:	e000      	b.n	80008f4 <main+0x188>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1 && status==1)
 80008f2:	bf00      	nop
		}

	}
	if(status==1)
 80008f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d151      	bne.n	80009a0 <main+0x234>
	{
				HAL_ADC_Start(&hadc1);
 80008fc:	4856      	ldr	r0, [pc, #344]	; (8000a58 <main+0x2ec>)
 80008fe:	f000 fdb9 	bl	8001474 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc1, 1000);
 8000902:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000906:	4854      	ldr	r0, [pc, #336]	; (8000a58 <main+0x2ec>)
 8000908:	f000 fe8e 	bl	8001628 <HAL_ADC_PollForConversion>
				uint32_t adc_value1 =  HAL_ADC_GetValue(&hadc1);
 800090c:	4852      	ldr	r0, [pc, #328]	; (8000a58 <main+0x2ec>)
 800090e:	f000 ff91 	bl	8001834 <HAL_ADC_GetValue>
 8000912:	61f8      	str	r0, [r7, #28]
				char str1[5];
				if(adc_value1<10)
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	2b09      	cmp	r3, #9
 8000918:	d806      	bhi.n	8000928 <main+0x1bc>
				{
					sprintf(str1, "000%d", adc_value1);
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	69fa      	ldr	r2, [r7, #28]
 800091e:	4954      	ldr	r1, [pc, #336]	; (8000a70 <main+0x304>)
 8000920:	4618      	mov	r0, r3
 8000922:	f002 fb7f 	bl	8003024 <siprintf>
 8000926:	e028      	b.n	800097a <main+0x20e>
				}
				else if(adc_value1>=10 && adc_value1<100)
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	2b09      	cmp	r3, #9
 800092c:	d909      	bls.n	8000942 <main+0x1d6>
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	2b63      	cmp	r3, #99	; 0x63
 8000932:	d806      	bhi.n	8000942 <main+0x1d6>
				{
					sprintf(str1, "00%d", adc_value1);
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	69fa      	ldr	r2, [r7, #28]
 8000938:	494e      	ldr	r1, [pc, #312]	; (8000a74 <main+0x308>)
 800093a:	4618      	mov	r0, r3
 800093c:	f002 fb72 	bl	8003024 <siprintf>
 8000940:	e01b      	b.n	800097a <main+0x20e>
				}
				else if(adc_value1>=100 && adc_value1<1000)
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	2b63      	cmp	r3, #99	; 0x63
 8000946:	d90a      	bls.n	800095e <main+0x1f2>
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800094e:	d206      	bcs.n	800095e <main+0x1f2>
				{
					sprintf(str1, "0%d", adc_value1);
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	69fa      	ldr	r2, [r7, #28]
 8000954:	4948      	ldr	r1, [pc, #288]	; (8000a78 <main+0x30c>)
 8000956:	4618      	mov	r0, r3
 8000958:	f002 fb64 	bl	8003024 <siprintf>
 800095c:	e00d      	b.n	800097a <main+0x20e>
				}
				else if(adc_value1>=1000 && adc_value1<=4095)
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000964:	d309      	bcc.n	800097a <main+0x20e>
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800096c:	d205      	bcs.n	800097a <main+0x20e>
				{
					sprintf(str1, "%d", adc_value1);
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	69fa      	ldr	r2, [r7, #28]
 8000972:	4942      	ldr	r1, [pc, #264]	; (8000a7c <main+0x310>)
 8000974:	4618      	mov	r0, r3
 8000976:	f002 fb55 	bl	8003024 <siprintf>
				}
				char hex1[4];
				sprintf(hex1,"%03X",adc_value1);
 800097a:	463b      	mov	r3, r7
 800097c:	69fa      	ldr	r2, [r7, #28]
 800097e:	4940      	ldr	r1, [pc, #256]	; (8000a80 <main+0x314>)
 8000980:	4618      	mov	r0, r3
 8000982:	f002 fb4f 	bl	8003024 <siprintf>
				LCD_DrawString(110,30,str1);
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	461a      	mov	r2, r3
 800098a:	211e      	movs	r1, #30
 800098c:	206e      	movs	r0, #110	; 0x6e
 800098e:	f7ff febd 	bl	800070c <LCD_DrawString>
				LCD_DrawString(170,30,hex1);
 8000992:	463b      	mov	r3, r7
 8000994:	461a      	mov	r2, r3
 8000996:	211e      	movs	r1, #30
 8000998:	20aa      	movs	r0, #170	; 0xaa
 800099a:	f7ff feb7 	bl	800070c <LCD_DrawString>
 800099e:	e002      	b.n	80009a6 <main+0x23a>
	}
	else
	{
		HAL_ADC_Stop(&hadc1);
 80009a0:	482d      	ldr	r0, [pc, #180]	; (8000a58 <main+0x2ec>)
 80009a2:	f000 fe15 	bl	80015d0 <HAL_ADC_Stop>
	}
	// button test
	char st[2];
	sprintf(st,"%d",status);
 80009a6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80009aa:	f107 030c 	add.w	r3, r7, #12
 80009ae:	4933      	ldr	r1, [pc, #204]	; (8000a7c <main+0x310>)
 80009b0:	4618      	mov	r0, r3
 80009b2:	f002 fb37 	bl	8003024 <siprintf>
	LCD_DrawString(200,230,st);
 80009b6:	f107 030c 	add.w	r3, r7, #12
 80009ba:	461a      	mov	r2, r3
 80009bc:	21e6      	movs	r1, #230	; 0xe6
 80009be:	20c8      	movs	r0, #200	; 0xc8
 80009c0:	f7ff fea4 	bl	800070c <LCD_DrawString>

	// task 4
	//very dark mode
	if(adc_value2>3276)
 80009c4:	6a3b      	ldr	r3, [r7, #32]
 80009c6:	f640 42cc 	movw	r2, #3276	; 0xccc
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d90f      	bls.n	80009ee <main+0x282>
	{
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2120      	movs	r1, #32
 80009d2:	482d      	ldr	r0, [pc, #180]	; (8000a88 <main+0x31c>)
 80009d4:	f001 fc09 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	2101      	movs	r1, #1
 80009dc:	482a      	ldr	r0, [pc, #168]	; (8000a88 <main+0x31c>)
 80009de:	f001 fc04 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2102      	movs	r1, #2
 80009e6:	4828      	ldr	r0, [pc, #160]	; (8000a88 <main+0x31c>)
 80009e8:	f001 fbff 	bl	80021ea <HAL_GPIO_WritePin>
 80009ec:	e07a      	b.n	8000ae4 <main+0x378>
	}
	else if(adc_value2<=3276 && adc_value2>2457)
 80009ee:	6a3b      	ldr	r3, [r7, #32]
 80009f0:	f640 42cc 	movw	r2, #3276	; 0xccc
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d814      	bhi.n	8000a22 <main+0x2b6>
 80009f8:	6a3b      	ldr	r3, [r7, #32]
 80009fa:	f640 1299 	movw	r2, #2457	; 0x999
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d90f      	bls.n	8000a22 <main+0x2b6>
	{
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2120      	movs	r1, #32
 8000a06:	4820      	ldr	r0, [pc, #128]	; (8000a88 <main+0x31c>)
 8000a08:	f001 fbef 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2101      	movs	r1, #1
 8000a10:	481d      	ldr	r0, [pc, #116]	; (8000a88 <main+0x31c>)
 8000a12:	f001 fbea 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 8000a16:	2201      	movs	r2, #1
 8000a18:	2102      	movs	r1, #2
 8000a1a:	481b      	ldr	r0, [pc, #108]	; (8000a88 <main+0x31c>)
 8000a1c:	f001 fbe5 	bl	80021ea <HAL_GPIO_WritePin>
 8000a20:	e060      	b.n	8000ae4 <main+0x378>
	}
	else if(adc_value2<=2457 && adc_value2>1638)
 8000a22:	6a3b      	ldr	r3, [r7, #32]
 8000a24:	f640 1299 	movw	r2, #2457	; 0x999
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d82f      	bhi.n	8000a8c <main+0x320>
 8000a2c:	6a3b      	ldr	r3, [r7, #32]
 8000a2e:	f240 6266 	movw	r2, #1638	; 0x666
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d92a      	bls.n	8000a8c <main+0x320>
	{
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);
 8000a36:	2201      	movs	r2, #1
 8000a38:	2120      	movs	r1, #32
 8000a3a:	4813      	ldr	r0, [pc, #76]	; (8000a88 <main+0x31c>)
 8000a3c:	f001 fbd5 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2101      	movs	r1, #1
 8000a44:	4810      	ldr	r0, [pc, #64]	; (8000a88 <main+0x31c>)
 8000a46:	f001 fbd0 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2102      	movs	r1, #2
 8000a4e:	480e      	ldr	r0, [pc, #56]	; (8000a88 <main+0x31c>)
 8000a50:	f001 fbcb 	bl	80021ea <HAL_GPIO_WritePin>
 8000a54:	e046      	b.n	8000ae4 <main+0x378>
 8000a56:	bf00      	nop
 8000a58:	2000008c 	.word	0x2000008c
 8000a5c:	200000bc 	.word	0x200000bc
 8000a60:	08003914 	.word	0x08003914
 8000a64:	08003918 	.word	0x08003918
 8000a68:	0800391c 	.word	0x0800391c
 8000a6c:	0800392c 	.word	0x0800392c
 8000a70:	0800393c 	.word	0x0800393c
 8000a74:	08003944 	.word	0x08003944
 8000a78:	0800394c 	.word	0x0800394c
 8000a7c:	08003950 	.word	0x08003950
 8000a80:	08003954 	.word	0x08003954
 8000a84:	40011000 	.word	0x40011000
 8000a88:	40010c00 	.word	0x40010c00
	}
	else if(adc_value2<=1638 && adc_value2>819)
 8000a8c:	6a3b      	ldr	r3, [r7, #32]
 8000a8e:	f240 6266 	movw	r2, #1638	; 0x666
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d813      	bhi.n	8000abe <main+0x352>
 8000a96:	6a3b      	ldr	r3, [r7, #32]
 8000a98:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8000a9c:	d30f      	bcc.n	8000abe <main+0x352>
	{
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	2120      	movs	r1, #32
 8000aa2:	4812      	ldr	r0, [pc, #72]	; (8000aec <main+0x380>)
 8000aa4:	f001 fba1 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2101      	movs	r1, #1
 8000aac:	480f      	ldr	r0, [pc, #60]	; (8000aec <main+0x380>)
 8000aae:	f001 fb9c 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2102      	movs	r1, #2
 8000ab6:	480d      	ldr	r0, [pc, #52]	; (8000aec <main+0x380>)
 8000ab8:	f001 fb97 	bl	80021ea <HAL_GPIO_WritePin>
 8000abc:	e012      	b.n	8000ae4 <main+0x378>
	}
	else if(adc_value2<=819)
 8000abe:	6a3b      	ldr	r3, [r7, #32]
 8000ac0:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8000ac4:	d20e      	bcs.n	8000ae4 <main+0x378>
	{
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	2120      	movs	r1, #32
 8000aca:	4808      	ldr	r0, [pc, #32]	; (8000aec <main+0x380>)
 8000acc:	f001 fb8d 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	4805      	ldr	r0, [pc, #20]	; (8000aec <main+0x380>)
 8000ad6:	f001 fb88 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 8000ada:	2201      	movs	r2, #1
 8000adc:	2102      	movs	r1, #2
 8000ade:	4803      	ldr	r0, [pc, #12]	; (8000aec <main+0x380>)
 8000ae0:	f001 fb83 	bl	80021ea <HAL_GPIO_WritePin>
	}
	HAL_ADC_Stop(&hadc1);
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <main+0x384>)
 8000ae6:	f000 fd73 	bl	80015d0 <HAL_ADC_Stop>
  {
 8000aea:	e670      	b.n	80007ce <main+0x62>
 8000aec:	40010c00 	.word	0x40010c00
 8000af0:	2000008c 	.word	0x2000008c

08000af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b096      	sub	sp, #88	; 0x58
 8000af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000afe:	2228      	movs	r2, #40	; 0x28
 8000b00:	2100      	movs	r1, #0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f002 fa86 	bl	8003014 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
 8000b24:	611a      	str	r2, [r3, #16]
 8000b26:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b30:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b36:	2301      	movs	r3, #1
 8000b38:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b42:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b44:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b48:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 fb64 	bl	800221c <HAL_RCC_OscConfig>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000b5a:	f000 f9a5 	bl	8000ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b5e:	230f      	movs	r3, #15
 8000b60:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b62:	2302      	movs	r3, #2
 8000b64:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	2102      	movs	r1, #2
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f001 fdd0 	bl	8002720 <HAL_RCC_ClockConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b86:	f000 f98f 	bl	8000ea8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b92:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	4618      	mov	r0, r3
 8000b98:	f001 ff46 	bl	8002a28 <HAL_RCCEx_PeriphCLKConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000ba2:	f000 f981 	bl	8000ea8 <Error_Handler>
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	3758      	adds	r7, #88	; 0x58
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bc0:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <MX_ADC1_Init+0x74>)
 8000bc2:	4a19      	ldr	r2, [pc, #100]	; (8000c28 <MX_ADC1_Init+0x78>)
 8000bc4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bc6:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <MX_ADC1_Init+0x74>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bcc:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <MX_ADC1_Init+0x74>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bd2:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <MX_ADC1_Init+0x74>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <MX_ADC1_Init+0x74>)
 8000bda:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000bde:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000be0:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <MX_ADC1_Init+0x74>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000be6:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <MX_ADC1_Init+0x74>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bec:	480d      	ldr	r0, [pc, #52]	; (8000c24 <MX_ADC1_Init+0x74>)
 8000bee:	f000 fb57 	bl	80012a0 <HAL_ADC_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000bf8:	f000 f956 	bl	8000ea8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000bfc:	230f      	movs	r3, #15
 8000bfe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c00:	2301      	movs	r3, #1
 8000c02:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000c04:	2305      	movs	r3, #5
 8000c06:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_ADC1_Init+0x74>)
 8000c0e:	f000 fe1d 	bl	800184c <HAL_ADC_ConfigChannel>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c18:	f000 f946 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	2000008c 	.word	0x2000008c
 8000c28:	40012400 	.word	0x40012400

08000c2c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c3c:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <MX_ADC2_Init+0x74>)
 8000c3e:	4a19      	ldr	r2, [pc, #100]	; (8000ca4 <MX_ADC2_Init+0x78>)
 8000c40:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c42:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <MX_ADC2_Init+0x74>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000c48:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <MX_ADC2_Init+0x74>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c4e:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <MX_ADC2_Init+0x74>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <MX_ADC2_Init+0x74>)
 8000c56:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c5a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c5c:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <MX_ADC2_Init+0x74>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <MX_ADC2_Init+0x74>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <MX_ADC2_Init+0x74>)
 8000c6a:	f000 fb19 	bl	80012a0 <HAL_ADC_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000c74:	f000 f918 	bl	8000ea8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000c78:	230f      	movs	r3, #15
 8000c7a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000c80:	2305      	movs	r3, #5
 8000c82:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	4619      	mov	r1, r3
 8000c88:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <MX_ADC2_Init+0x74>)
 8000c8a:	f000 fddf 	bl	800184c <HAL_ADC_ConfigChannel>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000c94:	f000 f908 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c98:	bf00      	nop
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	200000bc 	.word	0x200000bc
 8000ca4:	40012800 	.word	0x40012800

08000ca8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cae:	f107 0318 	add.w	r3, r7, #24
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbc:	4b43      	ldr	r3, [pc, #268]	; (8000dcc <MX_GPIO_Init+0x124>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	4a42      	ldr	r2, [pc, #264]	; (8000dcc <MX_GPIO_Init+0x124>)
 8000cc2:	f043 0310 	orr.w	r3, r3, #16
 8000cc6:	6193      	str	r3, [r2, #24]
 8000cc8:	4b40      	ldr	r3, [pc, #256]	; (8000dcc <MX_GPIO_Init+0x124>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	f003 0310 	and.w	r3, r3, #16
 8000cd0:	617b      	str	r3, [r7, #20]
 8000cd2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd4:	4b3d      	ldr	r3, [pc, #244]	; (8000dcc <MX_GPIO_Init+0x124>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a3c      	ldr	r2, [pc, #240]	; (8000dcc <MX_GPIO_Init+0x124>)
 8000cda:	f043 0308 	orr.w	r3, r3, #8
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	4b3a      	ldr	r3, [pc, #232]	; (8000dcc <MX_GPIO_Init+0x124>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f003 0308 	and.w	r3, r3, #8
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cec:	4b37      	ldr	r3, [pc, #220]	; (8000dcc <MX_GPIO_Init+0x124>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	4a36      	ldr	r2, [pc, #216]	; (8000dcc <MX_GPIO_Init+0x124>)
 8000cf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cf6:	6193      	str	r3, [r2, #24]
 8000cf8:	4b34      	ldr	r3, [pc, #208]	; (8000dcc <MX_GPIO_Init+0x124>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d04:	4b31      	ldr	r3, [pc, #196]	; (8000dcc <MX_GPIO_Init+0x124>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a30      	ldr	r2, [pc, #192]	; (8000dcc <MX_GPIO_Init+0x124>)
 8000d0a:	f043 0320 	orr.w	r3, r3, #32
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b2e      	ldr	r3, [pc, #184]	; (8000dcc <MX_GPIO_Init+0x124>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f003 0320 	and.w	r3, r3, #32
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1c:	4b2b      	ldr	r3, [pc, #172]	; (8000dcc <MX_GPIO_Init+0x124>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a2a      	ldr	r2, [pc, #168]	; (8000dcc <MX_GPIO_Init+0x124>)
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	6193      	str	r3, [r2, #24]
 8000d28:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <MX_GPIO_Init+0x124>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f003 0304 	and.w	r3, r3, #4
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_SET);
 8000d34:	2201      	movs	r2, #1
 8000d36:	2123      	movs	r1, #35	; 0x23
 8000d38:	4825      	ldr	r0, [pc, #148]	; (8000dd0 <MX_GPIO_Init+0x128>)
 8000d3a:	f001 fa56 	bl	80021ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d44:	4823      	ldr	r0, [pc, #140]	; (8000dd4 <MX_GPIO_Init+0x12c>)
 8000d46:	f001 fa50 	bl	80021ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2102      	movs	r1, #2
 8000d4e:	4822      	ldr	r0, [pc, #136]	; (8000dd8 <MX_GPIO_Init+0x130>)
 8000d50:	f001 fa4b 	bl	80021ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d62:	f107 0318 	add.w	r3, r7, #24
 8000d66:	4619      	mov	r1, r3
 8000d68:	481c      	ldr	r0, [pc, #112]	; (8000ddc <MX_GPIO_Init+0x134>)
 8000d6a:	f001 f893 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8000d6e:	2323      	movs	r3, #35	; 0x23
 8000d70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7e:	f107 0318 	add.w	r3, r7, #24
 8000d82:	4619      	mov	r1, r3
 8000d84:	4812      	ldr	r0, [pc, #72]	; (8000dd0 <MX_GPIO_Init+0x128>)
 8000d86:	f001 f885 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d90:	2301      	movs	r3, #1
 8000d92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d9c:	f107 0318 	add.w	r3, r7, #24
 8000da0:	4619      	mov	r1, r3
 8000da2:	480c      	ldr	r0, [pc, #48]	; (8000dd4 <MX_GPIO_Init+0x12c>)
 8000da4:	f001 f876 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000da8:	2302      	movs	r3, #2
 8000daa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000db8:	f107 0318 	add.w	r3, r7, #24
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4806      	ldr	r0, [pc, #24]	; (8000dd8 <MX_GPIO_Init+0x130>)
 8000dc0:	f001 f868 	bl	8001e94 <HAL_GPIO_Init>

}
 8000dc4:	bf00      	nop
 8000dc6:	3728      	adds	r7, #40	; 0x28
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40010c00 	.word	0x40010c00
 8000dd4:	40011400 	.word	0x40011400
 8000dd8:	40011800 	.word	0x40011800
 8000ddc:	40011000 	.word	0x40011000

08000de0 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
 8000df4:	615a      	str	r2, [r3, #20]
 8000df6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000df8:	4b28      	ldr	r3, [pc, #160]	; (8000e9c <MX_FSMC_Init+0xbc>)
 8000dfa:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000dfe:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000e00:	4b26      	ldr	r3, [pc, #152]	; (8000e9c <MX_FSMC_Init+0xbc>)
 8000e02:	4a27      	ldr	r2, [pc, #156]	; (8000ea0 <MX_FSMC_Init+0xc0>)
 8000e04:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000e06:	4b25      	ldr	r3, [pc, #148]	; (8000e9c <MX_FSMC_Init+0xbc>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000e0c:	4b23      	ldr	r3, [pc, #140]	; (8000e9c <MX_FSMC_Init+0xbc>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000e12:	4b22      	ldr	r3, [pc, #136]	; (8000e9c <MX_FSMC_Init+0xbc>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000e18:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <MX_FSMC_Init+0xbc>)
 8000e1a:	2210      	movs	r2, #16
 8000e1c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000e1e:	4b1f      	ldr	r3, [pc, #124]	; (8000e9c <MX_FSMC_Init+0xbc>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000e24:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <MX_FSMC_Init+0xbc>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <MX_FSMC_Init+0xbc>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000e30:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <MX_FSMC_Init+0xbc>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000e36:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <MX_FSMC_Init+0xbc>)
 8000e38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e3c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000e3e:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <MX_FSMC_Init+0xbc>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000e44:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <MX_FSMC_Init+0xbc>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000e4a:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <MX_FSMC_Init+0xbc>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <MX_FSMC_Init+0xbc>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000e56:	230f      	movs	r3, #15
 8000e58:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000e5a:	230f      	movs	r3, #15
 8000e5c:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000e5e:	23ff      	movs	r3, #255	; 0xff
 8000e60:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000e62:	230f      	movs	r3, #15
 8000e64:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000e66:	2310      	movs	r3, #16
 8000e68:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000e6a:	2311      	movs	r3, #17
 8000e6c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2200      	movs	r2, #0
 8000e76:	4619      	mov	r1, r3
 8000e78:	4808      	ldr	r0, [pc, #32]	; (8000e9c <MX_FSMC_Init+0xbc>)
 8000e7a:	f001 ff6f 	bl	8002d5c <HAL_SRAM_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8000e84:	f000 f810 	bl	8000ea8 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <MX_FSMC_Init+0xc4>)
 8000e8a:	69db      	ldr	r3, [r3, #28]
 8000e8c:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <MX_FSMC_Init+0xc4>)
 8000e8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e92:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000e94:	bf00      	nop
 8000e96:	3720      	adds	r7, #32
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	200000ec 	.word	0x200000ec
 8000ea0:	a0000104 	.word	0xa0000104
 8000ea4:	40010000 	.word	0x40010000

08000ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eac:	b672      	cpsid	i
}
 8000eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <Error_Handler+0x8>
	...

08000eb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <HAL_MspInit+0x5c>)
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	4a14      	ldr	r2, [pc, #80]	; (8000f10 <HAL_MspInit+0x5c>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6193      	str	r3, [r2, #24]
 8000ec6:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_MspInit+0x5c>)
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <HAL_MspInit+0x5c>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	4a0e      	ldr	r2, [pc, #56]	; (8000f10 <HAL_MspInit+0x5c>)
 8000ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000edc:	61d3      	str	r3, [r2, #28]
 8000ede:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <HAL_MspInit+0x5c>)
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <HAL_MspInit+0x60>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <HAL_MspInit+0x60>)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f06:	bf00      	nop
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	40021000 	.word	0x40021000
 8000f14:	40010000 	.word	0x40010000

08000f18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	; 0x28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 0318 	add.w	r3, r7, #24
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a28      	ldr	r2, [pc, #160]	; (8000fd4 <HAL_ADC_MspInit+0xbc>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d122      	bne.n	8000f7e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f38:	4b27      	ldr	r3, [pc, #156]	; (8000fd8 <HAL_ADC_MspInit+0xc0>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	4a26      	ldr	r2, [pc, #152]	; (8000fd8 <HAL_ADC_MspInit+0xc0>)
 8000f3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f42:	6193      	str	r3, [r2, #24]
 8000f44:	4b24      	ldr	r3, [pc, #144]	; (8000fd8 <HAL_ADC_MspInit+0xc0>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f4c:	617b      	str	r3, [r7, #20]
 8000f4e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f50:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <HAL_ADC_MspInit+0xc0>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	4a20      	ldr	r2, [pc, #128]	; (8000fd8 <HAL_ADC_MspInit+0xc0>)
 8000f56:	f043 0310 	orr.w	r3, r3, #16
 8000f5a:	6193      	str	r3, [r2, #24]
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <HAL_ADC_MspInit+0xc0>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	f003 0310 	and.w	r3, r3, #16
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f68:	2320      	movs	r3, #32
 8000f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f70:	f107 0318 	add.w	r3, r7, #24
 8000f74:	4619      	mov	r1, r3
 8000f76:	4819      	ldr	r0, [pc, #100]	; (8000fdc <HAL_ADC_MspInit+0xc4>)
 8000f78:	f000 ff8c 	bl	8001e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000f7c:	e026      	b.n	8000fcc <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a17      	ldr	r2, [pc, #92]	; (8000fe0 <HAL_ADC_MspInit+0xc8>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d121      	bne.n	8000fcc <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <HAL_ADC_MspInit+0xc0>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <HAL_ADC_MspInit+0xc0>)
 8000f8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f92:	6193      	str	r3, [r2, #24]
 8000f94:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <HAL_ADC_MspInit+0xc0>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <HAL_ADC_MspInit+0xc0>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	4a0c      	ldr	r2, [pc, #48]	; (8000fd8 <HAL_ADC_MspInit+0xc0>)
 8000fa6:	f043 0310 	orr.w	r3, r3, #16
 8000faa:	6193      	str	r3, [r2, #24]
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <HAL_ADC_MspInit+0xc0>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f003 0310 	and.w	r3, r3, #16
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fb8:	2320      	movs	r3, #32
 8000fba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc0:	f107 0318 	add.w	r3, r7, #24
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <HAL_ADC_MspInit+0xc4>)
 8000fc8:	f000 ff64 	bl	8001e94 <HAL_GPIO_Init>
}
 8000fcc:	bf00      	nop
 8000fce:	3728      	adds	r7, #40	; 0x28
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40012400 	.word	0x40012400
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40011000 	.word	0x40011000
 8000fe0:	40012800 	.word	0x40012800

08000fe4 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000fea:	f107 0308 	add.w	r3, r7, #8
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8000ff8:	4b18      	ldr	r3, [pc, #96]	; (800105c <HAL_FSMC_MspInit+0x78>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d129      	bne.n	8001054 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8001000:	4b16      	ldr	r3, [pc, #88]	; (800105c <HAL_FSMC_MspInit+0x78>)
 8001002:	2201      	movs	r2, #1
 8001004:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001006:	4b16      	ldr	r3, [pc, #88]	; (8001060 <HAL_FSMC_MspInit+0x7c>)
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	4a15      	ldr	r2, [pc, #84]	; (8001060 <HAL_FSMC_MspInit+0x7c>)
 800100c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001010:	6153      	str	r3, [r2, #20]
 8001012:	4b13      	ldr	r3, [pc, #76]	; (8001060 <HAL_FSMC_MspInit+0x7c>)
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800101e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001022:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800102c:	f107 0308 	add.w	r3, r7, #8
 8001030:	4619      	mov	r1, r3
 8001032:	480c      	ldr	r0, [pc, #48]	; (8001064 <HAL_FSMC_MspInit+0x80>)
 8001034:	f000 ff2e 	bl	8001e94 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001038:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 800103c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001042:	2303      	movs	r3, #3
 8001044:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	4619      	mov	r1, r3
 800104c:	4806      	ldr	r0, [pc, #24]	; (8001068 <HAL_FSMC_MspInit+0x84>)
 800104e:	f000 ff21 	bl	8001e94 <HAL_GPIO_Init>
 8001052:	e000      	b.n	8001056 <HAL_FSMC_MspInit+0x72>
    return;
 8001054:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000134 	.word	0x20000134
 8001060:	40021000 	.word	0x40021000
 8001064:	40011800 	.word	0x40011800
 8001068:	40011400 	.word	0x40011400

0800106c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001074:	f7ff ffb6 	bl	8000fe4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <NMI_Handler+0x4>

08001086 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108a:	e7fe      	b.n	800108a <HardFault_Handler+0x4>

0800108c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001090:	e7fe      	b.n	8001090 <MemManage_Handler+0x4>

08001092 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001096:	e7fe      	b.n	8001096 <BusFault_Handler+0x4>

08001098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800109c:	e7fe      	b.n	800109c <UsageFault_Handler+0x4>

0800109e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr

080010aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr

080010b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr

080010c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c6:	f000 f8ab 	bl	8001220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d8:	4a14      	ldr	r2, [pc, #80]	; (800112c <_sbrk+0x5c>)
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <_sbrk+0x60>)
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e4:	4b13      	ldr	r3, [pc, #76]	; (8001134 <_sbrk+0x64>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d102      	bne.n	80010f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <_sbrk+0x64>)
 80010ee:	4a12      	ldr	r2, [pc, #72]	; (8001138 <_sbrk+0x68>)
 80010f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010f2:	4b10      	ldr	r3, [pc, #64]	; (8001134 <_sbrk+0x64>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d207      	bcs.n	8001110 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001100:	f001 ff50 	bl	8002fa4 <__errno>
 8001104:	4603      	mov	r3, r0
 8001106:	220c      	movs	r2, #12
 8001108:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800110a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800110e:	e009      	b.n	8001124 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001110:	4b08      	ldr	r3, [pc, #32]	; (8001134 <_sbrk+0x64>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001116:	4b07      	ldr	r3, [pc, #28]	; (8001134 <_sbrk+0x64>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	4a05      	ldr	r2, [pc, #20]	; (8001134 <_sbrk+0x64>)
 8001120:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001122:	68fb      	ldr	r3, [r7, #12]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20010000 	.word	0x20010000
 8001130:	00000400 	.word	0x00000400
 8001134:	20000138 	.word	0x20000138
 8001138:	20000150 	.word	0x20000150

0800113c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr

08001148 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001148:	480c      	ldr	r0, [pc, #48]	; (800117c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800114a:	490d      	ldr	r1, [pc, #52]	; (8001180 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800114c:	4a0d      	ldr	r2, [pc, #52]	; (8001184 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001150:	e002      	b.n	8001158 <LoopCopyDataInit>

08001152 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001152:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001154:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001156:	3304      	adds	r3, #4

08001158 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001158:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800115c:	d3f9      	bcc.n	8001152 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115e:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001160:	4c0a      	ldr	r4, [pc, #40]	; (800118c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001164:	e001      	b.n	800116a <LoopFillZerobss>

08001166 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001166:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001168:	3204      	adds	r2, #4

0800116a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800116c:	d3fb      	bcc.n	8001166 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800116e:	f7ff ffe5 	bl	800113c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001172:	f001 ff1d 	bl	8002fb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001176:	f7ff faf9 	bl	800076c <main>
  bx lr
 800117a:	4770      	bx	lr
  ldr r0, =_sdata
 800117c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001180:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001184:	08003fc0 	.word	0x08003fc0
  ldr r2, =_sbss
 8001188:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800118c:	20000150 	.word	0x20000150

08001190 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001190:	e7fe      	b.n	8001190 <ADC1_2_IRQHandler>
	...

08001194 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <HAL_Init+0x28>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a07      	ldr	r2, [pc, #28]	; (80011bc <HAL_Init+0x28>)
 800119e:	f043 0310 	orr.w	r3, r3, #16
 80011a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a4:	2003      	movs	r0, #3
 80011a6:	f000 fe41 	bl	8001e2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011aa:	200f      	movs	r0, #15
 80011ac:	f000 f808 	bl	80011c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b0:	f7ff fe80 	bl	8000eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40022000 	.word	0x40022000

080011c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <HAL_InitTick+0x54>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <HAL_InitTick+0x58>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	4619      	mov	r1, r3
 80011d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011da:	fbb2 f3f3 	udiv	r3, r2, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 fe4b 	bl	8001e7a <HAL_SYSTICK_Config>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e00e      	b.n	800120c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b0f      	cmp	r3, #15
 80011f2:	d80a      	bhi.n	800120a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f4:	2200      	movs	r2, #0
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011fc:	f000 fe21 	bl	8001e42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001200:	4a06      	ldr	r2, [pc, #24]	; (800121c <HAL_InitTick+0x5c>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001206:	2300      	movs	r3, #0
 8001208:	e000      	b.n	800120c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000000 	.word	0x20000000
 8001218:	20000008 	.word	0x20000008
 800121c:	20000004 	.word	0x20000004

08001220 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <HAL_IncTick+0x1c>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	4b05      	ldr	r3, [pc, #20]	; (8001240 <HAL_IncTick+0x20>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4413      	add	r3, r2
 8001230:	4a03      	ldr	r2, [pc, #12]	; (8001240 <HAL_IncTick+0x20>)
 8001232:	6013      	str	r3, [r2, #0]
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	20000008 	.word	0x20000008
 8001240:	2000013c 	.word	0x2000013c

08001244 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return uwTick;
 8001248:	4b02      	ldr	r3, [pc, #8]	; (8001254 <HAL_GetTick+0x10>)
 800124a:	681b      	ldr	r3, [r3, #0]
}
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr
 8001254:	2000013c 	.word	0x2000013c

08001258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001260:	f7ff fff0 	bl	8001244 <HAL_GetTick>
 8001264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001270:	d005      	beq.n	800127e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <HAL_Delay+0x44>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	461a      	mov	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4413      	add	r3, r2
 800127c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800127e:	bf00      	nop
 8001280:	f7ff ffe0 	bl	8001244 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	429a      	cmp	r2, r3
 800128e:	d8f7      	bhi.n	8001280 <HAL_Delay+0x28>
  {
  }
}
 8001290:	bf00      	nop
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000008 	.word	0x20000008

080012a0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012a8:	2300      	movs	r3, #0
 80012aa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e0ce      	b.n	8001460 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d109      	bne.n	80012e4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff fe1a 	bl	8000f18 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f000 fc03 	bl	8001af0 <ADC_ConversionStop_Disable>
 80012ea:	4603      	mov	r3, r0
 80012ec:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f2:	f003 0310 	and.w	r3, r3, #16
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f040 80a9 	bne.w	800144e <HAL_ADC_Init+0x1ae>
 80012fc:	7dfb      	ldrb	r3, [r7, #23]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f040 80a5 	bne.w	800144e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001308:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800130c:	f023 0302 	bic.w	r3, r3, #2
 8001310:	f043 0202 	orr.w	r2, r3, #2
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4951      	ldr	r1, [pc, #324]	; (8001468 <HAL_ADC_Init+0x1c8>)
 8001322:	428b      	cmp	r3, r1
 8001324:	d10a      	bne.n	800133c <HAL_ADC_Init+0x9c>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800132e:	d002      	beq.n	8001336 <HAL_ADC_Init+0x96>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69db      	ldr	r3, [r3, #28]
 8001334:	e004      	b.n	8001340 <HAL_ADC_Init+0xa0>
 8001336:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800133a:	e001      	b.n	8001340 <HAL_ADC_Init+0xa0>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001340:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	7b1b      	ldrb	r3, [r3, #12]
 8001346:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001348:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800134a:	68ba      	ldr	r2, [r7, #8]
 800134c:	4313      	orrs	r3, r2
 800134e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001358:	d003      	beq.n	8001362 <HAL_ADC_Init+0xc2>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d102      	bne.n	8001368 <HAL_ADC_Init+0xc8>
 8001362:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001366:	e000      	b.n	800136a <HAL_ADC_Init+0xca>
 8001368:	2300      	movs	r3, #0
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	7d1b      	ldrb	r3, [r3, #20]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d119      	bne.n	80013ac <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	7b1b      	ldrb	r3, [r3, #12]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d109      	bne.n	8001394 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	3b01      	subs	r3, #1
 8001386:	035a      	lsls	r2, r3, #13
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	e00b      	b.n	80013ac <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001398:	f043 0220 	orr.w	r2, r3, #32
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a4:	f043 0201 	orr.w	r2, r3, #1
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	430a      	orrs	r2, r1
 80013be:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	4b29      	ldr	r3, [pc, #164]	; (800146c <HAL_ADC_Init+0x1cc>)
 80013c8:	4013      	ands	r3, r2
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	6812      	ldr	r2, [r2, #0]
 80013ce:	68b9      	ldr	r1, [r7, #8]
 80013d0:	430b      	orrs	r3, r1
 80013d2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013dc:	d003      	beq.n	80013e6 <HAL_ADC_Init+0x146>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d104      	bne.n	80013f0 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	051b      	lsls	r3, r3, #20
 80013ee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	430a      	orrs	r2, r1
 8001402:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	4b19      	ldr	r3, [pc, #100]	; (8001470 <HAL_ADC_Init+0x1d0>)
 800140c:	4013      	ands	r3, r2
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	429a      	cmp	r2, r3
 8001412:	d10b      	bne.n	800142c <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141e:	f023 0303 	bic.w	r3, r3, #3
 8001422:	f043 0201 	orr.w	r2, r3, #1
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800142a:	e018      	b.n	800145e <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001430:	f023 0312 	bic.w	r3, r3, #18
 8001434:	f043 0210 	orr.w	r2, r3, #16
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001440:	f043 0201 	orr.w	r2, r3, #1
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800144c:	e007      	b.n	800145e <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001452:	f043 0210 	orr.w	r2, r3, #16
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800145e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40013c00 	.word	0x40013c00
 800146c:	ffe1f7fd 	.word	0xffe1f7fd
 8001470:	ff1f0efe 	.word	0xff1f0efe

08001474 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800147c:	2300      	movs	r3, #0
 800147e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001486:	2b01      	cmp	r3, #1
 8001488:	d101      	bne.n	800148e <HAL_ADC_Start+0x1a>
 800148a:	2302      	movs	r3, #2
 800148c:	e098      	b.n	80015c0 <HAL_ADC_Start+0x14c>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2201      	movs	r2, #1
 8001492:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f000 fad0 	bl	8001a3c <ADC_Enable>
 800149c:	4603      	mov	r3, r0
 800149e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f040 8087 	bne.w	80015b6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014b0:	f023 0301 	bic.w	r3, r3, #1
 80014b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a41      	ldr	r2, [pc, #260]	; (80015c8 <HAL_ADC_Start+0x154>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d105      	bne.n	80014d2 <HAL_ADC_Start+0x5e>
 80014c6:	4b41      	ldr	r3, [pc, #260]	; (80015cc <HAL_ADC_Start+0x158>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d115      	bne.n	80014fe <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d026      	beq.n	800153a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014fc:	e01d      	b.n	800153a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001502:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a2f      	ldr	r2, [pc, #188]	; (80015cc <HAL_ADC_Start+0x158>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d004      	beq.n	800151e <HAL_ADC_Start+0xaa>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a2b      	ldr	r2, [pc, #172]	; (80015c8 <HAL_ADC_Start+0x154>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d10d      	bne.n	800153a <HAL_ADC_Start+0xc6>
 800151e:	4b2b      	ldr	r3, [pc, #172]	; (80015cc <HAL_ADC_Start+0x158>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001526:	2b00      	cmp	r3, #0
 8001528:	d007      	beq.n	800153a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001532:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d006      	beq.n	8001554 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154a:	f023 0206 	bic.w	r2, r3, #6
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	62da      	str	r2, [r3, #44]	; 0x2c
 8001552:	e002      	b.n	800155a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f06f 0202 	mvn.w	r2, #2
 800156a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001576:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800157a:	d113      	bne.n	80015a4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001580:	4a11      	ldr	r2, [pc, #68]	; (80015c8 <HAL_ADC_Start+0x154>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d105      	bne.n	8001592 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001586:	4b11      	ldr	r3, [pc, #68]	; (80015cc <HAL_ADC_Start+0x158>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800158e:	2b00      	cmp	r3, #0
 8001590:	d108      	bne.n	80015a4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	e00c      	b.n	80015be <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	e003      	b.n	80015be <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80015be:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40012800 	.word	0x40012800
 80015cc:	40012400 	.word	0x40012400

080015d0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015d8:	2300      	movs	r3, #0
 80015da:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d101      	bne.n	80015ea <HAL_ADC_Stop+0x1a>
 80015e6:	2302      	movs	r3, #2
 80015e8:	e01a      	b.n	8001620 <HAL_ADC_Stop+0x50>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2201      	movs	r2, #1
 80015ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f000 fa7c 	bl	8001af0 <ADC_ConversionStop_Disable>
 80015f8:	4603      	mov	r3, r0
 80015fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d109      	bne.n	8001616 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001606:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800160a:	f023 0301 	bic.w	r3, r3, #1
 800160e:	f043 0201 	orr.w	r2, r3, #1
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800161e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001628:	b590      	push	{r4, r7, lr}
 800162a:	b087      	sub	sp, #28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800163e:	f7ff fe01 	bl	8001244 <HAL_GetTick>
 8001642:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164e:	2b00      	cmp	r3, #0
 8001650:	d00b      	beq.n	800166a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001656:	f043 0220 	orr.w	r2, r3, #32
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e0d3      	b.n	8001812 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001674:	2b00      	cmp	r3, #0
 8001676:	d131      	bne.n	80016dc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001682:	2b00      	cmp	r3, #0
 8001684:	d12a      	bne.n	80016dc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001686:	e021      	b.n	80016cc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800168e:	d01d      	beq.n	80016cc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d007      	beq.n	80016a6 <HAL_ADC_PollForConversion+0x7e>
 8001696:	f7ff fdd5 	bl	8001244 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d212      	bcs.n	80016cc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d10b      	bne.n	80016cc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b8:	f043 0204 	orr.w	r2, r3, #4
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e0a2      	b.n	8001812 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0d6      	beq.n	8001688 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80016da:	e070      	b.n	80017be <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80016dc:	4b4f      	ldr	r3, [pc, #316]	; (800181c <HAL_ADC_PollForConversion+0x1f4>)
 80016de:	681c      	ldr	r4, [r3, #0]
 80016e0:	2002      	movs	r0, #2
 80016e2:	f001 fa57 	bl	8002b94 <HAL_RCCEx_GetPeriphCLKFreq>
 80016e6:	4603      	mov	r3, r0
 80016e8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6919      	ldr	r1, [r3, #16]
 80016f2:	4b4b      	ldr	r3, [pc, #300]	; (8001820 <HAL_ADC_PollForConversion+0x1f8>)
 80016f4:	400b      	ands	r3, r1
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d118      	bne.n	800172c <HAL_ADC_PollForConversion+0x104>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68d9      	ldr	r1, [r3, #12]
 8001700:	4b48      	ldr	r3, [pc, #288]	; (8001824 <HAL_ADC_PollForConversion+0x1fc>)
 8001702:	400b      	ands	r3, r1
 8001704:	2b00      	cmp	r3, #0
 8001706:	d111      	bne.n	800172c <HAL_ADC_PollForConversion+0x104>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6919      	ldr	r1, [r3, #16]
 800170e:	4b46      	ldr	r3, [pc, #280]	; (8001828 <HAL_ADC_PollForConversion+0x200>)
 8001710:	400b      	ands	r3, r1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d108      	bne.n	8001728 <HAL_ADC_PollForConversion+0x100>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68d9      	ldr	r1, [r3, #12]
 800171c:	4b43      	ldr	r3, [pc, #268]	; (800182c <HAL_ADC_PollForConversion+0x204>)
 800171e:	400b      	ands	r3, r1
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <HAL_ADC_PollForConversion+0x100>
 8001724:	2314      	movs	r3, #20
 8001726:	e020      	b.n	800176a <HAL_ADC_PollForConversion+0x142>
 8001728:	2329      	movs	r3, #41	; 0x29
 800172a:	e01e      	b.n	800176a <HAL_ADC_PollForConversion+0x142>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6919      	ldr	r1, [r3, #16]
 8001732:	4b3d      	ldr	r3, [pc, #244]	; (8001828 <HAL_ADC_PollForConversion+0x200>)
 8001734:	400b      	ands	r3, r1
 8001736:	2b00      	cmp	r3, #0
 8001738:	d106      	bne.n	8001748 <HAL_ADC_PollForConversion+0x120>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68d9      	ldr	r1, [r3, #12]
 8001740:	4b3a      	ldr	r3, [pc, #232]	; (800182c <HAL_ADC_PollForConversion+0x204>)
 8001742:	400b      	ands	r3, r1
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00d      	beq.n	8001764 <HAL_ADC_PollForConversion+0x13c>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6919      	ldr	r1, [r3, #16]
 800174e:	4b38      	ldr	r3, [pc, #224]	; (8001830 <HAL_ADC_PollForConversion+0x208>)
 8001750:	400b      	ands	r3, r1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d108      	bne.n	8001768 <HAL_ADC_PollForConversion+0x140>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68d9      	ldr	r1, [r3, #12]
 800175c:	4b34      	ldr	r3, [pc, #208]	; (8001830 <HAL_ADC_PollForConversion+0x208>)
 800175e:	400b      	ands	r3, r1
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <HAL_ADC_PollForConversion+0x140>
 8001764:	2354      	movs	r3, #84	; 0x54
 8001766:	e000      	b.n	800176a <HAL_ADC_PollForConversion+0x142>
 8001768:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800176a:	fb02 f303 	mul.w	r3, r2, r3
 800176e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001770:	e021      	b.n	80017b6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001778:	d01a      	beq.n	80017b0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d007      	beq.n	8001790 <HAL_ADC_PollForConversion+0x168>
 8001780:	f7ff fd60 	bl	8001244 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	429a      	cmp	r2, r3
 800178e:	d20f      	bcs.n	80017b0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	429a      	cmp	r2, r3
 8001796:	d90b      	bls.n	80017b0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179c:	f043 0204 	orr.w	r2, r3, #4
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e030      	b.n	8001812 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	3301      	adds	r3, #1
 80017b4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d8d9      	bhi.n	8001772 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f06f 0212 	mvn.w	r2, #18
 80017c6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80017de:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80017e2:	d115      	bne.n	8001810 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d111      	bne.n	8001810 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d105      	bne.n	8001810 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001808:	f043 0201 	orr.w	r2, r3, #1
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	371c      	adds	r7, #28
 8001816:	46bd      	mov	sp, r7
 8001818:	bd90      	pop	{r4, r7, pc}
 800181a:	bf00      	nop
 800181c:	20000000 	.word	0x20000000
 8001820:	24924924 	.word	0x24924924
 8001824:	00924924 	.word	0x00924924
 8001828:	12492492 	.word	0x12492492
 800182c:	00492492 	.word	0x00492492
 8001830:	00249249 	.word	0x00249249

08001834 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001842:	4618      	mov	r0, r3
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001864:	2b01      	cmp	r3, #1
 8001866:	d101      	bne.n	800186c <HAL_ADC_ConfigChannel+0x20>
 8001868:	2302      	movs	r3, #2
 800186a:	e0dc      	b.n	8001a26 <HAL_ADC_ConfigChannel+0x1da>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b06      	cmp	r3, #6
 800187a:	d81c      	bhi.n	80018b6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	3b05      	subs	r3, #5
 800188e:	221f      	movs	r2, #31
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	4019      	ands	r1, r3
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	6818      	ldr	r0, [r3, #0]
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	3b05      	subs	r3, #5
 80018a8:	fa00 f203 	lsl.w	r2, r0, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	635a      	str	r2, [r3, #52]	; 0x34
 80018b4:	e03c      	b.n	8001930 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b0c      	cmp	r3, #12
 80018bc:	d81c      	bhi.n	80018f8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	3b23      	subs	r3, #35	; 0x23
 80018d0:	221f      	movs	r2, #31
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	4019      	ands	r1, r3
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	6818      	ldr	r0, [r3, #0]
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	3b23      	subs	r3, #35	; 0x23
 80018ea:	fa00 f203 	lsl.w	r2, r0, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	631a      	str	r2, [r3, #48]	; 0x30
 80018f6:	e01b      	b.n	8001930 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	3b41      	subs	r3, #65	; 0x41
 800190a:	221f      	movs	r2, #31
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	4019      	ands	r1, r3
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	6818      	ldr	r0, [r3, #0]
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	4613      	mov	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	3b41      	subs	r3, #65	; 0x41
 8001924:	fa00 f203 	lsl.w	r2, r0, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b09      	cmp	r3, #9
 8001936:	d91c      	bls.n	8001972 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68d9      	ldr	r1, [r3, #12]
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	4613      	mov	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4413      	add	r3, r2
 8001948:	3b1e      	subs	r3, #30
 800194a:	2207      	movs	r2, #7
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	4019      	ands	r1, r3
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	6898      	ldr	r0, [r3, #8]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4613      	mov	r3, r2
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	4413      	add	r3, r2
 8001962:	3b1e      	subs	r3, #30
 8001964:	fa00 f203 	lsl.w	r2, r0, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	430a      	orrs	r2, r1
 800196e:	60da      	str	r2, [r3, #12]
 8001970:	e019      	b.n	80019a6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6919      	ldr	r1, [r3, #16]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4613      	mov	r3, r2
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	4413      	add	r3, r2
 8001982:	2207      	movs	r2, #7
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	4019      	ands	r1, r3
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	6898      	ldr	r0, [r3, #8]
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4613      	mov	r3, r2
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	4413      	add	r3, r2
 800199a:	fa00 f203 	lsl.w	r2, r0, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b10      	cmp	r3, #16
 80019ac:	d003      	beq.n	80019b6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019b2:	2b11      	cmp	r3, #17
 80019b4:	d132      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a1d      	ldr	r2, [pc, #116]	; (8001a30 <HAL_ADC_ConfigChannel+0x1e4>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d125      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d126      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80019dc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b10      	cmp	r3, #16
 80019e4:	d11a      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019e6:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <HAL_ADC_ConfigChannel+0x1e8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a13      	ldr	r2, [pc, #76]	; (8001a38 <HAL_ADC_ConfigChannel+0x1ec>)
 80019ec:	fba2 2303 	umull	r2, r3, r2, r3
 80019f0:	0c9a      	lsrs	r2, r3, #18
 80019f2:	4613      	mov	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019fc:	e002      	b.n	8001a04 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	3b01      	subs	r3, #1
 8001a02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f9      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x1b2>
 8001a0a:	e007      	b.n	8001a1c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a10:	f043 0220 	orr.w	r2, r3, #32
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	40012400 	.word	0x40012400
 8001a34:	20000000 	.word	0x20000000
 8001a38:	431bde83 	.word	0x431bde83

08001a3c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d040      	beq.n	8001adc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f042 0201 	orr.w	r2, r2, #1
 8001a68:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ae8 <ADC_Enable+0xac>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a1f      	ldr	r2, [pc, #124]	; (8001aec <ADC_Enable+0xb0>)
 8001a70:	fba2 2303 	umull	r2, r3, r2, r3
 8001a74:	0c9b      	lsrs	r3, r3, #18
 8001a76:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a78:	e002      	b.n	8001a80 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f9      	bne.n	8001a7a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a86:	f7ff fbdd 	bl	8001244 <HAL_GetTick>
 8001a8a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a8c:	e01f      	b.n	8001ace <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a8e:	f7ff fbd9 	bl	8001244 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d918      	bls.n	8001ace <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d011      	beq.n	8001ace <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aae:	f043 0210 	orr.w	r2, r3, #16
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aba:	f043 0201 	orr.w	r2, r3, #1
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e007      	b.n	8001ade <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d1d8      	bne.n	8001a8e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	431bde83 	.word	0x431bde83

08001af0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d12e      	bne.n	8001b68 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0201 	bic.w	r2, r2, #1
 8001b18:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b1a:	f7ff fb93 	bl	8001244 <HAL_GetTick>
 8001b1e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b20:	e01b      	b.n	8001b5a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b22:	f7ff fb8f 	bl	8001244 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d914      	bls.n	8001b5a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d10d      	bne.n	8001b5a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b42:	f043 0210 	orr.w	r2, r3, #16
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4e:	f043 0201 	orr.w	r2, r3, #1
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e007      	b.n	8001b6a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d0dc      	beq.n	8001b22 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b087      	sub	sp, #28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d101      	bne.n	8001b92 <HAL_ADCEx_Calibration_Start+0x1e>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e095      	b.n	8001cbe <HAL_ADCEx_Calibration_Start+0x14a>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ffa8 	bl	8001af0 <ADC_ConversionStop_Disable>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001ba4:	7dfb      	ldrb	r3, [r7, #23]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f040 8084 	bne.w	8001cb4 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bb4:	f023 0302 	bic.w	r3, r3, #2
 8001bb8:	f043 0202 	orr.w	r2, r3, #2
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001bc0:	4b41      	ldr	r3, [pc, #260]	; (8001cc8 <HAL_ADCEx_Calibration_Start+0x154>)
 8001bc2:	681c      	ldr	r4, [r3, #0]
 8001bc4:	2002      	movs	r0, #2
 8001bc6:	f000 ffe5 	bl	8002b94 <HAL_RCCEx_GetPeriphCLKFreq>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001bd0:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001bd2:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001bd4:	e002      	b.n	8001bdc <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f9      	bne.n	8001bd6 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff ff2a 	bl	8001a3c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0208 	orr.w	r2, r2, #8
 8001bf6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001bf8:	f7ff fb24 	bl	8001244 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001bfe:	e01b      	b.n	8001c38 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001c00:	f7ff fb20 	bl	8001244 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b0a      	cmp	r3, #10
 8001c0c:	d914      	bls.n	8001c38 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 0308 	and.w	r3, r3, #8
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00d      	beq.n	8001c38 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c20:	f023 0312 	bic.w	r3, r3, #18
 8001c24:	f043 0210 	orr.w	r2, r3, #16
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e042      	b.n	8001cbe <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1dc      	bne.n	8001c00 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f042 0204 	orr.w	r2, r2, #4
 8001c54:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001c56:	f7ff faf5 	bl	8001244 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001c5c:	e01b      	b.n	8001c96 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001c5e:	f7ff faf1 	bl	8001244 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b0a      	cmp	r3, #10
 8001c6a:	d914      	bls.n	8001c96 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 0304 	and.w	r3, r3, #4
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00d      	beq.n	8001c96 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7e:	f023 0312 	bic.w	r3, r3, #18
 8001c82:	f043 0210 	orr.w	r2, r3, #16
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e013      	b.n	8001cbe <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1dc      	bne.n	8001c5e <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	f023 0303 	bic.w	r3, r3, #3
 8001cac:	f043 0201 	orr.w	r2, r3, #1
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	371c      	adds	r7, #28
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd90      	pop	{r4, r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000000 	.word	0x20000000

08001ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <__NVIC_SetPriorityGrouping+0x44>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ce8:	4013      	ands	r3, r2
 8001cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfe:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <__NVIC_SetPriorityGrouping+0x44>)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	60d3      	str	r3, [r2, #12]
}
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d18:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <__NVIC_GetPriorityGrouping+0x18>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	0a1b      	lsrs	r3, r3, #8
 8001d1e:	f003 0307 	and.w	r3, r3, #7
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	6039      	str	r1, [r7, #0]
 8001d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	db0a      	blt.n	8001d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	490c      	ldr	r1, [pc, #48]	; (8001d7c <__NVIC_SetPriority+0x4c>)
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	0112      	lsls	r2, r2, #4
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	440b      	add	r3, r1
 8001d54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d58:	e00a      	b.n	8001d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	4908      	ldr	r1, [pc, #32]	; (8001d80 <__NVIC_SetPriority+0x50>)
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	3b04      	subs	r3, #4
 8001d68:	0112      	lsls	r2, r2, #4
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	761a      	strb	r2, [r3, #24]
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000e100 	.word	0xe000e100
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b089      	sub	sp, #36	; 0x24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f1c3 0307 	rsb	r3, r3, #7
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	bf28      	it	cs
 8001da2:	2304      	movcs	r3, #4
 8001da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	3304      	adds	r3, #4
 8001daa:	2b06      	cmp	r3, #6
 8001dac:	d902      	bls.n	8001db4 <NVIC_EncodePriority+0x30>
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3b03      	subs	r3, #3
 8001db2:	e000      	b.n	8001db6 <NVIC_EncodePriority+0x32>
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43da      	mvns	r2, r3
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	401a      	ands	r2, r3
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd6:	43d9      	mvns	r1, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ddc:	4313      	orrs	r3, r2
         );
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3724      	adds	r7, #36	; 0x24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr

08001de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001df8:	d301      	bcc.n	8001dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e00f      	b.n	8001e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dfe:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <SysTick_Config+0x40>)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e06:	210f      	movs	r1, #15
 8001e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e0c:	f7ff ff90 	bl	8001d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <SysTick_Config+0x40>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e16:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <SysTick_Config+0x40>)
 8001e18:	2207      	movs	r2, #7
 8001e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	e000e010 	.word	0xe000e010

08001e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff ff49 	bl	8001ccc <__NVIC_SetPriorityGrouping>
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b086      	sub	sp, #24
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	4603      	mov	r3, r0
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]
 8001e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e54:	f7ff ff5e 	bl	8001d14 <__NVIC_GetPriorityGrouping>
 8001e58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	68b9      	ldr	r1, [r7, #8]
 8001e5e:	6978      	ldr	r0, [r7, #20]
 8001e60:	f7ff ff90 	bl	8001d84 <NVIC_EncodePriority>
 8001e64:	4602      	mov	r2, r0
 8001e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ff5f 	bl	8001d30 <__NVIC_SetPriority>
}
 8001e72:	bf00      	nop
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff ffb0 	bl	8001de8 <SysTick_Config>
 8001e88:	4603      	mov	r3, r0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b08b      	sub	sp, #44	; 0x2c
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea6:	e179      	b.n	800219c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	69fa      	ldr	r2, [r7, #28]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	f040 8168 	bne.w	8002196 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	4a96      	ldr	r2, [pc, #600]	; (8002124 <HAL_GPIO_Init+0x290>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d05e      	beq.n	8001f8e <HAL_GPIO_Init+0xfa>
 8001ed0:	4a94      	ldr	r2, [pc, #592]	; (8002124 <HAL_GPIO_Init+0x290>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d875      	bhi.n	8001fc2 <HAL_GPIO_Init+0x12e>
 8001ed6:	4a94      	ldr	r2, [pc, #592]	; (8002128 <HAL_GPIO_Init+0x294>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d058      	beq.n	8001f8e <HAL_GPIO_Init+0xfa>
 8001edc:	4a92      	ldr	r2, [pc, #584]	; (8002128 <HAL_GPIO_Init+0x294>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d86f      	bhi.n	8001fc2 <HAL_GPIO_Init+0x12e>
 8001ee2:	4a92      	ldr	r2, [pc, #584]	; (800212c <HAL_GPIO_Init+0x298>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d052      	beq.n	8001f8e <HAL_GPIO_Init+0xfa>
 8001ee8:	4a90      	ldr	r2, [pc, #576]	; (800212c <HAL_GPIO_Init+0x298>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d869      	bhi.n	8001fc2 <HAL_GPIO_Init+0x12e>
 8001eee:	4a90      	ldr	r2, [pc, #576]	; (8002130 <HAL_GPIO_Init+0x29c>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d04c      	beq.n	8001f8e <HAL_GPIO_Init+0xfa>
 8001ef4:	4a8e      	ldr	r2, [pc, #568]	; (8002130 <HAL_GPIO_Init+0x29c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d863      	bhi.n	8001fc2 <HAL_GPIO_Init+0x12e>
 8001efa:	4a8e      	ldr	r2, [pc, #568]	; (8002134 <HAL_GPIO_Init+0x2a0>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d046      	beq.n	8001f8e <HAL_GPIO_Init+0xfa>
 8001f00:	4a8c      	ldr	r2, [pc, #560]	; (8002134 <HAL_GPIO_Init+0x2a0>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d85d      	bhi.n	8001fc2 <HAL_GPIO_Init+0x12e>
 8001f06:	2b12      	cmp	r3, #18
 8001f08:	d82a      	bhi.n	8001f60 <HAL_GPIO_Init+0xcc>
 8001f0a:	2b12      	cmp	r3, #18
 8001f0c:	d859      	bhi.n	8001fc2 <HAL_GPIO_Init+0x12e>
 8001f0e:	a201      	add	r2, pc, #4	; (adr r2, 8001f14 <HAL_GPIO_Init+0x80>)
 8001f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f14:	08001f8f 	.word	0x08001f8f
 8001f18:	08001f69 	.word	0x08001f69
 8001f1c:	08001f7b 	.word	0x08001f7b
 8001f20:	08001fbd 	.word	0x08001fbd
 8001f24:	08001fc3 	.word	0x08001fc3
 8001f28:	08001fc3 	.word	0x08001fc3
 8001f2c:	08001fc3 	.word	0x08001fc3
 8001f30:	08001fc3 	.word	0x08001fc3
 8001f34:	08001fc3 	.word	0x08001fc3
 8001f38:	08001fc3 	.word	0x08001fc3
 8001f3c:	08001fc3 	.word	0x08001fc3
 8001f40:	08001fc3 	.word	0x08001fc3
 8001f44:	08001fc3 	.word	0x08001fc3
 8001f48:	08001fc3 	.word	0x08001fc3
 8001f4c:	08001fc3 	.word	0x08001fc3
 8001f50:	08001fc3 	.word	0x08001fc3
 8001f54:	08001fc3 	.word	0x08001fc3
 8001f58:	08001f71 	.word	0x08001f71
 8001f5c:	08001f85 	.word	0x08001f85
 8001f60:	4a75      	ldr	r2, [pc, #468]	; (8002138 <HAL_GPIO_Init+0x2a4>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d013      	beq.n	8001f8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f66:	e02c      	b.n	8001fc2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	623b      	str	r3, [r7, #32]
          break;
 8001f6e:	e029      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	3304      	adds	r3, #4
 8001f76:	623b      	str	r3, [r7, #32]
          break;
 8001f78:	e024      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	3308      	adds	r3, #8
 8001f80:	623b      	str	r3, [r7, #32]
          break;
 8001f82:	e01f      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	330c      	adds	r3, #12
 8001f8a:	623b      	str	r3, [r7, #32]
          break;
 8001f8c:	e01a      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d102      	bne.n	8001f9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f96:	2304      	movs	r3, #4
 8001f98:	623b      	str	r3, [r7, #32]
          break;
 8001f9a:	e013      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d105      	bne.n	8001fb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fa4:	2308      	movs	r3, #8
 8001fa6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69fa      	ldr	r2, [r7, #28]
 8001fac:	611a      	str	r2, [r3, #16]
          break;
 8001fae:	e009      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fb0:	2308      	movs	r3, #8
 8001fb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69fa      	ldr	r2, [r7, #28]
 8001fb8:	615a      	str	r2, [r3, #20]
          break;
 8001fba:	e003      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	623b      	str	r3, [r7, #32]
          break;
 8001fc0:	e000      	b.n	8001fc4 <HAL_GPIO_Init+0x130>
          break;
 8001fc2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	2bff      	cmp	r3, #255	; 0xff
 8001fc8:	d801      	bhi.n	8001fce <HAL_GPIO_Init+0x13a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	e001      	b.n	8001fd2 <HAL_GPIO_Init+0x13e>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	2bff      	cmp	r3, #255	; 0xff
 8001fd8:	d802      	bhi.n	8001fe0 <HAL_GPIO_Init+0x14c>
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	e002      	b.n	8001fe6 <HAL_GPIO_Init+0x152>
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	3b08      	subs	r3, #8
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	210f      	movs	r1, #15
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	6a39      	ldr	r1, [r7, #32]
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8002000:	431a      	orrs	r2, r3
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 80c1 	beq.w	8002196 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002014:	4b49      	ldr	r3, [pc, #292]	; (800213c <HAL_GPIO_Init+0x2a8>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	4a48      	ldr	r2, [pc, #288]	; (800213c <HAL_GPIO_Init+0x2a8>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6193      	str	r3, [r2, #24]
 8002020:	4b46      	ldr	r3, [pc, #280]	; (800213c <HAL_GPIO_Init+0x2a8>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800202c:	4a44      	ldr	r2, [pc, #272]	; (8002140 <HAL_GPIO_Init+0x2ac>)
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	089b      	lsrs	r3, r3, #2
 8002032:	3302      	adds	r3, #2
 8002034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002038:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	220f      	movs	r2, #15
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	4013      	ands	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a3c      	ldr	r2, [pc, #240]	; (8002144 <HAL_GPIO_Init+0x2b0>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d01f      	beq.n	8002098 <HAL_GPIO_Init+0x204>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a3b      	ldr	r2, [pc, #236]	; (8002148 <HAL_GPIO_Init+0x2b4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d019      	beq.n	8002094 <HAL_GPIO_Init+0x200>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a3a      	ldr	r2, [pc, #232]	; (800214c <HAL_GPIO_Init+0x2b8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d013      	beq.n	8002090 <HAL_GPIO_Init+0x1fc>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a39      	ldr	r2, [pc, #228]	; (8002150 <HAL_GPIO_Init+0x2bc>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d00d      	beq.n	800208c <HAL_GPIO_Init+0x1f8>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a38      	ldr	r2, [pc, #224]	; (8002154 <HAL_GPIO_Init+0x2c0>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d007      	beq.n	8002088 <HAL_GPIO_Init+0x1f4>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a37      	ldr	r2, [pc, #220]	; (8002158 <HAL_GPIO_Init+0x2c4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d101      	bne.n	8002084 <HAL_GPIO_Init+0x1f0>
 8002080:	2305      	movs	r3, #5
 8002082:	e00a      	b.n	800209a <HAL_GPIO_Init+0x206>
 8002084:	2306      	movs	r3, #6
 8002086:	e008      	b.n	800209a <HAL_GPIO_Init+0x206>
 8002088:	2304      	movs	r3, #4
 800208a:	e006      	b.n	800209a <HAL_GPIO_Init+0x206>
 800208c:	2303      	movs	r3, #3
 800208e:	e004      	b.n	800209a <HAL_GPIO_Init+0x206>
 8002090:	2302      	movs	r3, #2
 8002092:	e002      	b.n	800209a <HAL_GPIO_Init+0x206>
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <HAL_GPIO_Init+0x206>
 8002098:	2300      	movs	r3, #0
 800209a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800209c:	f002 0203 	and.w	r2, r2, #3
 80020a0:	0092      	lsls	r2, r2, #2
 80020a2:	4093      	lsls	r3, r2
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020aa:	4925      	ldr	r1, [pc, #148]	; (8002140 <HAL_GPIO_Init+0x2ac>)
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	089b      	lsrs	r3, r3, #2
 80020b0:	3302      	adds	r3, #2
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d006      	beq.n	80020d2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020c4:	4b25      	ldr	r3, [pc, #148]	; (800215c <HAL_GPIO_Init+0x2c8>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4924      	ldr	r1, [pc, #144]	; (800215c <HAL_GPIO_Init+0x2c8>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	600b      	str	r3, [r1, #0]
 80020d0:	e006      	b.n	80020e0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020d2:	4b22      	ldr	r3, [pc, #136]	; (800215c <HAL_GPIO_Init+0x2c8>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	43db      	mvns	r3, r3
 80020da:	4920      	ldr	r1, [pc, #128]	; (800215c <HAL_GPIO_Init+0x2c8>)
 80020dc:	4013      	ands	r3, r2
 80020de:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d006      	beq.n	80020fa <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020ec:	4b1b      	ldr	r3, [pc, #108]	; (800215c <HAL_GPIO_Init+0x2c8>)
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	491a      	ldr	r1, [pc, #104]	; (800215c <HAL_GPIO_Init+0x2c8>)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	604b      	str	r3, [r1, #4]
 80020f8:	e006      	b.n	8002108 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020fa:	4b18      	ldr	r3, [pc, #96]	; (800215c <HAL_GPIO_Init+0x2c8>)
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	43db      	mvns	r3, r3
 8002102:	4916      	ldr	r1, [pc, #88]	; (800215c <HAL_GPIO_Init+0x2c8>)
 8002104:	4013      	ands	r3, r2
 8002106:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d025      	beq.n	8002160 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <HAL_GPIO_Init+0x2c8>)
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	4910      	ldr	r1, [pc, #64]	; (800215c <HAL_GPIO_Init+0x2c8>)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	608b      	str	r3, [r1, #8]
 8002120:	e025      	b.n	800216e <HAL_GPIO_Init+0x2da>
 8002122:	bf00      	nop
 8002124:	10320000 	.word	0x10320000
 8002128:	10310000 	.word	0x10310000
 800212c:	10220000 	.word	0x10220000
 8002130:	10210000 	.word	0x10210000
 8002134:	10120000 	.word	0x10120000
 8002138:	10110000 	.word	0x10110000
 800213c:	40021000 	.word	0x40021000
 8002140:	40010000 	.word	0x40010000
 8002144:	40010800 	.word	0x40010800
 8002148:	40010c00 	.word	0x40010c00
 800214c:	40011000 	.word	0x40011000
 8002150:	40011400 	.word	0x40011400
 8002154:	40011800 	.word	0x40011800
 8002158:	40011c00 	.word	0x40011c00
 800215c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002160:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <HAL_GPIO_Init+0x324>)
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	43db      	mvns	r3, r3
 8002168:	4913      	ldr	r1, [pc, #76]	; (80021b8 <HAL_GPIO_Init+0x324>)
 800216a:	4013      	ands	r3, r2
 800216c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d006      	beq.n	8002188 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800217a:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <HAL_GPIO_Init+0x324>)
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	490e      	ldr	r1, [pc, #56]	; (80021b8 <HAL_GPIO_Init+0x324>)
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	4313      	orrs	r3, r2
 8002184:	60cb      	str	r3, [r1, #12]
 8002186:	e006      	b.n	8002196 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_GPIO_Init+0x324>)
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	43db      	mvns	r3, r3
 8002190:	4909      	ldr	r1, [pc, #36]	; (80021b8 <HAL_GPIO_Init+0x324>)
 8002192:	4013      	ands	r3, r2
 8002194:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	3301      	adds	r3, #1
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	fa22 f303 	lsr.w	r3, r2, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f47f ae7e 	bne.w	8001ea8 <HAL_GPIO_Init+0x14>
  }
}
 80021ac:	bf00      	nop
 80021ae:	bf00      	nop
 80021b0:	372c      	adds	r7, #44	; 0x2c
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr
 80021b8:	40010400 	.word	0x40010400

080021bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	887b      	ldrh	r3, [r7, #2]
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d002      	beq.n	80021da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021d4:	2301      	movs	r3, #1
 80021d6:	73fb      	strb	r3, [r7, #15]
 80021d8:	e001      	b.n	80021de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021da:	2300      	movs	r3, #0
 80021dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021de:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr

080021ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	460b      	mov	r3, r1
 80021f4:	807b      	strh	r3, [r7, #2]
 80021f6:	4613      	mov	r3, r2
 80021f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021fa:	787b      	ldrb	r3, [r7, #1]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002200:	887a      	ldrh	r2, [r7, #2]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002206:	e003      	b.n	8002210 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002208:	887b      	ldrh	r3, [r7, #2]
 800220a:	041a      	lsls	r2, r3, #16
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	611a      	str	r2, [r3, #16]
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr
	...

0800221c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e272      	b.n	8002714 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 8087 	beq.w	800234a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800223c:	4b92      	ldr	r3, [pc, #584]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 030c 	and.w	r3, r3, #12
 8002244:	2b04      	cmp	r3, #4
 8002246:	d00c      	beq.n	8002262 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002248:	4b8f      	ldr	r3, [pc, #572]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 030c 	and.w	r3, r3, #12
 8002250:	2b08      	cmp	r3, #8
 8002252:	d112      	bne.n	800227a <HAL_RCC_OscConfig+0x5e>
 8002254:	4b8c      	ldr	r3, [pc, #560]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800225c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002260:	d10b      	bne.n	800227a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002262:	4b89      	ldr	r3, [pc, #548]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d06c      	beq.n	8002348 <HAL_RCC_OscConfig+0x12c>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d168      	bne.n	8002348 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e24c      	b.n	8002714 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002282:	d106      	bne.n	8002292 <HAL_RCC_OscConfig+0x76>
 8002284:	4b80      	ldr	r3, [pc, #512]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a7f      	ldr	r2, [pc, #508]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 800228a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228e:	6013      	str	r3, [r2, #0]
 8002290:	e02e      	b.n	80022f0 <HAL_RCC_OscConfig+0xd4>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10c      	bne.n	80022b4 <HAL_RCC_OscConfig+0x98>
 800229a:	4b7b      	ldr	r3, [pc, #492]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a7a      	ldr	r2, [pc, #488]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	4b78      	ldr	r3, [pc, #480]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a77      	ldr	r2, [pc, #476]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	e01d      	b.n	80022f0 <HAL_RCC_OscConfig+0xd4>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022bc:	d10c      	bne.n	80022d8 <HAL_RCC_OscConfig+0xbc>
 80022be:	4b72      	ldr	r3, [pc, #456]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a71      	ldr	r2, [pc, #452]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	4b6f      	ldr	r3, [pc, #444]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a6e      	ldr	r2, [pc, #440]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	e00b      	b.n	80022f0 <HAL_RCC_OscConfig+0xd4>
 80022d8:	4b6b      	ldr	r3, [pc, #428]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a6a      	ldr	r2, [pc, #424]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 80022de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e2:	6013      	str	r3, [r2, #0]
 80022e4:	4b68      	ldr	r3, [pc, #416]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a67      	ldr	r2, [pc, #412]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 80022ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d013      	beq.n	8002320 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f8:	f7fe ffa4 	bl	8001244 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002300:	f7fe ffa0 	bl	8001244 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b64      	cmp	r3, #100	; 0x64
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e200      	b.n	8002714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002312:	4b5d      	ldr	r3, [pc, #372]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0f0      	beq.n	8002300 <HAL_RCC_OscConfig+0xe4>
 800231e:	e014      	b.n	800234a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002320:	f7fe ff90 	bl	8001244 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002328:	f7fe ff8c 	bl	8001244 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b64      	cmp	r3, #100	; 0x64
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e1ec      	b.n	8002714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233a:	4b53      	ldr	r3, [pc, #332]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x10c>
 8002346:	e000      	b.n	800234a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d063      	beq.n	800241e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002356:	4b4c      	ldr	r3, [pc, #304]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00b      	beq.n	800237a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002362:	4b49      	ldr	r3, [pc, #292]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f003 030c 	and.w	r3, r3, #12
 800236a:	2b08      	cmp	r3, #8
 800236c:	d11c      	bne.n	80023a8 <HAL_RCC_OscConfig+0x18c>
 800236e:	4b46      	ldr	r3, [pc, #280]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d116      	bne.n	80023a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800237a:	4b43      	ldr	r3, [pc, #268]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d005      	beq.n	8002392 <HAL_RCC_OscConfig+0x176>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d001      	beq.n	8002392 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e1c0      	b.n	8002714 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002392:	4b3d      	ldr	r3, [pc, #244]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	4939      	ldr	r1, [pc, #228]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023a6:	e03a      	b.n	800241e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d020      	beq.n	80023f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023b0:	4b36      	ldr	r3, [pc, #216]	; (800248c <HAL_RCC_OscConfig+0x270>)
 80023b2:	2201      	movs	r2, #1
 80023b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b6:	f7fe ff45 	bl	8001244 <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023be:	f7fe ff41 	bl	8001244 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e1a1      	b.n	8002714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d0:	4b2d      	ldr	r3, [pc, #180]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0f0      	beq.n	80023be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023dc:	4b2a      	ldr	r3, [pc, #168]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	4927      	ldr	r1, [pc, #156]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	600b      	str	r3, [r1, #0]
 80023f0:	e015      	b.n	800241e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023f2:	4b26      	ldr	r3, [pc, #152]	; (800248c <HAL_RCC_OscConfig+0x270>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f8:	f7fe ff24 	bl	8001244 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002400:	f7fe ff20 	bl	8001244 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e180      	b.n	8002714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002412:	4b1d      	ldr	r3, [pc, #116]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f0      	bne.n	8002400 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d03a      	beq.n	80024a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d019      	beq.n	8002466 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002432:	4b17      	ldr	r3, [pc, #92]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 8002434:	2201      	movs	r2, #1
 8002436:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002438:	f7fe ff04 	bl	8001244 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002440:	f7fe ff00 	bl	8001244 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e160      	b.n	8002714 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002452:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <HAL_RCC_OscConfig+0x26c>)
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0f0      	beq.n	8002440 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800245e:	2001      	movs	r0, #1
 8002460:	f000 fac4 	bl	80029ec <RCC_Delay>
 8002464:	e01c      	b.n	80024a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002466:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <HAL_RCC_OscConfig+0x274>)
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246c:	f7fe feea 	bl	8001244 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002472:	e00f      	b.n	8002494 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002474:	f7fe fee6 	bl	8001244 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d908      	bls.n	8002494 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e146      	b.n	8002714 <HAL_RCC_OscConfig+0x4f8>
 8002486:	bf00      	nop
 8002488:	40021000 	.word	0x40021000
 800248c:	42420000 	.word	0x42420000
 8002490:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002494:	4b92      	ldr	r3, [pc, #584]	; (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1e9      	bne.n	8002474 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 80a6 	beq.w	80025fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ae:	2300      	movs	r3, #0
 80024b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024b2:	4b8b      	ldr	r3, [pc, #556]	; (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10d      	bne.n	80024da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024be:	4b88      	ldr	r3, [pc, #544]	; (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	4a87      	ldr	r2, [pc, #540]	; (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c8:	61d3      	str	r3, [r2, #28]
 80024ca:	4b85      	ldr	r3, [pc, #532]	; (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d6:	2301      	movs	r3, #1
 80024d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024da:	4b82      	ldr	r3, [pc, #520]	; (80026e4 <HAL_RCC_OscConfig+0x4c8>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d118      	bne.n	8002518 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024e6:	4b7f      	ldr	r3, [pc, #508]	; (80026e4 <HAL_RCC_OscConfig+0x4c8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a7e      	ldr	r2, [pc, #504]	; (80026e4 <HAL_RCC_OscConfig+0x4c8>)
 80024ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f2:	f7fe fea7 	bl	8001244 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024fa:	f7fe fea3 	bl	8001244 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b64      	cmp	r3, #100	; 0x64
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e103      	b.n	8002714 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250c:	4b75      	ldr	r3, [pc, #468]	; (80026e4 <HAL_RCC_OscConfig+0x4c8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0f0      	beq.n	80024fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d106      	bne.n	800252e <HAL_RCC_OscConfig+0x312>
 8002520:	4b6f      	ldr	r3, [pc, #444]	; (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	4a6e      	ldr	r2, [pc, #440]	; (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6213      	str	r3, [r2, #32]
 800252c:	e02d      	b.n	800258a <HAL_RCC_OscConfig+0x36e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10c      	bne.n	8002550 <HAL_RCC_OscConfig+0x334>
 8002536:	4b6a      	ldr	r3, [pc, #424]	; (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	4a69      	ldr	r2, [pc, #420]	; (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 800253c:	f023 0301 	bic.w	r3, r3, #1
 8002540:	6213      	str	r3, [r2, #32]
 8002542:	4b67      	ldr	r3, [pc, #412]	; (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	4a66      	ldr	r2, [pc, #408]	; (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 8002548:	f023 0304 	bic.w	r3, r3, #4
 800254c:	6213      	str	r3, [r2, #32]
 800254e:	e01c      	b.n	800258a <HAL_RCC_OscConfig+0x36e>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	2b05      	cmp	r3, #5
 8002556:	d10c      	bne.n	8002572 <HAL_RCC_OscConfig+0x356>
 8002558:	4b61      	ldr	r3, [pc, #388]	; (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	4a60      	ldr	r2, [pc, #384]	; (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 800255e:	f043 0304 	orr.w	r3, r3, #4
 8002562:	6213      	str	r3, [r2, #32]
 8002564:	4b5e      	ldr	r3, [pc, #376]	; (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	4a5d      	ldr	r2, [pc, #372]	; (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	6213      	str	r3, [r2, #32]
 8002570:	e00b      	b.n	800258a <HAL_RCC_OscConfig+0x36e>
 8002572:	4b5b      	ldr	r3, [pc, #364]	; (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	4a5a      	ldr	r2, [pc, #360]	; (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 8002578:	f023 0301 	bic.w	r3, r3, #1
 800257c:	6213      	str	r3, [r2, #32]
 800257e:	4b58      	ldr	r3, [pc, #352]	; (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	4a57      	ldr	r2, [pc, #348]	; (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 8002584:	f023 0304 	bic.w	r3, r3, #4
 8002588:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d015      	beq.n	80025be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002592:	f7fe fe57 	bl	8001244 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002598:	e00a      	b.n	80025b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800259a:	f7fe fe53 	bl	8001244 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e0b1      	b.n	8002714 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b0:	4b4b      	ldr	r3, [pc, #300]	; (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0ee      	beq.n	800259a <HAL_RCC_OscConfig+0x37e>
 80025bc:	e014      	b.n	80025e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025be:	f7fe fe41 	bl	8001244 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c4:	e00a      	b.n	80025dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c6:	f7fe fe3d 	bl	8001244 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e09b      	b.n	8002714 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025dc:	4b40      	ldr	r3, [pc, #256]	; (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1ee      	bne.n	80025c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025e8:	7dfb      	ldrb	r3, [r7, #23]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d105      	bne.n	80025fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ee:	4b3c      	ldr	r3, [pc, #240]	; (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	4a3b      	ldr	r2, [pc, #236]	; (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 80025f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 8087 	beq.w	8002712 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002604:	4b36      	ldr	r3, [pc, #216]	; (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 030c 	and.w	r3, r3, #12
 800260c:	2b08      	cmp	r3, #8
 800260e:	d061      	beq.n	80026d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	2b02      	cmp	r3, #2
 8002616:	d146      	bne.n	80026a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002618:	4b33      	ldr	r3, [pc, #204]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261e:	f7fe fe11 	bl	8001244 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002626:	f7fe fe0d 	bl	8001244 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e06d      	b.n	8002714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002638:	4b29      	ldr	r3, [pc, #164]	; (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1f0      	bne.n	8002626 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800264c:	d108      	bne.n	8002660 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800264e:	4b24      	ldr	r3, [pc, #144]	; (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	4921      	ldr	r1, [pc, #132]	; (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 800265c:	4313      	orrs	r3, r2
 800265e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002660:	4b1f      	ldr	r3, [pc, #124]	; (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a19      	ldr	r1, [r3, #32]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	430b      	orrs	r3, r1
 8002672:	491b      	ldr	r1, [pc, #108]	; (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 8002674:	4313      	orrs	r3, r2
 8002676:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002678:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 800267a:	2201      	movs	r2, #1
 800267c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267e:	f7fe fde1 	bl	8001244 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002686:	f7fe fddd 	bl	8001244 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e03d      	b.n	8002714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002698:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0f0      	beq.n	8002686 <HAL_RCC_OscConfig+0x46a>
 80026a4:	e035      	b.n	8002712 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a6:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <HAL_RCC_OscConfig+0x4cc>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ac:	f7fe fdca 	bl	8001244 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b4:	f7fe fdc6 	bl	8001244 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e026      	b.n	8002714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c6:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <HAL_RCC_OscConfig+0x4c4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x498>
 80026d2:	e01e      	b.n	8002712 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d107      	bne.n	80026ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e019      	b.n	8002714 <HAL_RCC_OscConfig+0x4f8>
 80026e0:	40021000 	.word	0x40021000
 80026e4:	40007000 	.word	0x40007000
 80026e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026ec:	4b0b      	ldr	r3, [pc, #44]	; (800271c <HAL_RCC_OscConfig+0x500>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d106      	bne.n	800270e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800270a:	429a      	cmp	r2, r3
 800270c:	d001      	beq.n	8002712 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40021000 	.word	0x40021000

08002720 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e0d0      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002734:	4b6a      	ldr	r3, [pc, #424]	; (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d910      	bls.n	8002764 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002742:	4b67      	ldr	r3, [pc, #412]	; (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 0207 	bic.w	r2, r3, #7
 800274a:	4965      	ldr	r1, [pc, #404]	; (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	4313      	orrs	r3, r2
 8002750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002752:	4b63      	ldr	r3, [pc, #396]	; (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d001      	beq.n	8002764 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e0b8      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d020      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800277c:	4b59      	ldr	r3, [pc, #356]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	4a58      	ldr	r2, [pc, #352]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002786:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	2b00      	cmp	r3, #0
 8002792:	d005      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002794:	4b53      	ldr	r3, [pc, #332]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	4a52      	ldr	r2, [pc, #328]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 800279a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800279e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a0:	4b50      	ldr	r3, [pc, #320]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	494d      	ldr	r1, [pc, #308]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d040      	beq.n	8002840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d107      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c6:	4b47      	ldr	r3, [pc, #284]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d115      	bne.n	80027fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e07f      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d107      	bne.n	80027ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027de:	4b41      	ldr	r3, [pc, #260]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d109      	bne.n	80027fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e073      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ee:	4b3d      	ldr	r3, [pc, #244]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e06b      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027fe:	4b39      	ldr	r3, [pc, #228]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f023 0203 	bic.w	r2, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	4936      	ldr	r1, [pc, #216]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	4313      	orrs	r3, r2
 800280e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002810:	f7fe fd18 	bl	8001244 <HAL_GetTick>
 8002814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002816:	e00a      	b.n	800282e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002818:	f7fe fd14 	bl	8001244 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	f241 3288 	movw	r2, #5000	; 0x1388
 8002826:	4293      	cmp	r3, r2
 8002828:	d901      	bls.n	800282e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e053      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282e:	4b2d      	ldr	r3, [pc, #180]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f003 020c 	and.w	r2, r3, #12
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	429a      	cmp	r2, r3
 800283e:	d1eb      	bne.n	8002818 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002840:	4b27      	ldr	r3, [pc, #156]	; (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	429a      	cmp	r2, r3
 800284c:	d210      	bcs.n	8002870 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284e:	4b24      	ldr	r3, [pc, #144]	; (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f023 0207 	bic.w	r2, r3, #7
 8002856:	4922      	ldr	r1, [pc, #136]	; (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	4313      	orrs	r3, r2
 800285c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800285e:	4b20      	ldr	r3, [pc, #128]	; (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	429a      	cmp	r2, r3
 800286a:	d001      	beq.n	8002870 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e032      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d008      	beq.n	800288e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800287c:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	4916      	ldr	r1, [pc, #88]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	4313      	orrs	r3, r2
 800288c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d009      	beq.n	80028ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800289a:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	490e      	ldr	r1, [pc, #56]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028ae:	f000 f821 	bl	80028f4 <HAL_RCC_GetSysClockFreq>
 80028b2:	4602      	mov	r2, r0
 80028b4:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	091b      	lsrs	r3, r3, #4
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	490a      	ldr	r1, [pc, #40]	; (80028e8 <HAL_RCC_ClockConfig+0x1c8>)
 80028c0:	5ccb      	ldrb	r3, [r1, r3]
 80028c2:	fa22 f303 	lsr.w	r3, r2, r3
 80028c6:	4a09      	ldr	r2, [pc, #36]	; (80028ec <HAL_RCC_ClockConfig+0x1cc>)
 80028c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028ca:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <HAL_RCC_ClockConfig+0x1d0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fe fc76 	bl	80011c0 <HAL_InitTick>

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40022000 	.word	0x40022000
 80028e4:	40021000 	.word	0x40021000
 80028e8:	08003f6c 	.word	0x08003f6c
 80028ec:	20000000 	.word	0x20000000
 80028f0:	20000004 	.word	0x20000004

080028f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028f4:	b490      	push	{r4, r7}
 80028f6:	b08a      	sub	sp, #40	; 0x28
 80028f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028fa:	4b29      	ldr	r3, [pc, #164]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xac>)
 80028fc:	1d3c      	adds	r4, r7, #4
 80028fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002900:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002904:	f240 2301 	movw	r3, #513	; 0x201
 8002908:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]
 800290e:	2300      	movs	r3, #0
 8002910:	61bb      	str	r3, [r7, #24]
 8002912:	2300      	movs	r3, #0
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800291a:	2300      	movs	r3, #0
 800291c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800291e:	4b21      	ldr	r3, [pc, #132]	; (80029a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f003 030c 	and.w	r3, r3, #12
 800292a:	2b04      	cmp	r3, #4
 800292c:	d002      	beq.n	8002934 <HAL_RCC_GetSysClockFreq+0x40>
 800292e:	2b08      	cmp	r3, #8
 8002930:	d003      	beq.n	800293a <HAL_RCC_GetSysClockFreq+0x46>
 8002932:	e02b      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002934:	4b1c      	ldr	r3, [pc, #112]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002936:	623b      	str	r3, [r7, #32]
      break;
 8002938:	e02b      	b.n	8002992 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	0c9b      	lsrs	r3, r3, #18
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	3328      	adds	r3, #40	; 0x28
 8002944:	443b      	add	r3, r7
 8002946:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800294a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d012      	beq.n	800297c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002956:	4b13      	ldr	r3, [pc, #76]	; (80029a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	0c5b      	lsrs	r3, r3, #17
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	3328      	adds	r3, #40	; 0x28
 8002962:	443b      	add	r3, r7
 8002964:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002968:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	4a0e      	ldr	r2, [pc, #56]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800296e:	fb03 f202 	mul.w	r2, r3, r2
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	fbb2 f3f3 	udiv	r3, r2, r3
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
 800297a:	e004      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	4a0b      	ldr	r2, [pc, #44]	; (80029ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002980:	fb02 f303 	mul.w	r3, r2, r3
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	623b      	str	r3, [r7, #32]
      break;
 800298a:	e002      	b.n	8002992 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800298c:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800298e:	623b      	str	r3, [r7, #32]
      break;
 8002990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002992:	6a3b      	ldr	r3, [r7, #32]
}
 8002994:	4618      	mov	r0, r3
 8002996:	3728      	adds	r7, #40	; 0x28
 8002998:	46bd      	mov	sp, r7
 800299a:	bc90      	pop	{r4, r7}
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	0800395c 	.word	0x0800395c
 80029a4:	40021000 	.word	0x40021000
 80029a8:	007a1200 	.word	0x007a1200
 80029ac:	003d0900 	.word	0x003d0900

080029b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b4:	4b02      	ldr	r3, [pc, #8]	; (80029c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80029b6:	681b      	ldr	r3, [r3, #0]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr
 80029c0:	20000000 	.word	0x20000000

080029c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029c8:	f7ff fff2 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 80029cc:	4602      	mov	r2, r0
 80029ce:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	0adb      	lsrs	r3, r3, #11
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	4903      	ldr	r1, [pc, #12]	; (80029e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029da:	5ccb      	ldrb	r3, [r1, r3]
 80029dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40021000 	.word	0x40021000
 80029e8:	08003f7c 	.word	0x08003f7c

080029ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029f4:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <RCC_Delay+0x34>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a0a      	ldr	r2, [pc, #40]	; (8002a24 <RCC_Delay+0x38>)
 80029fa:	fba2 2303 	umull	r2, r3, r2, r3
 80029fe:	0a5b      	lsrs	r3, r3, #9
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	fb02 f303 	mul.w	r3, r2, r3
 8002a06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a08:	bf00      	nop
  }
  while (Delay --);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1e5a      	subs	r2, r3, #1
 8002a0e:	60fa      	str	r2, [r7, #12]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1f9      	bne.n	8002a08 <RCC_Delay+0x1c>
}
 8002a14:	bf00      	nop
 8002a16:	bf00      	nop
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr
 8002a20:	20000000 	.word	0x20000000
 8002a24:	10624dd3 	.word	0x10624dd3

08002a28 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	613b      	str	r3, [r7, #16]
 8002a34:	2300      	movs	r3, #0
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d07d      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002a44:	2300      	movs	r3, #0
 8002a46:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a48:	4b4f      	ldr	r3, [pc, #316]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10d      	bne.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a54:	4b4c      	ldr	r3, [pc, #304]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	4a4b      	ldr	r2, [pc, #300]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	61d3      	str	r3, [r2, #28]
 8002a60:	4b49      	ldr	r3, [pc, #292]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a70:	4b46      	ldr	r3, [pc, #280]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d118      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a7c:	4b43      	ldr	r3, [pc, #268]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a42      	ldr	r2, [pc, #264]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a88:	f7fe fbdc 	bl	8001244 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a90:	f7fe fbd8 	bl	8001244 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	; 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e06d      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa2:	4b3a      	ldr	r3, [pc, #232]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0f0      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002aae:	4b36      	ldr	r3, [pc, #216]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ab6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d02e      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d027      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002acc:	4b2e      	ldr	r3, [pc, #184]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ad4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ad6:	4b2e      	ldr	r3, [pc, #184]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002adc:	4b2c      	ldr	r3, [pc, #176]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ae2:	4a29      	ldr	r2, [pc, #164]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d014      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af2:	f7fe fba7 	bl	8001244 <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af8:	e00a      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002afa:	f7fe fba3 	bl	8001244 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e036      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b10:	4b1d      	ldr	r3, [pc, #116]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0ee      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b1c:	4b1a      	ldr	r3, [pc, #104]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	4917      	ldr	r1, [pc, #92]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b2e:	7dfb      	ldrb	r3, [r7, #23]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d105      	bne.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b34:	4b14      	ldr	r3, [pc, #80]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	4a13      	ldr	r2, [pc, #76]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b3e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b4c:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	490b      	ldr	r1, [pc, #44]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0310 	and.w	r3, r3, #16
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d008      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b6a:	4b07      	ldr	r3, [pc, #28]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	4904      	ldr	r1, [pc, #16]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	40007000 	.word	0x40007000
 8002b90:	42420440 	.word	0x42420440

08002b94 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002b94:	b590      	push	{r4, r7, lr}
 8002b96:	b08d      	sub	sp, #52	; 0x34
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b9c:	4b6a      	ldr	r3, [pc, #424]	; (8002d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8002b9e:	f107 040c 	add.w	r4, r7, #12
 8002ba2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ba4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ba8:	f240 2301 	movw	r3, #513	; 0x201
 8002bac:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61fb      	str	r3, [r7, #28]
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	2b0f      	cmp	r3, #15
 8002bc8:	f200 80b4 	bhi.w	8002d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8002bcc:	a201      	add	r2, pc, #4	; (adr r2, 8002bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8002bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd2:	bf00      	nop
 8002bd4:	08002cb3 	.word	0x08002cb3
 8002bd8:	08002d19 	.word	0x08002d19
 8002bdc:	08002d35 	.word	0x08002d35
 8002be0:	08002ca3 	.word	0x08002ca3
 8002be4:	08002d35 	.word	0x08002d35
 8002be8:	08002d35 	.word	0x08002d35
 8002bec:	08002d35 	.word	0x08002d35
 8002bf0:	08002cab 	.word	0x08002cab
 8002bf4:	08002d35 	.word	0x08002d35
 8002bf8:	08002d35 	.word	0x08002d35
 8002bfc:	08002d35 	.word	0x08002d35
 8002c00:	08002d35 	.word	0x08002d35
 8002c04:	08002d35 	.word	0x08002d35
 8002c08:	08002d35 	.word	0x08002d35
 8002c0c:	08002d35 	.word	0x08002d35
 8002c10:	08002c15 	.word	0x08002c15
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8002c14:	4b4d      	ldr	r3, [pc, #308]	; (8002d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002c1a:	4b4c      	ldr	r3, [pc, #304]	; (8002d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 8088 	beq.w	8002d38 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	0c9b      	lsrs	r3, r3, #18
 8002c2c:	f003 030f 	and.w	r3, r3, #15
 8002c30:	3330      	adds	r3, #48	; 0x30
 8002c32:	443b      	add	r3, r7
 8002c34:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c38:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d017      	beq.n	8002c74 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c44:	4b41      	ldr	r3, [pc, #260]	; (8002d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	0c5b      	lsrs	r3, r3, #17
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	3330      	adds	r3, #48	; 0x30
 8002c50:	443b      	add	r3, r7
 8002c52:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c56:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00d      	beq.n	8002c7e <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002c62:	4a3b      	ldr	r2, [pc, #236]	; (8002d50 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	fb02 f303 	mul.w	r3, r2, r3
 8002c70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c72:	e004      	b.n	8002c7e <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	4a37      	ldr	r2, [pc, #220]	; (8002d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002c78:	fb02 f303 	mul.w	r3, r2, r3
 8002c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002c7e:	4b33      	ldr	r3, [pc, #204]	; (8002d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c8a:	d102      	bne.n	8002c92 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8002c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8e:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8002c90:	e052      	b.n	8002d38 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          frequency = (pllclk * 2) / 3;
 8002c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	4a30      	ldr	r2, [pc, #192]	; (8002d58 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8002c98:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9c:	085b      	lsrs	r3, r3, #1
 8002c9e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002ca0:	e04a      	b.n	8002d38 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002ca2:	f7ff fe27 	bl	80028f4 <HAL_RCC_GetSysClockFreq>
 8002ca6:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002ca8:	e049      	b.n	8002d3e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002caa:	f7ff fe23 	bl	80028f4 <HAL_RCC_GetSysClockFreq>
 8002cae:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002cb0:	e045      	b.n	8002d3e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8002cb2:	4b26      	ldr	r3, [pc, #152]	; (8002d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cc2:	d108      	bne.n	8002cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 8002cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cd4:	e01f      	b.n	8002d16 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ce0:	d109      	bne.n	8002cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8002ce2:	4b1a      	ldr	r3, [pc, #104]	; (8002d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 8002cee:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002cf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cf4:	e00f      	b.n	8002d16 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d00:	d11c      	bne.n	8002d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8002d02:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d016      	beq.n	8002d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        frequency = HSE_VALUE / 128U;
 8002d0e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002d12:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8002d14:	e012      	b.n	8002d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8002d16:	e011      	b.n	8002d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002d18:	f7ff fe54 	bl	80029c4 <HAL_RCC_GetPCLK2Freq>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	0b9b      	lsrs	r3, r3, #14
 8002d24:	f003 0303 	and.w	r3, r3, #3
 8002d28:	3301      	adds	r3, #1
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d30:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002d32:	e004      	b.n	8002d3e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    default:
    {
      break;
 8002d34:	bf00      	nop
 8002d36:	e002      	b.n	8002d3e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8002d38:	bf00      	nop
 8002d3a:	e000      	b.n	8002d3e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8002d3c:	bf00      	nop
    }
  }
  return (frequency);
 8002d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3734      	adds	r7, #52	; 0x34
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd90      	pop	{r4, r7, pc}
 8002d48:	0800396c 	.word	0x0800396c
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	007a1200 	.word	0x007a1200
 8002d54:	003d0900 	.word	0x003d0900
 8002d58:	aaaaaaab 	.word	0xaaaaaaab

08002d5c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d004      	beq.n	8002d78 <HAL_SRAM_Init+0x1c>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d76:	d101      	bne.n	8002d7c <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e038      	b.n	8002dee <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d106      	bne.n	8002d96 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f7fe f96b 	bl	800106c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	3308      	adds	r3, #8
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4610      	mov	r0, r2
 8002da2:	f000 f829 	bl	8002df8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6818      	ldr	r0, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	461a      	mov	r2, r3
 8002db0:	68b9      	ldr	r1, [r7, #8]
 8002db2:	f000 f88b 	bl	8002ecc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6858      	ldr	r0, [r3, #4]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	f000 f8b6 	bl	8002f34 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	6892      	ldr	r2, [r2, #8]
 8002dd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	6892      	ldr	r2, [r2, #8]
 8002ddc:	f041 0101 	orr.w	r1, r1, #1
 8002de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
	...

08002df8 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b087      	sub	sp, #28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	6812      	ldr	r2, [r2, #0]
 8002e10:	f023 0101 	bic.w	r1, r3, #1
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d102      	bne.n	8002e28 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8002e22:	2340      	movs	r3, #64	; 0x40
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	e001      	b.n	8002e2c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8002e38:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8002e3e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8002e44:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8002e4a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8002e50:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8002e56:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8002e5c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8002e62:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8002e68:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8002e86:	4b10      	ldr	r3, [pc, #64]	; (8002ec8 <FSMC_NORSRAM_Init+0xd0>)
 8002e88:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e90:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8002e98:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	ea02 0103 	and.w	r1, r2, r3
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	4319      	orrs	r1, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	371c      	adds	r7, #28
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	0008fb7f 	.word	0x0008fb7f

08002ecc <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	1c5a      	adds	r2, r3, #1
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ee2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	021b      	lsls	r3, r3, #8
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	041b      	lsls	r3, r3, #16
 8002f00:	431a      	orrs	r2, r3
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	051b      	lsls	r3, r3, #20
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	3b02      	subs	r3, #2
 8002f12:	061b      	lsls	r3, r3, #24
 8002f14:	431a      	orrs	r2, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	3201      	adds	r2, #1
 8002f20:	4319      	orrs	r1, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr

08002f34 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
 8002f40:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f48:	d11d      	bne.n	8002f86 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002f52:	4b13      	ldr	r3, [pc, #76]	; (8002fa0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	6811      	ldr	r1, [r2, #0]
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	6852      	ldr	r2, [r2, #4]
 8002f5e:	0112      	lsls	r2, r2, #4
 8002f60:	4311      	orrs	r1, r2
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	6892      	ldr	r2, [r2, #8]
 8002f66:	0212      	lsls	r2, r2, #8
 8002f68:	4311      	orrs	r1, r2
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	6992      	ldr	r2, [r2, #24]
 8002f6e:	4311      	orrs	r1, r2
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	68d2      	ldr	r2, [r2, #12]
 8002f74:	0412      	lsls	r2, r2, #16
 8002f76:	430a      	orrs	r2, r1
 8002f78:	ea43 0102 	orr.w	r1, r3, r2
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002f84:	e005      	b.n	8002f92 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8002f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	cff00000 	.word	0xcff00000

08002fa4 <__errno>:
 8002fa4:	4b01      	ldr	r3, [pc, #4]	; (8002fac <__errno+0x8>)
 8002fa6:	6818      	ldr	r0, [r3, #0]
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	2000000c 	.word	0x2000000c

08002fb0 <__libc_init_array>:
 8002fb0:	b570      	push	{r4, r5, r6, lr}
 8002fb2:	2600      	movs	r6, #0
 8002fb4:	4d0c      	ldr	r5, [pc, #48]	; (8002fe8 <__libc_init_array+0x38>)
 8002fb6:	4c0d      	ldr	r4, [pc, #52]	; (8002fec <__libc_init_array+0x3c>)
 8002fb8:	1b64      	subs	r4, r4, r5
 8002fba:	10a4      	asrs	r4, r4, #2
 8002fbc:	42a6      	cmp	r6, r4
 8002fbe:	d109      	bne.n	8002fd4 <__libc_init_array+0x24>
 8002fc0:	f000 fc9c 	bl	80038fc <_init>
 8002fc4:	2600      	movs	r6, #0
 8002fc6:	4d0a      	ldr	r5, [pc, #40]	; (8002ff0 <__libc_init_array+0x40>)
 8002fc8:	4c0a      	ldr	r4, [pc, #40]	; (8002ff4 <__libc_init_array+0x44>)
 8002fca:	1b64      	subs	r4, r4, r5
 8002fcc:	10a4      	asrs	r4, r4, #2
 8002fce:	42a6      	cmp	r6, r4
 8002fd0:	d105      	bne.n	8002fde <__libc_init_array+0x2e>
 8002fd2:	bd70      	pop	{r4, r5, r6, pc}
 8002fd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fd8:	4798      	blx	r3
 8002fda:	3601      	adds	r6, #1
 8002fdc:	e7ee      	b.n	8002fbc <__libc_init_array+0xc>
 8002fde:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fe2:	4798      	blx	r3
 8002fe4:	3601      	adds	r6, #1
 8002fe6:	e7f2      	b.n	8002fce <__libc_init_array+0x1e>
 8002fe8:	08003fb8 	.word	0x08003fb8
 8002fec:	08003fb8 	.word	0x08003fb8
 8002ff0:	08003fb8 	.word	0x08003fb8
 8002ff4:	08003fbc 	.word	0x08003fbc

08002ff8 <memcpy>:
 8002ff8:	440a      	add	r2, r1
 8002ffa:	4291      	cmp	r1, r2
 8002ffc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003000:	d100      	bne.n	8003004 <memcpy+0xc>
 8003002:	4770      	bx	lr
 8003004:	b510      	push	{r4, lr}
 8003006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800300a:	4291      	cmp	r1, r2
 800300c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003010:	d1f9      	bne.n	8003006 <memcpy+0xe>
 8003012:	bd10      	pop	{r4, pc}

08003014 <memset>:
 8003014:	4603      	mov	r3, r0
 8003016:	4402      	add	r2, r0
 8003018:	4293      	cmp	r3, r2
 800301a:	d100      	bne.n	800301e <memset+0xa>
 800301c:	4770      	bx	lr
 800301e:	f803 1b01 	strb.w	r1, [r3], #1
 8003022:	e7f9      	b.n	8003018 <memset+0x4>

08003024 <siprintf>:
 8003024:	b40e      	push	{r1, r2, r3}
 8003026:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800302a:	b500      	push	{lr}
 800302c:	b09c      	sub	sp, #112	; 0x70
 800302e:	ab1d      	add	r3, sp, #116	; 0x74
 8003030:	9002      	str	r0, [sp, #8]
 8003032:	9006      	str	r0, [sp, #24]
 8003034:	9107      	str	r1, [sp, #28]
 8003036:	9104      	str	r1, [sp, #16]
 8003038:	4808      	ldr	r0, [pc, #32]	; (800305c <siprintf+0x38>)
 800303a:	4909      	ldr	r1, [pc, #36]	; (8003060 <siprintf+0x3c>)
 800303c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003040:	9105      	str	r1, [sp, #20]
 8003042:	6800      	ldr	r0, [r0, #0]
 8003044:	a902      	add	r1, sp, #8
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	f000 f868 	bl	800311c <_svfiprintf_r>
 800304c:	2200      	movs	r2, #0
 800304e:	9b02      	ldr	r3, [sp, #8]
 8003050:	701a      	strb	r2, [r3, #0]
 8003052:	b01c      	add	sp, #112	; 0x70
 8003054:	f85d eb04 	ldr.w	lr, [sp], #4
 8003058:	b003      	add	sp, #12
 800305a:	4770      	bx	lr
 800305c:	2000000c 	.word	0x2000000c
 8003060:	ffff0208 	.word	0xffff0208

08003064 <__ssputs_r>:
 8003064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003068:	688e      	ldr	r6, [r1, #8]
 800306a:	4682      	mov	sl, r0
 800306c:	429e      	cmp	r6, r3
 800306e:	460c      	mov	r4, r1
 8003070:	4690      	mov	r8, r2
 8003072:	461f      	mov	r7, r3
 8003074:	d838      	bhi.n	80030e8 <__ssputs_r+0x84>
 8003076:	898a      	ldrh	r2, [r1, #12]
 8003078:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800307c:	d032      	beq.n	80030e4 <__ssputs_r+0x80>
 800307e:	6825      	ldr	r5, [r4, #0]
 8003080:	6909      	ldr	r1, [r1, #16]
 8003082:	3301      	adds	r3, #1
 8003084:	eba5 0901 	sub.w	r9, r5, r1
 8003088:	6965      	ldr	r5, [r4, #20]
 800308a:	444b      	add	r3, r9
 800308c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003090:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003094:	106d      	asrs	r5, r5, #1
 8003096:	429d      	cmp	r5, r3
 8003098:	bf38      	it	cc
 800309a:	461d      	movcc	r5, r3
 800309c:	0553      	lsls	r3, r2, #21
 800309e:	d531      	bpl.n	8003104 <__ssputs_r+0xa0>
 80030a0:	4629      	mov	r1, r5
 80030a2:	f000 fb61 	bl	8003768 <_malloc_r>
 80030a6:	4606      	mov	r6, r0
 80030a8:	b950      	cbnz	r0, 80030c0 <__ssputs_r+0x5c>
 80030aa:	230c      	movs	r3, #12
 80030ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030b0:	f8ca 3000 	str.w	r3, [sl]
 80030b4:	89a3      	ldrh	r3, [r4, #12]
 80030b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030ba:	81a3      	strh	r3, [r4, #12]
 80030bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030c0:	464a      	mov	r2, r9
 80030c2:	6921      	ldr	r1, [r4, #16]
 80030c4:	f7ff ff98 	bl	8002ff8 <memcpy>
 80030c8:	89a3      	ldrh	r3, [r4, #12]
 80030ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80030ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030d2:	81a3      	strh	r3, [r4, #12]
 80030d4:	6126      	str	r6, [r4, #16]
 80030d6:	444e      	add	r6, r9
 80030d8:	6026      	str	r6, [r4, #0]
 80030da:	463e      	mov	r6, r7
 80030dc:	6165      	str	r5, [r4, #20]
 80030de:	eba5 0509 	sub.w	r5, r5, r9
 80030e2:	60a5      	str	r5, [r4, #8]
 80030e4:	42be      	cmp	r6, r7
 80030e6:	d900      	bls.n	80030ea <__ssputs_r+0x86>
 80030e8:	463e      	mov	r6, r7
 80030ea:	4632      	mov	r2, r6
 80030ec:	4641      	mov	r1, r8
 80030ee:	6820      	ldr	r0, [r4, #0]
 80030f0:	f000 fab8 	bl	8003664 <memmove>
 80030f4:	68a3      	ldr	r3, [r4, #8]
 80030f6:	2000      	movs	r0, #0
 80030f8:	1b9b      	subs	r3, r3, r6
 80030fa:	60a3      	str	r3, [r4, #8]
 80030fc:	6823      	ldr	r3, [r4, #0]
 80030fe:	4433      	add	r3, r6
 8003100:	6023      	str	r3, [r4, #0]
 8003102:	e7db      	b.n	80030bc <__ssputs_r+0x58>
 8003104:	462a      	mov	r2, r5
 8003106:	f000 fba3 	bl	8003850 <_realloc_r>
 800310a:	4606      	mov	r6, r0
 800310c:	2800      	cmp	r0, #0
 800310e:	d1e1      	bne.n	80030d4 <__ssputs_r+0x70>
 8003110:	4650      	mov	r0, sl
 8003112:	6921      	ldr	r1, [r4, #16]
 8003114:	f000 fac0 	bl	8003698 <_free_r>
 8003118:	e7c7      	b.n	80030aa <__ssputs_r+0x46>
	...

0800311c <_svfiprintf_r>:
 800311c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003120:	4698      	mov	r8, r3
 8003122:	898b      	ldrh	r3, [r1, #12]
 8003124:	4607      	mov	r7, r0
 8003126:	061b      	lsls	r3, r3, #24
 8003128:	460d      	mov	r5, r1
 800312a:	4614      	mov	r4, r2
 800312c:	b09d      	sub	sp, #116	; 0x74
 800312e:	d50e      	bpl.n	800314e <_svfiprintf_r+0x32>
 8003130:	690b      	ldr	r3, [r1, #16]
 8003132:	b963      	cbnz	r3, 800314e <_svfiprintf_r+0x32>
 8003134:	2140      	movs	r1, #64	; 0x40
 8003136:	f000 fb17 	bl	8003768 <_malloc_r>
 800313a:	6028      	str	r0, [r5, #0]
 800313c:	6128      	str	r0, [r5, #16]
 800313e:	b920      	cbnz	r0, 800314a <_svfiprintf_r+0x2e>
 8003140:	230c      	movs	r3, #12
 8003142:	603b      	str	r3, [r7, #0]
 8003144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003148:	e0d1      	b.n	80032ee <_svfiprintf_r+0x1d2>
 800314a:	2340      	movs	r3, #64	; 0x40
 800314c:	616b      	str	r3, [r5, #20]
 800314e:	2300      	movs	r3, #0
 8003150:	9309      	str	r3, [sp, #36]	; 0x24
 8003152:	2320      	movs	r3, #32
 8003154:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003158:	2330      	movs	r3, #48	; 0x30
 800315a:	f04f 0901 	mov.w	r9, #1
 800315e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003162:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003308 <_svfiprintf_r+0x1ec>
 8003166:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800316a:	4623      	mov	r3, r4
 800316c:	469a      	mov	sl, r3
 800316e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003172:	b10a      	cbz	r2, 8003178 <_svfiprintf_r+0x5c>
 8003174:	2a25      	cmp	r2, #37	; 0x25
 8003176:	d1f9      	bne.n	800316c <_svfiprintf_r+0x50>
 8003178:	ebba 0b04 	subs.w	fp, sl, r4
 800317c:	d00b      	beq.n	8003196 <_svfiprintf_r+0x7a>
 800317e:	465b      	mov	r3, fp
 8003180:	4622      	mov	r2, r4
 8003182:	4629      	mov	r1, r5
 8003184:	4638      	mov	r0, r7
 8003186:	f7ff ff6d 	bl	8003064 <__ssputs_r>
 800318a:	3001      	adds	r0, #1
 800318c:	f000 80aa 	beq.w	80032e4 <_svfiprintf_r+0x1c8>
 8003190:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003192:	445a      	add	r2, fp
 8003194:	9209      	str	r2, [sp, #36]	; 0x24
 8003196:	f89a 3000 	ldrb.w	r3, [sl]
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 80a2 	beq.w	80032e4 <_svfiprintf_r+0x1c8>
 80031a0:	2300      	movs	r3, #0
 80031a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031aa:	f10a 0a01 	add.w	sl, sl, #1
 80031ae:	9304      	str	r3, [sp, #16]
 80031b0:	9307      	str	r3, [sp, #28]
 80031b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80031b6:	931a      	str	r3, [sp, #104]	; 0x68
 80031b8:	4654      	mov	r4, sl
 80031ba:	2205      	movs	r2, #5
 80031bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031c0:	4851      	ldr	r0, [pc, #324]	; (8003308 <_svfiprintf_r+0x1ec>)
 80031c2:	f000 fa41 	bl	8003648 <memchr>
 80031c6:	9a04      	ldr	r2, [sp, #16]
 80031c8:	b9d8      	cbnz	r0, 8003202 <_svfiprintf_r+0xe6>
 80031ca:	06d0      	lsls	r0, r2, #27
 80031cc:	bf44      	itt	mi
 80031ce:	2320      	movmi	r3, #32
 80031d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031d4:	0711      	lsls	r1, r2, #28
 80031d6:	bf44      	itt	mi
 80031d8:	232b      	movmi	r3, #43	; 0x2b
 80031da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031de:	f89a 3000 	ldrb.w	r3, [sl]
 80031e2:	2b2a      	cmp	r3, #42	; 0x2a
 80031e4:	d015      	beq.n	8003212 <_svfiprintf_r+0xf6>
 80031e6:	4654      	mov	r4, sl
 80031e8:	2000      	movs	r0, #0
 80031ea:	f04f 0c0a 	mov.w	ip, #10
 80031ee:	9a07      	ldr	r2, [sp, #28]
 80031f0:	4621      	mov	r1, r4
 80031f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031f6:	3b30      	subs	r3, #48	; 0x30
 80031f8:	2b09      	cmp	r3, #9
 80031fa:	d94e      	bls.n	800329a <_svfiprintf_r+0x17e>
 80031fc:	b1b0      	cbz	r0, 800322c <_svfiprintf_r+0x110>
 80031fe:	9207      	str	r2, [sp, #28]
 8003200:	e014      	b.n	800322c <_svfiprintf_r+0x110>
 8003202:	eba0 0308 	sub.w	r3, r0, r8
 8003206:	fa09 f303 	lsl.w	r3, r9, r3
 800320a:	4313      	orrs	r3, r2
 800320c:	46a2      	mov	sl, r4
 800320e:	9304      	str	r3, [sp, #16]
 8003210:	e7d2      	b.n	80031b8 <_svfiprintf_r+0x9c>
 8003212:	9b03      	ldr	r3, [sp, #12]
 8003214:	1d19      	adds	r1, r3, #4
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	9103      	str	r1, [sp, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	bfbb      	ittet	lt
 800321e:	425b      	neglt	r3, r3
 8003220:	f042 0202 	orrlt.w	r2, r2, #2
 8003224:	9307      	strge	r3, [sp, #28]
 8003226:	9307      	strlt	r3, [sp, #28]
 8003228:	bfb8      	it	lt
 800322a:	9204      	strlt	r2, [sp, #16]
 800322c:	7823      	ldrb	r3, [r4, #0]
 800322e:	2b2e      	cmp	r3, #46	; 0x2e
 8003230:	d10c      	bne.n	800324c <_svfiprintf_r+0x130>
 8003232:	7863      	ldrb	r3, [r4, #1]
 8003234:	2b2a      	cmp	r3, #42	; 0x2a
 8003236:	d135      	bne.n	80032a4 <_svfiprintf_r+0x188>
 8003238:	9b03      	ldr	r3, [sp, #12]
 800323a:	3402      	adds	r4, #2
 800323c:	1d1a      	adds	r2, r3, #4
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	9203      	str	r2, [sp, #12]
 8003242:	2b00      	cmp	r3, #0
 8003244:	bfb8      	it	lt
 8003246:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800324a:	9305      	str	r3, [sp, #20]
 800324c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800330c <_svfiprintf_r+0x1f0>
 8003250:	2203      	movs	r2, #3
 8003252:	4650      	mov	r0, sl
 8003254:	7821      	ldrb	r1, [r4, #0]
 8003256:	f000 f9f7 	bl	8003648 <memchr>
 800325a:	b140      	cbz	r0, 800326e <_svfiprintf_r+0x152>
 800325c:	2340      	movs	r3, #64	; 0x40
 800325e:	eba0 000a 	sub.w	r0, r0, sl
 8003262:	fa03 f000 	lsl.w	r0, r3, r0
 8003266:	9b04      	ldr	r3, [sp, #16]
 8003268:	3401      	adds	r4, #1
 800326a:	4303      	orrs	r3, r0
 800326c:	9304      	str	r3, [sp, #16]
 800326e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003272:	2206      	movs	r2, #6
 8003274:	4826      	ldr	r0, [pc, #152]	; (8003310 <_svfiprintf_r+0x1f4>)
 8003276:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800327a:	f000 f9e5 	bl	8003648 <memchr>
 800327e:	2800      	cmp	r0, #0
 8003280:	d038      	beq.n	80032f4 <_svfiprintf_r+0x1d8>
 8003282:	4b24      	ldr	r3, [pc, #144]	; (8003314 <_svfiprintf_r+0x1f8>)
 8003284:	bb1b      	cbnz	r3, 80032ce <_svfiprintf_r+0x1b2>
 8003286:	9b03      	ldr	r3, [sp, #12]
 8003288:	3307      	adds	r3, #7
 800328a:	f023 0307 	bic.w	r3, r3, #7
 800328e:	3308      	adds	r3, #8
 8003290:	9303      	str	r3, [sp, #12]
 8003292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003294:	4433      	add	r3, r6
 8003296:	9309      	str	r3, [sp, #36]	; 0x24
 8003298:	e767      	b.n	800316a <_svfiprintf_r+0x4e>
 800329a:	460c      	mov	r4, r1
 800329c:	2001      	movs	r0, #1
 800329e:	fb0c 3202 	mla	r2, ip, r2, r3
 80032a2:	e7a5      	b.n	80031f0 <_svfiprintf_r+0xd4>
 80032a4:	2300      	movs	r3, #0
 80032a6:	f04f 0c0a 	mov.w	ip, #10
 80032aa:	4619      	mov	r1, r3
 80032ac:	3401      	adds	r4, #1
 80032ae:	9305      	str	r3, [sp, #20]
 80032b0:	4620      	mov	r0, r4
 80032b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032b6:	3a30      	subs	r2, #48	; 0x30
 80032b8:	2a09      	cmp	r2, #9
 80032ba:	d903      	bls.n	80032c4 <_svfiprintf_r+0x1a8>
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0c5      	beq.n	800324c <_svfiprintf_r+0x130>
 80032c0:	9105      	str	r1, [sp, #20]
 80032c2:	e7c3      	b.n	800324c <_svfiprintf_r+0x130>
 80032c4:	4604      	mov	r4, r0
 80032c6:	2301      	movs	r3, #1
 80032c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80032cc:	e7f0      	b.n	80032b0 <_svfiprintf_r+0x194>
 80032ce:	ab03      	add	r3, sp, #12
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	462a      	mov	r2, r5
 80032d4:	4638      	mov	r0, r7
 80032d6:	4b10      	ldr	r3, [pc, #64]	; (8003318 <_svfiprintf_r+0x1fc>)
 80032d8:	a904      	add	r1, sp, #16
 80032da:	f3af 8000 	nop.w
 80032de:	1c42      	adds	r2, r0, #1
 80032e0:	4606      	mov	r6, r0
 80032e2:	d1d6      	bne.n	8003292 <_svfiprintf_r+0x176>
 80032e4:	89ab      	ldrh	r3, [r5, #12]
 80032e6:	065b      	lsls	r3, r3, #25
 80032e8:	f53f af2c 	bmi.w	8003144 <_svfiprintf_r+0x28>
 80032ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032ee:	b01d      	add	sp, #116	; 0x74
 80032f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032f4:	ab03      	add	r3, sp, #12
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	462a      	mov	r2, r5
 80032fa:	4638      	mov	r0, r7
 80032fc:	4b06      	ldr	r3, [pc, #24]	; (8003318 <_svfiprintf_r+0x1fc>)
 80032fe:	a904      	add	r1, sp, #16
 8003300:	f000 f87c 	bl	80033fc <_printf_i>
 8003304:	e7eb      	b.n	80032de <_svfiprintf_r+0x1c2>
 8003306:	bf00      	nop
 8003308:	08003f84 	.word	0x08003f84
 800330c:	08003f8a 	.word	0x08003f8a
 8003310:	08003f8e 	.word	0x08003f8e
 8003314:	00000000 	.word	0x00000000
 8003318:	08003065 	.word	0x08003065

0800331c <_printf_common>:
 800331c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003320:	4616      	mov	r6, r2
 8003322:	4699      	mov	r9, r3
 8003324:	688a      	ldr	r2, [r1, #8]
 8003326:	690b      	ldr	r3, [r1, #16]
 8003328:	4607      	mov	r7, r0
 800332a:	4293      	cmp	r3, r2
 800332c:	bfb8      	it	lt
 800332e:	4613      	movlt	r3, r2
 8003330:	6033      	str	r3, [r6, #0]
 8003332:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003336:	460c      	mov	r4, r1
 8003338:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800333c:	b10a      	cbz	r2, 8003342 <_printf_common+0x26>
 800333e:	3301      	adds	r3, #1
 8003340:	6033      	str	r3, [r6, #0]
 8003342:	6823      	ldr	r3, [r4, #0]
 8003344:	0699      	lsls	r1, r3, #26
 8003346:	bf42      	ittt	mi
 8003348:	6833      	ldrmi	r3, [r6, #0]
 800334a:	3302      	addmi	r3, #2
 800334c:	6033      	strmi	r3, [r6, #0]
 800334e:	6825      	ldr	r5, [r4, #0]
 8003350:	f015 0506 	ands.w	r5, r5, #6
 8003354:	d106      	bne.n	8003364 <_printf_common+0x48>
 8003356:	f104 0a19 	add.w	sl, r4, #25
 800335a:	68e3      	ldr	r3, [r4, #12]
 800335c:	6832      	ldr	r2, [r6, #0]
 800335e:	1a9b      	subs	r3, r3, r2
 8003360:	42ab      	cmp	r3, r5
 8003362:	dc28      	bgt.n	80033b6 <_printf_common+0x9a>
 8003364:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003368:	1e13      	subs	r3, r2, #0
 800336a:	6822      	ldr	r2, [r4, #0]
 800336c:	bf18      	it	ne
 800336e:	2301      	movne	r3, #1
 8003370:	0692      	lsls	r2, r2, #26
 8003372:	d42d      	bmi.n	80033d0 <_printf_common+0xb4>
 8003374:	4649      	mov	r1, r9
 8003376:	4638      	mov	r0, r7
 8003378:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800337c:	47c0      	blx	r8
 800337e:	3001      	adds	r0, #1
 8003380:	d020      	beq.n	80033c4 <_printf_common+0xa8>
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	68e5      	ldr	r5, [r4, #12]
 8003386:	f003 0306 	and.w	r3, r3, #6
 800338a:	2b04      	cmp	r3, #4
 800338c:	bf18      	it	ne
 800338e:	2500      	movne	r5, #0
 8003390:	6832      	ldr	r2, [r6, #0]
 8003392:	f04f 0600 	mov.w	r6, #0
 8003396:	68a3      	ldr	r3, [r4, #8]
 8003398:	bf08      	it	eq
 800339a:	1aad      	subeq	r5, r5, r2
 800339c:	6922      	ldr	r2, [r4, #16]
 800339e:	bf08      	it	eq
 80033a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033a4:	4293      	cmp	r3, r2
 80033a6:	bfc4      	itt	gt
 80033a8:	1a9b      	subgt	r3, r3, r2
 80033aa:	18ed      	addgt	r5, r5, r3
 80033ac:	341a      	adds	r4, #26
 80033ae:	42b5      	cmp	r5, r6
 80033b0:	d11a      	bne.n	80033e8 <_printf_common+0xcc>
 80033b2:	2000      	movs	r0, #0
 80033b4:	e008      	b.n	80033c8 <_printf_common+0xac>
 80033b6:	2301      	movs	r3, #1
 80033b8:	4652      	mov	r2, sl
 80033ba:	4649      	mov	r1, r9
 80033bc:	4638      	mov	r0, r7
 80033be:	47c0      	blx	r8
 80033c0:	3001      	adds	r0, #1
 80033c2:	d103      	bne.n	80033cc <_printf_common+0xb0>
 80033c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033cc:	3501      	adds	r5, #1
 80033ce:	e7c4      	b.n	800335a <_printf_common+0x3e>
 80033d0:	2030      	movs	r0, #48	; 0x30
 80033d2:	18e1      	adds	r1, r4, r3
 80033d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80033d8:	1c5a      	adds	r2, r3, #1
 80033da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033de:	4422      	add	r2, r4
 80033e0:	3302      	adds	r3, #2
 80033e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033e6:	e7c5      	b.n	8003374 <_printf_common+0x58>
 80033e8:	2301      	movs	r3, #1
 80033ea:	4622      	mov	r2, r4
 80033ec:	4649      	mov	r1, r9
 80033ee:	4638      	mov	r0, r7
 80033f0:	47c0      	blx	r8
 80033f2:	3001      	adds	r0, #1
 80033f4:	d0e6      	beq.n	80033c4 <_printf_common+0xa8>
 80033f6:	3601      	adds	r6, #1
 80033f8:	e7d9      	b.n	80033ae <_printf_common+0x92>
	...

080033fc <_printf_i>:
 80033fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003400:	7e0f      	ldrb	r7, [r1, #24]
 8003402:	4691      	mov	r9, r2
 8003404:	2f78      	cmp	r7, #120	; 0x78
 8003406:	4680      	mov	r8, r0
 8003408:	460c      	mov	r4, r1
 800340a:	469a      	mov	sl, r3
 800340c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800340e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003412:	d807      	bhi.n	8003424 <_printf_i+0x28>
 8003414:	2f62      	cmp	r7, #98	; 0x62
 8003416:	d80a      	bhi.n	800342e <_printf_i+0x32>
 8003418:	2f00      	cmp	r7, #0
 800341a:	f000 80d9 	beq.w	80035d0 <_printf_i+0x1d4>
 800341e:	2f58      	cmp	r7, #88	; 0x58
 8003420:	f000 80a4 	beq.w	800356c <_printf_i+0x170>
 8003424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003428:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800342c:	e03a      	b.n	80034a4 <_printf_i+0xa8>
 800342e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003432:	2b15      	cmp	r3, #21
 8003434:	d8f6      	bhi.n	8003424 <_printf_i+0x28>
 8003436:	a101      	add	r1, pc, #4	; (adr r1, 800343c <_printf_i+0x40>)
 8003438:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800343c:	08003495 	.word	0x08003495
 8003440:	080034a9 	.word	0x080034a9
 8003444:	08003425 	.word	0x08003425
 8003448:	08003425 	.word	0x08003425
 800344c:	08003425 	.word	0x08003425
 8003450:	08003425 	.word	0x08003425
 8003454:	080034a9 	.word	0x080034a9
 8003458:	08003425 	.word	0x08003425
 800345c:	08003425 	.word	0x08003425
 8003460:	08003425 	.word	0x08003425
 8003464:	08003425 	.word	0x08003425
 8003468:	080035b7 	.word	0x080035b7
 800346c:	080034d9 	.word	0x080034d9
 8003470:	08003599 	.word	0x08003599
 8003474:	08003425 	.word	0x08003425
 8003478:	08003425 	.word	0x08003425
 800347c:	080035d9 	.word	0x080035d9
 8003480:	08003425 	.word	0x08003425
 8003484:	080034d9 	.word	0x080034d9
 8003488:	08003425 	.word	0x08003425
 800348c:	08003425 	.word	0x08003425
 8003490:	080035a1 	.word	0x080035a1
 8003494:	682b      	ldr	r3, [r5, #0]
 8003496:	1d1a      	adds	r2, r3, #4
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	602a      	str	r2, [r5, #0]
 800349c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034a4:	2301      	movs	r3, #1
 80034a6:	e0a4      	b.n	80035f2 <_printf_i+0x1f6>
 80034a8:	6820      	ldr	r0, [r4, #0]
 80034aa:	6829      	ldr	r1, [r5, #0]
 80034ac:	0606      	lsls	r6, r0, #24
 80034ae:	f101 0304 	add.w	r3, r1, #4
 80034b2:	d50a      	bpl.n	80034ca <_printf_i+0xce>
 80034b4:	680e      	ldr	r6, [r1, #0]
 80034b6:	602b      	str	r3, [r5, #0]
 80034b8:	2e00      	cmp	r6, #0
 80034ba:	da03      	bge.n	80034c4 <_printf_i+0xc8>
 80034bc:	232d      	movs	r3, #45	; 0x2d
 80034be:	4276      	negs	r6, r6
 80034c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034c4:	230a      	movs	r3, #10
 80034c6:	485e      	ldr	r0, [pc, #376]	; (8003640 <_printf_i+0x244>)
 80034c8:	e019      	b.n	80034fe <_printf_i+0x102>
 80034ca:	680e      	ldr	r6, [r1, #0]
 80034cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80034d0:	602b      	str	r3, [r5, #0]
 80034d2:	bf18      	it	ne
 80034d4:	b236      	sxthne	r6, r6
 80034d6:	e7ef      	b.n	80034b8 <_printf_i+0xbc>
 80034d8:	682b      	ldr	r3, [r5, #0]
 80034da:	6820      	ldr	r0, [r4, #0]
 80034dc:	1d19      	adds	r1, r3, #4
 80034de:	6029      	str	r1, [r5, #0]
 80034e0:	0601      	lsls	r1, r0, #24
 80034e2:	d501      	bpl.n	80034e8 <_printf_i+0xec>
 80034e4:	681e      	ldr	r6, [r3, #0]
 80034e6:	e002      	b.n	80034ee <_printf_i+0xf2>
 80034e8:	0646      	lsls	r6, r0, #25
 80034ea:	d5fb      	bpl.n	80034e4 <_printf_i+0xe8>
 80034ec:	881e      	ldrh	r6, [r3, #0]
 80034ee:	2f6f      	cmp	r7, #111	; 0x6f
 80034f0:	bf0c      	ite	eq
 80034f2:	2308      	moveq	r3, #8
 80034f4:	230a      	movne	r3, #10
 80034f6:	4852      	ldr	r0, [pc, #328]	; (8003640 <_printf_i+0x244>)
 80034f8:	2100      	movs	r1, #0
 80034fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80034fe:	6865      	ldr	r5, [r4, #4]
 8003500:	2d00      	cmp	r5, #0
 8003502:	bfa8      	it	ge
 8003504:	6821      	ldrge	r1, [r4, #0]
 8003506:	60a5      	str	r5, [r4, #8]
 8003508:	bfa4      	itt	ge
 800350a:	f021 0104 	bicge.w	r1, r1, #4
 800350e:	6021      	strge	r1, [r4, #0]
 8003510:	b90e      	cbnz	r6, 8003516 <_printf_i+0x11a>
 8003512:	2d00      	cmp	r5, #0
 8003514:	d04d      	beq.n	80035b2 <_printf_i+0x1b6>
 8003516:	4615      	mov	r5, r2
 8003518:	fbb6 f1f3 	udiv	r1, r6, r3
 800351c:	fb03 6711 	mls	r7, r3, r1, r6
 8003520:	5dc7      	ldrb	r7, [r0, r7]
 8003522:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003526:	4637      	mov	r7, r6
 8003528:	42bb      	cmp	r3, r7
 800352a:	460e      	mov	r6, r1
 800352c:	d9f4      	bls.n	8003518 <_printf_i+0x11c>
 800352e:	2b08      	cmp	r3, #8
 8003530:	d10b      	bne.n	800354a <_printf_i+0x14e>
 8003532:	6823      	ldr	r3, [r4, #0]
 8003534:	07de      	lsls	r6, r3, #31
 8003536:	d508      	bpl.n	800354a <_printf_i+0x14e>
 8003538:	6923      	ldr	r3, [r4, #16]
 800353a:	6861      	ldr	r1, [r4, #4]
 800353c:	4299      	cmp	r1, r3
 800353e:	bfde      	ittt	le
 8003540:	2330      	movle	r3, #48	; 0x30
 8003542:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003546:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800354a:	1b52      	subs	r2, r2, r5
 800354c:	6122      	str	r2, [r4, #16]
 800354e:	464b      	mov	r3, r9
 8003550:	4621      	mov	r1, r4
 8003552:	4640      	mov	r0, r8
 8003554:	f8cd a000 	str.w	sl, [sp]
 8003558:	aa03      	add	r2, sp, #12
 800355a:	f7ff fedf 	bl	800331c <_printf_common>
 800355e:	3001      	adds	r0, #1
 8003560:	d14c      	bne.n	80035fc <_printf_i+0x200>
 8003562:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003566:	b004      	add	sp, #16
 8003568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800356c:	4834      	ldr	r0, [pc, #208]	; (8003640 <_printf_i+0x244>)
 800356e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003572:	6829      	ldr	r1, [r5, #0]
 8003574:	6823      	ldr	r3, [r4, #0]
 8003576:	f851 6b04 	ldr.w	r6, [r1], #4
 800357a:	6029      	str	r1, [r5, #0]
 800357c:	061d      	lsls	r5, r3, #24
 800357e:	d514      	bpl.n	80035aa <_printf_i+0x1ae>
 8003580:	07df      	lsls	r7, r3, #31
 8003582:	bf44      	itt	mi
 8003584:	f043 0320 	orrmi.w	r3, r3, #32
 8003588:	6023      	strmi	r3, [r4, #0]
 800358a:	b91e      	cbnz	r6, 8003594 <_printf_i+0x198>
 800358c:	6823      	ldr	r3, [r4, #0]
 800358e:	f023 0320 	bic.w	r3, r3, #32
 8003592:	6023      	str	r3, [r4, #0]
 8003594:	2310      	movs	r3, #16
 8003596:	e7af      	b.n	80034f8 <_printf_i+0xfc>
 8003598:	6823      	ldr	r3, [r4, #0]
 800359a:	f043 0320 	orr.w	r3, r3, #32
 800359e:	6023      	str	r3, [r4, #0]
 80035a0:	2378      	movs	r3, #120	; 0x78
 80035a2:	4828      	ldr	r0, [pc, #160]	; (8003644 <_printf_i+0x248>)
 80035a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80035a8:	e7e3      	b.n	8003572 <_printf_i+0x176>
 80035aa:	0659      	lsls	r1, r3, #25
 80035ac:	bf48      	it	mi
 80035ae:	b2b6      	uxthmi	r6, r6
 80035b0:	e7e6      	b.n	8003580 <_printf_i+0x184>
 80035b2:	4615      	mov	r5, r2
 80035b4:	e7bb      	b.n	800352e <_printf_i+0x132>
 80035b6:	682b      	ldr	r3, [r5, #0]
 80035b8:	6826      	ldr	r6, [r4, #0]
 80035ba:	1d18      	adds	r0, r3, #4
 80035bc:	6961      	ldr	r1, [r4, #20]
 80035be:	6028      	str	r0, [r5, #0]
 80035c0:	0635      	lsls	r5, r6, #24
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	d501      	bpl.n	80035ca <_printf_i+0x1ce>
 80035c6:	6019      	str	r1, [r3, #0]
 80035c8:	e002      	b.n	80035d0 <_printf_i+0x1d4>
 80035ca:	0670      	lsls	r0, r6, #25
 80035cc:	d5fb      	bpl.n	80035c6 <_printf_i+0x1ca>
 80035ce:	8019      	strh	r1, [r3, #0]
 80035d0:	2300      	movs	r3, #0
 80035d2:	4615      	mov	r5, r2
 80035d4:	6123      	str	r3, [r4, #16]
 80035d6:	e7ba      	b.n	800354e <_printf_i+0x152>
 80035d8:	682b      	ldr	r3, [r5, #0]
 80035da:	2100      	movs	r1, #0
 80035dc:	1d1a      	adds	r2, r3, #4
 80035de:	602a      	str	r2, [r5, #0]
 80035e0:	681d      	ldr	r5, [r3, #0]
 80035e2:	6862      	ldr	r2, [r4, #4]
 80035e4:	4628      	mov	r0, r5
 80035e6:	f000 f82f 	bl	8003648 <memchr>
 80035ea:	b108      	cbz	r0, 80035f0 <_printf_i+0x1f4>
 80035ec:	1b40      	subs	r0, r0, r5
 80035ee:	6060      	str	r0, [r4, #4]
 80035f0:	6863      	ldr	r3, [r4, #4]
 80035f2:	6123      	str	r3, [r4, #16]
 80035f4:	2300      	movs	r3, #0
 80035f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035fa:	e7a8      	b.n	800354e <_printf_i+0x152>
 80035fc:	462a      	mov	r2, r5
 80035fe:	4649      	mov	r1, r9
 8003600:	4640      	mov	r0, r8
 8003602:	6923      	ldr	r3, [r4, #16]
 8003604:	47d0      	blx	sl
 8003606:	3001      	adds	r0, #1
 8003608:	d0ab      	beq.n	8003562 <_printf_i+0x166>
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	079b      	lsls	r3, r3, #30
 800360e:	d413      	bmi.n	8003638 <_printf_i+0x23c>
 8003610:	68e0      	ldr	r0, [r4, #12]
 8003612:	9b03      	ldr	r3, [sp, #12]
 8003614:	4298      	cmp	r0, r3
 8003616:	bfb8      	it	lt
 8003618:	4618      	movlt	r0, r3
 800361a:	e7a4      	b.n	8003566 <_printf_i+0x16a>
 800361c:	2301      	movs	r3, #1
 800361e:	4632      	mov	r2, r6
 8003620:	4649      	mov	r1, r9
 8003622:	4640      	mov	r0, r8
 8003624:	47d0      	blx	sl
 8003626:	3001      	adds	r0, #1
 8003628:	d09b      	beq.n	8003562 <_printf_i+0x166>
 800362a:	3501      	adds	r5, #1
 800362c:	68e3      	ldr	r3, [r4, #12]
 800362e:	9903      	ldr	r1, [sp, #12]
 8003630:	1a5b      	subs	r3, r3, r1
 8003632:	42ab      	cmp	r3, r5
 8003634:	dcf2      	bgt.n	800361c <_printf_i+0x220>
 8003636:	e7eb      	b.n	8003610 <_printf_i+0x214>
 8003638:	2500      	movs	r5, #0
 800363a:	f104 0619 	add.w	r6, r4, #25
 800363e:	e7f5      	b.n	800362c <_printf_i+0x230>
 8003640:	08003f95 	.word	0x08003f95
 8003644:	08003fa6 	.word	0x08003fa6

08003648 <memchr>:
 8003648:	4603      	mov	r3, r0
 800364a:	b510      	push	{r4, lr}
 800364c:	b2c9      	uxtb	r1, r1
 800364e:	4402      	add	r2, r0
 8003650:	4293      	cmp	r3, r2
 8003652:	4618      	mov	r0, r3
 8003654:	d101      	bne.n	800365a <memchr+0x12>
 8003656:	2000      	movs	r0, #0
 8003658:	e003      	b.n	8003662 <memchr+0x1a>
 800365a:	7804      	ldrb	r4, [r0, #0]
 800365c:	3301      	adds	r3, #1
 800365e:	428c      	cmp	r4, r1
 8003660:	d1f6      	bne.n	8003650 <memchr+0x8>
 8003662:	bd10      	pop	{r4, pc}

08003664 <memmove>:
 8003664:	4288      	cmp	r0, r1
 8003666:	b510      	push	{r4, lr}
 8003668:	eb01 0402 	add.w	r4, r1, r2
 800366c:	d902      	bls.n	8003674 <memmove+0x10>
 800366e:	4284      	cmp	r4, r0
 8003670:	4623      	mov	r3, r4
 8003672:	d807      	bhi.n	8003684 <memmove+0x20>
 8003674:	1e43      	subs	r3, r0, #1
 8003676:	42a1      	cmp	r1, r4
 8003678:	d008      	beq.n	800368c <memmove+0x28>
 800367a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800367e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003682:	e7f8      	b.n	8003676 <memmove+0x12>
 8003684:	4601      	mov	r1, r0
 8003686:	4402      	add	r2, r0
 8003688:	428a      	cmp	r2, r1
 800368a:	d100      	bne.n	800368e <memmove+0x2a>
 800368c:	bd10      	pop	{r4, pc}
 800368e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003692:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003696:	e7f7      	b.n	8003688 <memmove+0x24>

08003698 <_free_r>:
 8003698:	b538      	push	{r3, r4, r5, lr}
 800369a:	4605      	mov	r5, r0
 800369c:	2900      	cmp	r1, #0
 800369e:	d040      	beq.n	8003722 <_free_r+0x8a>
 80036a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036a4:	1f0c      	subs	r4, r1, #4
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	bfb8      	it	lt
 80036aa:	18e4      	addlt	r4, r4, r3
 80036ac:	f000 f910 	bl	80038d0 <__malloc_lock>
 80036b0:	4a1c      	ldr	r2, [pc, #112]	; (8003724 <_free_r+0x8c>)
 80036b2:	6813      	ldr	r3, [r2, #0]
 80036b4:	b933      	cbnz	r3, 80036c4 <_free_r+0x2c>
 80036b6:	6063      	str	r3, [r4, #4]
 80036b8:	6014      	str	r4, [r2, #0]
 80036ba:	4628      	mov	r0, r5
 80036bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036c0:	f000 b90c 	b.w	80038dc <__malloc_unlock>
 80036c4:	42a3      	cmp	r3, r4
 80036c6:	d908      	bls.n	80036da <_free_r+0x42>
 80036c8:	6820      	ldr	r0, [r4, #0]
 80036ca:	1821      	adds	r1, r4, r0
 80036cc:	428b      	cmp	r3, r1
 80036ce:	bf01      	itttt	eq
 80036d0:	6819      	ldreq	r1, [r3, #0]
 80036d2:	685b      	ldreq	r3, [r3, #4]
 80036d4:	1809      	addeq	r1, r1, r0
 80036d6:	6021      	streq	r1, [r4, #0]
 80036d8:	e7ed      	b.n	80036b6 <_free_r+0x1e>
 80036da:	461a      	mov	r2, r3
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	b10b      	cbz	r3, 80036e4 <_free_r+0x4c>
 80036e0:	42a3      	cmp	r3, r4
 80036e2:	d9fa      	bls.n	80036da <_free_r+0x42>
 80036e4:	6811      	ldr	r1, [r2, #0]
 80036e6:	1850      	adds	r0, r2, r1
 80036e8:	42a0      	cmp	r0, r4
 80036ea:	d10b      	bne.n	8003704 <_free_r+0x6c>
 80036ec:	6820      	ldr	r0, [r4, #0]
 80036ee:	4401      	add	r1, r0
 80036f0:	1850      	adds	r0, r2, r1
 80036f2:	4283      	cmp	r3, r0
 80036f4:	6011      	str	r1, [r2, #0]
 80036f6:	d1e0      	bne.n	80036ba <_free_r+0x22>
 80036f8:	6818      	ldr	r0, [r3, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	4401      	add	r1, r0
 80036fe:	6011      	str	r1, [r2, #0]
 8003700:	6053      	str	r3, [r2, #4]
 8003702:	e7da      	b.n	80036ba <_free_r+0x22>
 8003704:	d902      	bls.n	800370c <_free_r+0x74>
 8003706:	230c      	movs	r3, #12
 8003708:	602b      	str	r3, [r5, #0]
 800370a:	e7d6      	b.n	80036ba <_free_r+0x22>
 800370c:	6820      	ldr	r0, [r4, #0]
 800370e:	1821      	adds	r1, r4, r0
 8003710:	428b      	cmp	r3, r1
 8003712:	bf01      	itttt	eq
 8003714:	6819      	ldreq	r1, [r3, #0]
 8003716:	685b      	ldreq	r3, [r3, #4]
 8003718:	1809      	addeq	r1, r1, r0
 800371a:	6021      	streq	r1, [r4, #0]
 800371c:	6063      	str	r3, [r4, #4]
 800371e:	6054      	str	r4, [r2, #4]
 8003720:	e7cb      	b.n	80036ba <_free_r+0x22>
 8003722:	bd38      	pop	{r3, r4, r5, pc}
 8003724:	20000140 	.word	0x20000140

08003728 <sbrk_aligned>:
 8003728:	b570      	push	{r4, r5, r6, lr}
 800372a:	4e0e      	ldr	r6, [pc, #56]	; (8003764 <sbrk_aligned+0x3c>)
 800372c:	460c      	mov	r4, r1
 800372e:	6831      	ldr	r1, [r6, #0]
 8003730:	4605      	mov	r5, r0
 8003732:	b911      	cbnz	r1, 800373a <sbrk_aligned+0x12>
 8003734:	f000 f8bc 	bl	80038b0 <_sbrk_r>
 8003738:	6030      	str	r0, [r6, #0]
 800373a:	4621      	mov	r1, r4
 800373c:	4628      	mov	r0, r5
 800373e:	f000 f8b7 	bl	80038b0 <_sbrk_r>
 8003742:	1c43      	adds	r3, r0, #1
 8003744:	d00a      	beq.n	800375c <sbrk_aligned+0x34>
 8003746:	1cc4      	adds	r4, r0, #3
 8003748:	f024 0403 	bic.w	r4, r4, #3
 800374c:	42a0      	cmp	r0, r4
 800374e:	d007      	beq.n	8003760 <sbrk_aligned+0x38>
 8003750:	1a21      	subs	r1, r4, r0
 8003752:	4628      	mov	r0, r5
 8003754:	f000 f8ac 	bl	80038b0 <_sbrk_r>
 8003758:	3001      	adds	r0, #1
 800375a:	d101      	bne.n	8003760 <sbrk_aligned+0x38>
 800375c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003760:	4620      	mov	r0, r4
 8003762:	bd70      	pop	{r4, r5, r6, pc}
 8003764:	20000144 	.word	0x20000144

08003768 <_malloc_r>:
 8003768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800376c:	1ccd      	adds	r5, r1, #3
 800376e:	f025 0503 	bic.w	r5, r5, #3
 8003772:	3508      	adds	r5, #8
 8003774:	2d0c      	cmp	r5, #12
 8003776:	bf38      	it	cc
 8003778:	250c      	movcc	r5, #12
 800377a:	2d00      	cmp	r5, #0
 800377c:	4607      	mov	r7, r0
 800377e:	db01      	blt.n	8003784 <_malloc_r+0x1c>
 8003780:	42a9      	cmp	r1, r5
 8003782:	d905      	bls.n	8003790 <_malloc_r+0x28>
 8003784:	230c      	movs	r3, #12
 8003786:	2600      	movs	r6, #0
 8003788:	603b      	str	r3, [r7, #0]
 800378a:	4630      	mov	r0, r6
 800378c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003790:	4e2e      	ldr	r6, [pc, #184]	; (800384c <_malloc_r+0xe4>)
 8003792:	f000 f89d 	bl	80038d0 <__malloc_lock>
 8003796:	6833      	ldr	r3, [r6, #0]
 8003798:	461c      	mov	r4, r3
 800379a:	bb34      	cbnz	r4, 80037ea <_malloc_r+0x82>
 800379c:	4629      	mov	r1, r5
 800379e:	4638      	mov	r0, r7
 80037a0:	f7ff ffc2 	bl	8003728 <sbrk_aligned>
 80037a4:	1c43      	adds	r3, r0, #1
 80037a6:	4604      	mov	r4, r0
 80037a8:	d14d      	bne.n	8003846 <_malloc_r+0xde>
 80037aa:	6834      	ldr	r4, [r6, #0]
 80037ac:	4626      	mov	r6, r4
 80037ae:	2e00      	cmp	r6, #0
 80037b0:	d140      	bne.n	8003834 <_malloc_r+0xcc>
 80037b2:	6823      	ldr	r3, [r4, #0]
 80037b4:	4631      	mov	r1, r6
 80037b6:	4638      	mov	r0, r7
 80037b8:	eb04 0803 	add.w	r8, r4, r3
 80037bc:	f000 f878 	bl	80038b0 <_sbrk_r>
 80037c0:	4580      	cmp	r8, r0
 80037c2:	d13a      	bne.n	800383a <_malloc_r+0xd2>
 80037c4:	6821      	ldr	r1, [r4, #0]
 80037c6:	3503      	adds	r5, #3
 80037c8:	1a6d      	subs	r5, r5, r1
 80037ca:	f025 0503 	bic.w	r5, r5, #3
 80037ce:	3508      	adds	r5, #8
 80037d0:	2d0c      	cmp	r5, #12
 80037d2:	bf38      	it	cc
 80037d4:	250c      	movcc	r5, #12
 80037d6:	4638      	mov	r0, r7
 80037d8:	4629      	mov	r1, r5
 80037da:	f7ff ffa5 	bl	8003728 <sbrk_aligned>
 80037de:	3001      	adds	r0, #1
 80037e0:	d02b      	beq.n	800383a <_malloc_r+0xd2>
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	442b      	add	r3, r5
 80037e6:	6023      	str	r3, [r4, #0]
 80037e8:	e00e      	b.n	8003808 <_malloc_r+0xa0>
 80037ea:	6822      	ldr	r2, [r4, #0]
 80037ec:	1b52      	subs	r2, r2, r5
 80037ee:	d41e      	bmi.n	800382e <_malloc_r+0xc6>
 80037f0:	2a0b      	cmp	r2, #11
 80037f2:	d916      	bls.n	8003822 <_malloc_r+0xba>
 80037f4:	1961      	adds	r1, r4, r5
 80037f6:	42a3      	cmp	r3, r4
 80037f8:	6025      	str	r5, [r4, #0]
 80037fa:	bf18      	it	ne
 80037fc:	6059      	strne	r1, [r3, #4]
 80037fe:	6863      	ldr	r3, [r4, #4]
 8003800:	bf08      	it	eq
 8003802:	6031      	streq	r1, [r6, #0]
 8003804:	5162      	str	r2, [r4, r5]
 8003806:	604b      	str	r3, [r1, #4]
 8003808:	4638      	mov	r0, r7
 800380a:	f104 060b 	add.w	r6, r4, #11
 800380e:	f000 f865 	bl	80038dc <__malloc_unlock>
 8003812:	f026 0607 	bic.w	r6, r6, #7
 8003816:	1d23      	adds	r3, r4, #4
 8003818:	1af2      	subs	r2, r6, r3
 800381a:	d0b6      	beq.n	800378a <_malloc_r+0x22>
 800381c:	1b9b      	subs	r3, r3, r6
 800381e:	50a3      	str	r3, [r4, r2]
 8003820:	e7b3      	b.n	800378a <_malloc_r+0x22>
 8003822:	6862      	ldr	r2, [r4, #4]
 8003824:	42a3      	cmp	r3, r4
 8003826:	bf0c      	ite	eq
 8003828:	6032      	streq	r2, [r6, #0]
 800382a:	605a      	strne	r2, [r3, #4]
 800382c:	e7ec      	b.n	8003808 <_malloc_r+0xa0>
 800382e:	4623      	mov	r3, r4
 8003830:	6864      	ldr	r4, [r4, #4]
 8003832:	e7b2      	b.n	800379a <_malloc_r+0x32>
 8003834:	4634      	mov	r4, r6
 8003836:	6876      	ldr	r6, [r6, #4]
 8003838:	e7b9      	b.n	80037ae <_malloc_r+0x46>
 800383a:	230c      	movs	r3, #12
 800383c:	4638      	mov	r0, r7
 800383e:	603b      	str	r3, [r7, #0]
 8003840:	f000 f84c 	bl	80038dc <__malloc_unlock>
 8003844:	e7a1      	b.n	800378a <_malloc_r+0x22>
 8003846:	6025      	str	r5, [r4, #0]
 8003848:	e7de      	b.n	8003808 <_malloc_r+0xa0>
 800384a:	bf00      	nop
 800384c:	20000140 	.word	0x20000140

08003850 <_realloc_r>:
 8003850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003854:	4680      	mov	r8, r0
 8003856:	4614      	mov	r4, r2
 8003858:	460e      	mov	r6, r1
 800385a:	b921      	cbnz	r1, 8003866 <_realloc_r+0x16>
 800385c:	4611      	mov	r1, r2
 800385e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003862:	f7ff bf81 	b.w	8003768 <_malloc_r>
 8003866:	b92a      	cbnz	r2, 8003874 <_realloc_r+0x24>
 8003868:	f7ff ff16 	bl	8003698 <_free_r>
 800386c:	4625      	mov	r5, r4
 800386e:	4628      	mov	r0, r5
 8003870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003874:	f000 f838 	bl	80038e8 <_malloc_usable_size_r>
 8003878:	4284      	cmp	r4, r0
 800387a:	4607      	mov	r7, r0
 800387c:	d802      	bhi.n	8003884 <_realloc_r+0x34>
 800387e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003882:	d812      	bhi.n	80038aa <_realloc_r+0x5a>
 8003884:	4621      	mov	r1, r4
 8003886:	4640      	mov	r0, r8
 8003888:	f7ff ff6e 	bl	8003768 <_malloc_r>
 800388c:	4605      	mov	r5, r0
 800388e:	2800      	cmp	r0, #0
 8003890:	d0ed      	beq.n	800386e <_realloc_r+0x1e>
 8003892:	42bc      	cmp	r4, r7
 8003894:	4622      	mov	r2, r4
 8003896:	4631      	mov	r1, r6
 8003898:	bf28      	it	cs
 800389a:	463a      	movcs	r2, r7
 800389c:	f7ff fbac 	bl	8002ff8 <memcpy>
 80038a0:	4631      	mov	r1, r6
 80038a2:	4640      	mov	r0, r8
 80038a4:	f7ff fef8 	bl	8003698 <_free_r>
 80038a8:	e7e1      	b.n	800386e <_realloc_r+0x1e>
 80038aa:	4635      	mov	r5, r6
 80038ac:	e7df      	b.n	800386e <_realloc_r+0x1e>
	...

080038b0 <_sbrk_r>:
 80038b0:	b538      	push	{r3, r4, r5, lr}
 80038b2:	2300      	movs	r3, #0
 80038b4:	4d05      	ldr	r5, [pc, #20]	; (80038cc <_sbrk_r+0x1c>)
 80038b6:	4604      	mov	r4, r0
 80038b8:	4608      	mov	r0, r1
 80038ba:	602b      	str	r3, [r5, #0]
 80038bc:	f7fd fc08 	bl	80010d0 <_sbrk>
 80038c0:	1c43      	adds	r3, r0, #1
 80038c2:	d102      	bne.n	80038ca <_sbrk_r+0x1a>
 80038c4:	682b      	ldr	r3, [r5, #0]
 80038c6:	b103      	cbz	r3, 80038ca <_sbrk_r+0x1a>
 80038c8:	6023      	str	r3, [r4, #0]
 80038ca:	bd38      	pop	{r3, r4, r5, pc}
 80038cc:	20000148 	.word	0x20000148

080038d0 <__malloc_lock>:
 80038d0:	4801      	ldr	r0, [pc, #4]	; (80038d8 <__malloc_lock+0x8>)
 80038d2:	f000 b811 	b.w	80038f8 <__retarget_lock_acquire_recursive>
 80038d6:	bf00      	nop
 80038d8:	2000014c 	.word	0x2000014c

080038dc <__malloc_unlock>:
 80038dc:	4801      	ldr	r0, [pc, #4]	; (80038e4 <__malloc_unlock+0x8>)
 80038de:	f000 b80c 	b.w	80038fa <__retarget_lock_release_recursive>
 80038e2:	bf00      	nop
 80038e4:	2000014c 	.word	0x2000014c

080038e8 <_malloc_usable_size_r>:
 80038e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038ec:	1f18      	subs	r0, r3, #4
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	bfbc      	itt	lt
 80038f2:	580b      	ldrlt	r3, [r1, r0]
 80038f4:	18c0      	addlt	r0, r0, r3
 80038f6:	4770      	bx	lr

080038f8 <__retarget_lock_acquire_recursive>:
 80038f8:	4770      	bx	lr

080038fa <__retarget_lock_release_recursive>:
 80038fa:	4770      	bx	lr

080038fc <_init>:
 80038fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fe:	bf00      	nop
 8003900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003902:	bc08      	pop	{r3}
 8003904:	469e      	mov	lr, r3
 8003906:	4770      	bx	lr

08003908 <_fini>:
 8003908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390a:	bf00      	nop
 800390c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800390e:	bc08      	pop	{r3}
 8003910:	469e      	mov	lr, r3
 8003912:	4770      	bx	lr
